// Code generated by MockGen. DO NOT EDIT.
// Source: vm_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	modals "vm/internal/modals"
	constants "vm/pkg/constants"

	gomock "github.com/golang/mock/gomock"
)

// MockVMService is a mock of VMService interface.
type MockVMService struct {
	ctrl     *gomock.Controller
	recorder *MockVMServiceMockRecorder
}

// MockVMServiceMockRecorder is the mock recorder for MockVMService.
type MockVMServiceMockRecorder struct {
	mock *MockVMService
}

// NewMockVMService creates a new mock instance.
func NewMockVMService(ctrl *gomock.Controller) *MockVMService {
	mock := &MockVMService{ctrl: ctrl}
	mock.recorder = &MockVMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMService) EXPECT() *MockVMServiceMockRecorder {
	return m.recorder
}

// CreateVMRequest mocks base method.
func (m *MockVMService) CreateVMRequest(ctx context.Context, operation constants.OperationType, status constants.RequestStatus, metadata string) (*modals.VMRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVMRequest", ctx, operation, status, metadata)
	ret0, _ := ret[0].(*modals.VMRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVMRequest indicates an expected call of CreateVMRequest.
func (mr *MockVMServiceMockRecorder) CreateVMRequest(ctx, operation, status, metadata interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVMRequest", reflect.TypeOf((*MockVMService)(nil).CreateVMRequest), ctx, operation, status, metadata)
}

// GetAllVMRequestsWithInstances mocks base method.
func (m *MockVMService) GetAllVMRequestsWithInstances(ctx context.Context) ([]*modals.VMRequest, []*modals.VMDeployInstance, int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVMRequestsWithInstances", ctx)
	ret0, _ := ret[0].([]*modals.VMRequest)
	ret1, _ := ret[1].([]*modals.VMDeployInstance)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAllVMRequestsWithInstances indicates an expected call of GetAllVMRequestsWithInstances.
func (mr *MockVMServiceMockRecorder) GetAllVMRequestsWithInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVMRequestsWithInstances", reflect.TypeOf((*MockVMService)(nil).GetAllVMRequestsWithInstances), ctx)
}

// GetVMDeployInstances mocks base method.
func (m *MockVMService) GetVMDeployInstances(ctx context.Context, requestID string) ([]*modals.VMDeployInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMDeployInstances", ctx, requestID)
	ret0, _ := ret[0].([]*modals.VMDeployInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMDeployInstances indicates an expected call of GetVMDeployInstances.
func (mr *MockVMServiceMockRecorder) GetVMDeployInstances(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMDeployInstances", reflect.TypeOf((*MockVMService)(nil).GetVMDeployInstances), ctx, requestID)
}

// GetVMRequest mocks base method.
func (m *MockVMService) GetVMRequest(ctx context.Context, requestID string) (*modals.VMRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMRequest", ctx, requestID)
	ret0, _ := ret[0].(*modals.VMRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMRequest indicates an expected call of GetVMRequest.
func (mr *MockVMServiceMockRecorder) GetVMRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMRequest", reflect.TypeOf((*MockVMService)(nil).GetVMRequest), ctx, requestID)
}
