// Code generated by MockGen. DO NOT EDIT.
// Source: vm_repository.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"
	modals "vm/internal/modals"

	gomock "github.com/golang/mock/gomock"
)

// MockVMRepository is a mock of VMRepository interface.
type MockVMRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVMRepositoryMockRecorder
}

// MockVMRepositoryMockRecorder is the mock recorder for MockVMRepository.
type MockVMRepositoryMockRecorder struct {
	mock *MockVMRepository
}

// NewMockVMRepository creates a new mock instance.
func NewMockVMRepository(ctrl *gomock.Controller) *MockVMRepository {
	mock := &MockVMRepository{ctrl: ctrl}
	mock.recorder = &MockVMRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMRepository) EXPECT() *MockVMRepositoryMockRecorder {
	return m.recorder
}

// CreateVMDeployInstances mocks base method.
func (m *MockVMRepository) CreateVMDeployInstances(ctx context.Context, instances []modals.VMDeployInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVMDeployInstances", ctx, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVMDeployInstances indicates an expected call of CreateVMDeployInstances.
func (mr *MockVMRepositoryMockRecorder) CreateVMDeployInstances(ctx, instances interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVMDeployInstances", reflect.TypeOf((*MockVMRepository)(nil).CreateVMDeployInstances), ctx, instances)
}

// CreateVMRequest mocks base method.
func (m *MockVMRepository) CreateVMRequest(ctx context.Context, req *modals.VMRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVMRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVMRequest indicates an expected call of CreateVMRequest.
func (mr *MockVMRepositoryMockRecorder) CreateVMRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVMRequest", reflect.TypeOf((*MockVMRepository)(nil).CreateVMRequest), ctx, req)
}

// GetAllVMRequestsWithInstances mocks base method.
func (m *MockVMRepository) GetAllVMRequestsWithInstances(ctx context.Context) ([]*modals.VMRequest, []*modals.VMDeployInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVMRequestsWithInstances", ctx)
	ret0, _ := ret[0].([]*modals.VMRequest)
	ret1, _ := ret[1].([]*modals.VMDeployInstance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllVMRequestsWithInstances indicates an expected call of GetAllVMRequestsWithInstances.
func (mr *MockVMRepositoryMockRecorder) GetAllVMRequestsWithInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVMRequestsWithInstances", reflect.TypeOf((*MockVMRepository)(nil).GetAllVMRequestsWithInstances), ctx)
}

// GetVMDeployInstances mocks base method.
func (m *MockVMRepository) GetVMDeployInstances(ctx context.Context, requestID string) ([]*modals.VMDeployInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMDeployInstances", ctx, requestID)
	ret0, _ := ret[0].([]*modals.VMDeployInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMDeployInstances indicates an expected call of GetVMDeployInstances.
func (mr *MockVMRepositoryMockRecorder) GetVMDeployInstances(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMDeployInstances", reflect.TypeOf((*MockVMRepository)(nil).GetVMDeployInstances), ctx, requestID)
}

// GetVMRequest mocks base method.
func (m *MockVMRepository) GetVMRequest(ctx context.Context, requestID string) (*modals.VMRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMRequest", ctx, requestID)
	ret0, _ := ret[0].(*modals.VMRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMRequest indicates an expected call of GetVMRequest.
func (mr *MockVMRepositoryMockRecorder) GetVMRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMRequest", reflect.TypeOf((*MockVMRepository)(nil).GetVMRequest), ctx, requestID)
}
