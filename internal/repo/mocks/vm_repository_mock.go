package mocks

import (
	"context"
	"vm/internal/modals"

	"github.com/stretchr/testify/mock"
)

// VMRepository is an autogenerated mock type for the VMRepository type
type VMRepository struct {
	mock.Mock
}

// CreateVMRequest provides a mock function with given fields: ctx, req
func (_m *VMRepository) CreateVMRequest(ctx context.Context, req *modals.VMRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *modals.VMRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVMRequest provides a mock function with given fields: ctx, requestID
func (_m *VMRepository) GetVMRequest(ctx context.Context, requestID string) (*modals.VMRequest, error) {
	ret := _m.Called(ctx, requestID)

	var r0 *modals.VMRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) *modals.VMRequest); ok {
		r0 = rf(ctx, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*modals.VMRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVMDeployInstances provides a mock function with given fields: ctx, requestID
func (_m *VMRepository) GetVMDeployInstances(ctx context.Context, requestID string) ([]*modals.VMDeployInstance, error) {
	ret := _m.Called(ctx, requestID)

	var r0 []*modals.VMDeployInstance
	if rf, ok := ret.Get(0).(func(context.Context, string) []*modals.VMDeployInstance); ok {
		r0 = rf(ctx, requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modals.VMDeployInstance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVMDeployInstances provides a mock function with given fields: ctx, requestID, baseVMName, count
func (_m *VMRepository) CreateVMDeployInstances(ctx context.Context, requestID string, baseVMName string, count int) error {
	ret := _m.Called(ctx, requestID, baseVMName, count)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, requestID, baseVMName, count)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVMRequestsWithInstances provides a mock function with given fields: ctx
func (_m *VMRepository) GetAllVMRequestsWithInstances(ctx context.Context) ([]*modals.VMRequest, []*modals.VMDeployInstance, error) {
	ret := _m.Called(ctx)

	var r0 []*modals.VMRequest
	if rf, ok := ret.Get(0).(func(context.Context) []*modals.VMRequest); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modals.VMRequest)
		}
	}

	var r1 []*modals.VMDeployInstance
	if rf, ok := ret.Get(1).(func(context.Context) []*modals.VMDeployInstance); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*modals.VMDeployInstance)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
