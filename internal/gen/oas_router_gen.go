// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/virtualization/v1beta1/virtual-machines"

			if l := len("/virtualization/v1beta1/virtual-machines"); len(elem) >= l && elem[0:l] == "/virtualization/v1beta1/virtual-machines" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "POST":
					s.handleHCIDeployVMRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "POST")
				}

				return
			}
			switch elem[0] {
			case '-': // Prefix: "-request/"

				if l := len("-request/"); len(elem) >= l && elem[0:l] == "-request/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "request-id"
				// Leaf parameter, slashes are prohibited
				idx := strings.IndexByte(elem, '/')
				if idx >= 0 {
					break
				}
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetVirtualMachineRequestRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case '/': // Prefix: "/"

				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "vm-id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch r.Method {
					case "DELETE":
						s.handleVMDeleteRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "power-o"

						if l := len("power-o"); len(elem) >= l && elem[0:l] == "power-o" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "ff"

							if l := len("ff"); len(elem) >= l && elem[0:l] == "ff" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleVMPowerOffRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'n': // Prefix: "n"

							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleVMPowerOnRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					case 'r': // Prefix: "re"

						if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "fresh"

							if l := len("fresh"); len(elem) >= l && elem[0:l] == "fresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleVMRefreshRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 's': // Prefix: "s"

							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "et"

								if l := len("et"); len(elem) >= l && elem[0:l] == "et" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleVMPowerResetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 't': // Prefix: "tart-guest-os"

								if l := len("tart-guest-os"); len(elem) >= l && elem[0:l] == "tart-guest-os" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleVMRestartGuestOSRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							}

						}

					case 's': // Prefix: "shutdown-guest-os"

						if l := len("shutdown-guest-os"); len(elem) >= l && elem[0:l] == "shutdown-guest-os" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleVMShutdownGuestOSRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					case 'u': // Prefix: "update-hardware"

						if l := len("update-hardware"); len(elem) >= l && elem[0:l] == "update-hardware" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleEditVMRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/virtualization/v1beta1/virtual-machines"

			if l := len("/virtualization/v1beta1/virtual-machines"); len(elem) >= l && elem[0:l] == "/virtualization/v1beta1/virtual-machines" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "POST":
					r.name = HCIDeployVMOperation
					r.summary = "Deploy virtual machine"
					r.operationID = "HCIDeployVM"
					r.pathPattern = "/virtualization/v1beta1/virtual-machines"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case '-': // Prefix: "-request/"

				if l := len("-request/"); len(elem) >= l && elem[0:l] == "-request/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "request-id"
				// Leaf parameter, slashes are prohibited
				idx := strings.IndexByte(elem, '/')
				if idx >= 0 {
					break
				}
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetVirtualMachineRequestOperation
						r.summary = "Get a virtual machine identified by {vm-id}"
						r.operationID = "GetVirtualMachineRequest"
						r.pathPattern = "/virtualization/v1beta1/virtual-machines-request/{request-id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

			case '/': // Prefix: "/"

				if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "vm-id"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					switch method {
					case "DELETE":
						r.name = VMDeleteOperation
						r.summary = "Delete a virtual machine"
						r.operationID = "VMDelete"
						r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "power-o"

						if l := len("power-o"); len(elem) >= l && elem[0:l] == "power-o" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "ff"

							if l := len("ff"); len(elem) >= l && elem[0:l] == "ff" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = VMPowerOffOperation
									r.summary = "Power off a virtual machine"
									r.operationID = "VMPowerOff"
									r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/power-off"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 'n': // Prefix: "n"

							if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = VMPowerOnOperation
									r.summary = "Power on a virtual machine"
									r.operationID = "VMPowerOn"
									r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/power-on"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'r': // Prefix: "re"

						if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "fresh"

							if l := len("fresh"); len(elem) >= l && elem[0:l] == "fresh" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = VMRefreshOperation
									r.summary = "Refresh the specified virtual machine instance"
									r.operationID = "VMRefresh"
									r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/refresh"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						case 's': // Prefix: "s"

							if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'e': // Prefix: "et"

								if l := len("et"); len(elem) >= l && elem[0:l] == "et" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = VMPowerResetOperation
										r.summary = "Reset a virtual machine"
										r.operationID = "VMPowerReset"
										r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/reset"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 't': // Prefix: "tart-guest-os"

								if l := len("tart-guest-os"); len(elem) >= l && elem[0:l] == "tart-guest-os" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = VMRestartGuestOSOperation
										r.summary = "Restart guest OS of a virtual machine"
										r.operationID = "VMRestartGuestOS"
										r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/restart-guest-os"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					case 's': // Prefix: "shutdown-guest-os"

						if l := len("shutdown-guest-os"); len(elem) >= l && elem[0:l] == "shutdown-guest-os" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = VMShutdownGuestOSOperation
								r.summary = "Shutdown guest OS of a virtual machine"
								r.operationID = "VMShutdownGuestOS"
								r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/shutdown-guest-os"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 'u': // Prefix: "update-hardware"

						if l := len("update-hardware"); len(elem) >= l && elem[0:l] == "update-hardware" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = EditVMOperation
								r.summary = "Reconfigure virtual machine hardware configurations"
								r.operationID = "EditVM"
								r.pathPattern = "/virtualization/v1beta1/virtual-machines/{vm-id}/update-hardware"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			}

		}
	}
	return r, false
}
