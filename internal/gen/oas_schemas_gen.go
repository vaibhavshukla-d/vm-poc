// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type Bearer struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *Bearer) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *Bearer) SetRoles(val []string) {
	s.Roles = val
}

// Reconfigure virtual machine hardware settings - CPU, memory, network adapters, and disks.
// Ref: #/components/schemas/EditVM
type EditVM struct {
	// Reconfigure CPU and memory values for a virtual machine.
	CpuMemConfig jx.Raw `json:"cpuMemConfig"`
	// Reconfigure network adapter(s) for a virtual machine. ADD/EDIT/DELETE list of network adapters.
	NetworkAdapters []EditVMNetworkAdaptersItem `json:"networkAdapters"`
	// Reconfigure disk(s) for a virtual machine. ADD/EDIT/DELETE list of disks.
	VirtualDisks []EditVMVirtualDisksItem `json:"virtualDisks"`
}

// GetCpuMemConfig returns the value of CpuMemConfig.
func (s *EditVM) GetCpuMemConfig() jx.Raw {
	return s.CpuMemConfig
}

// GetNetworkAdapters returns the value of NetworkAdapters.
func (s *EditVM) GetNetworkAdapters() []EditVMNetworkAdaptersItem {
	return s.NetworkAdapters
}

// GetVirtualDisks returns the value of VirtualDisks.
func (s *EditVM) GetVirtualDisks() []EditVMVirtualDisksItem {
	return s.VirtualDisks
}

// SetCpuMemConfig sets the value of CpuMemConfig.
func (s *EditVM) SetCpuMemConfig(val jx.Raw) {
	s.CpuMemConfig = val
}

// SetNetworkAdapters sets the value of NetworkAdapters.
func (s *EditVM) SetNetworkAdapters(val []EditVMNetworkAdaptersItem) {
	s.NetworkAdapters = val
}

// SetVirtualDisks sets the value of VirtualDisks.
func (s *EditVM) SetVirtualDisks(val []EditVMVirtualDisksItem) {
	s.VirtualDisks = val
}

type EditVMBadRequest ErrorResponse

func (*EditVMBadRequest) editVMRes() {}

type EditVMConflict ErrorResponse

func (*EditVMConflict) editVMRes() {}

type EditVMForbidden ErrorResponse

func (*EditVMForbidden) editVMRes() {}

type EditVMInternalServerError ErrorResponse

func (*EditVMInternalServerError) editVMRes() {}

type EditVMNetworkAdaptersItem struct {
	// Specifies if the network adapter has to be connected to virtual machine on power on.
	ConnectAtPowerOn OptBool `json:"connectAtPowerOn"`
	// Name of the network adapter. Mandatory parameter for EDIT and DELETE operation. Name for the
	// network adapter will be auto-generated by hypervisor-manager during ADD operation.
	Name OptString `json:"name"`
	// Backing network information. Mandatory parameter for ADD and EDIT operation.
	NetworkDetails OptEditVMNetworkAdaptersItemNetworkDetails `json:"networkDetails"`
	// Operation to be performed on a network adapter.
	Operation OptEditVMNetworkAdaptersItemOperation `json:"operation"`
	// Type of the network adapter. Mandatory parameter for ADD operation.
	Type OptEditVMNetworkAdaptersItemType `json:"type"`
}

// GetConnectAtPowerOn returns the value of ConnectAtPowerOn.
func (s *EditVMNetworkAdaptersItem) GetConnectAtPowerOn() OptBool {
	return s.ConnectAtPowerOn
}

// GetName returns the value of Name.
func (s *EditVMNetworkAdaptersItem) GetName() OptString {
	return s.Name
}

// GetNetworkDetails returns the value of NetworkDetails.
func (s *EditVMNetworkAdaptersItem) GetNetworkDetails() OptEditVMNetworkAdaptersItemNetworkDetails {
	return s.NetworkDetails
}

// GetOperation returns the value of Operation.
func (s *EditVMNetworkAdaptersItem) GetOperation() OptEditVMNetworkAdaptersItemOperation {
	return s.Operation
}

// GetType returns the value of Type.
func (s *EditVMNetworkAdaptersItem) GetType() OptEditVMNetworkAdaptersItemType {
	return s.Type
}

// SetConnectAtPowerOn sets the value of ConnectAtPowerOn.
func (s *EditVMNetworkAdaptersItem) SetConnectAtPowerOn(val OptBool) {
	s.ConnectAtPowerOn = val
}

// SetName sets the value of Name.
func (s *EditVMNetworkAdaptersItem) SetName(val OptString) {
	s.Name = val
}

// SetNetworkDetails sets the value of NetworkDetails.
func (s *EditVMNetworkAdaptersItem) SetNetworkDetails(val OptEditVMNetworkAdaptersItemNetworkDetails) {
	s.NetworkDetails = val
}

// SetOperation sets the value of Operation.
func (s *EditVMNetworkAdaptersItem) SetOperation(val OptEditVMNetworkAdaptersItemOperation) {
	s.Operation = val
}

// SetType sets the value of Type.
func (s *EditVMNetworkAdaptersItem) SetType(val OptEditVMNetworkAdaptersItemType) {
	s.Type = val
}

// Backing network information. Mandatory parameter for ADD and EDIT operation.
type EditVMNetworkAdaptersItemNetworkDetails struct {
	// Name of the backing network. Mandatory parameter for ADD and EDIT operation.
	Name OptString `json:"name"`
	// Type of the backing network.
	Type OptEditVMNetworkAdaptersItemNetworkDetailsType `json:"type"`
}

// GetName returns the value of Name.
func (s *EditVMNetworkAdaptersItemNetworkDetails) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *EditVMNetworkAdaptersItemNetworkDetails) GetType() OptEditVMNetworkAdaptersItemNetworkDetailsType {
	return s.Type
}

// SetName sets the value of Name.
func (s *EditVMNetworkAdaptersItemNetworkDetails) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *EditVMNetworkAdaptersItemNetworkDetails) SetType(val OptEditVMNetworkAdaptersItemNetworkDetailsType) {
	s.Type = val
}

// Type of the backing network.
type EditVMNetworkAdaptersItemNetworkDetailsType string

const (
	EditVMNetworkAdaptersItemNetworkDetailsTypeSTANDARDPORTGROUP EditVMNetworkAdaptersItemNetworkDetailsType = "STANDARD_PORT_GROUP"
)

// AllValues returns all EditVMNetworkAdaptersItemNetworkDetailsType values.
func (EditVMNetworkAdaptersItemNetworkDetailsType) AllValues() []EditVMNetworkAdaptersItemNetworkDetailsType {
	return []EditVMNetworkAdaptersItemNetworkDetailsType{
		EditVMNetworkAdaptersItemNetworkDetailsTypeSTANDARDPORTGROUP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditVMNetworkAdaptersItemNetworkDetailsType) MarshalText() ([]byte, error) {
	switch s {
	case EditVMNetworkAdaptersItemNetworkDetailsTypeSTANDARDPORTGROUP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditVMNetworkAdaptersItemNetworkDetailsType) UnmarshalText(data []byte) error {
	switch EditVMNetworkAdaptersItemNetworkDetailsType(data) {
	case EditVMNetworkAdaptersItemNetworkDetailsTypeSTANDARDPORTGROUP:
		*s = EditVMNetworkAdaptersItemNetworkDetailsTypeSTANDARDPORTGROUP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Operation to be performed on a network adapter.
type EditVMNetworkAdaptersItemOperation string

const (
	EditVMNetworkAdaptersItemOperationADD    EditVMNetworkAdaptersItemOperation = "ADD"
	EditVMNetworkAdaptersItemOperationEDIT   EditVMNetworkAdaptersItemOperation = "EDIT"
	EditVMNetworkAdaptersItemOperationDELETE EditVMNetworkAdaptersItemOperation = "DELETE"
)

// AllValues returns all EditVMNetworkAdaptersItemOperation values.
func (EditVMNetworkAdaptersItemOperation) AllValues() []EditVMNetworkAdaptersItemOperation {
	return []EditVMNetworkAdaptersItemOperation{
		EditVMNetworkAdaptersItemOperationADD,
		EditVMNetworkAdaptersItemOperationEDIT,
		EditVMNetworkAdaptersItemOperationDELETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditVMNetworkAdaptersItemOperation) MarshalText() ([]byte, error) {
	switch s {
	case EditVMNetworkAdaptersItemOperationADD:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemOperationEDIT:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemOperationDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditVMNetworkAdaptersItemOperation) UnmarshalText(data []byte) error {
	switch EditVMNetworkAdaptersItemOperation(data) {
	case EditVMNetworkAdaptersItemOperationADD:
		*s = EditVMNetworkAdaptersItemOperationADD
		return nil
	case EditVMNetworkAdaptersItemOperationEDIT:
		*s = EditVMNetworkAdaptersItemOperationEDIT
		return nil
	case EditVMNetworkAdaptersItemOperationDELETE:
		*s = EditVMNetworkAdaptersItemOperationDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the network adapter. Mandatory parameter for ADD operation.
type EditVMNetworkAdaptersItemType string

const (
	EditVMNetworkAdaptersItemTypeE1000   EditVMNetworkAdaptersItemType = "E1000"
	EditVMNetworkAdaptersItemTypeE1000E  EditVMNetworkAdaptersItemType = "E1000E"
	EditVMNetworkAdaptersItemTypePCNET32 EditVMNetworkAdaptersItemType = "PCNET32"
	EditVMNetworkAdaptersItemTypeVMXNET  EditVMNetworkAdaptersItemType = "VMXNET"
	EditVMNetworkAdaptersItemTypeVMXNET2 EditVMNetworkAdaptersItemType = "VMXNET2"
	EditVMNetworkAdaptersItemTypeVMXNET3 EditVMNetworkAdaptersItemType = "VMXNET3"
)

// AllValues returns all EditVMNetworkAdaptersItemType values.
func (EditVMNetworkAdaptersItemType) AllValues() []EditVMNetworkAdaptersItemType {
	return []EditVMNetworkAdaptersItemType{
		EditVMNetworkAdaptersItemTypeE1000,
		EditVMNetworkAdaptersItemTypeE1000E,
		EditVMNetworkAdaptersItemTypePCNET32,
		EditVMNetworkAdaptersItemTypeVMXNET,
		EditVMNetworkAdaptersItemTypeVMXNET2,
		EditVMNetworkAdaptersItemTypeVMXNET3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditVMNetworkAdaptersItemType) MarshalText() ([]byte, error) {
	switch s {
	case EditVMNetworkAdaptersItemTypeE1000:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemTypeE1000E:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemTypePCNET32:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemTypeVMXNET:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemTypeVMXNET2:
		return []byte(s), nil
	case EditVMNetworkAdaptersItemTypeVMXNET3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditVMNetworkAdaptersItemType) UnmarshalText(data []byte) error {
	switch EditVMNetworkAdaptersItemType(data) {
	case EditVMNetworkAdaptersItemTypeE1000:
		*s = EditVMNetworkAdaptersItemTypeE1000
		return nil
	case EditVMNetworkAdaptersItemTypeE1000E:
		*s = EditVMNetworkAdaptersItemTypeE1000E
		return nil
	case EditVMNetworkAdaptersItemTypePCNET32:
		*s = EditVMNetworkAdaptersItemTypePCNET32
		return nil
	case EditVMNetworkAdaptersItemTypeVMXNET:
		*s = EditVMNetworkAdaptersItemTypeVMXNET
		return nil
	case EditVMNetworkAdaptersItemTypeVMXNET2:
		*s = EditVMNetworkAdaptersItemTypeVMXNET2
		return nil
	case EditVMNetworkAdaptersItemTypeVMXNET3:
		*s = EditVMNetworkAdaptersItemTypeVMXNET3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type EditVMNotFound ErrorResponse

func (*EditVMNotFound) editVMRes() {}

type EditVMServiceUnavailable ErrorResponse

func (*EditVMServiceUnavailable) editVMRes() {}

type EditVMUnauthorized ErrorResponse

func (*EditVMUnauthorized) editVMRes() {}

type EditVMVirtualDisksItem struct {
	// Configurations for a disk.
	DiskConfig OptEditVMVirtualDisksItemDiskConfig `json:"diskConfig"`
	// Operation to be performed on a disk. Minimum size required to  add a disk is 1MB. Maximum capacity
	// for a disk depends on the backing storage.
	Operation OptEditVMVirtualDisksItemOperation `json:"operation"`
}

// GetDiskConfig returns the value of DiskConfig.
func (s *EditVMVirtualDisksItem) GetDiskConfig() OptEditVMVirtualDisksItemDiskConfig {
	return s.DiskConfig
}

// GetOperation returns the value of Operation.
func (s *EditVMVirtualDisksItem) GetOperation() OptEditVMVirtualDisksItemOperation {
	return s.Operation
}

// SetDiskConfig sets the value of DiskConfig.
func (s *EditVMVirtualDisksItem) SetDiskConfig(val OptEditVMVirtualDisksItemDiskConfig) {
	s.DiskConfig = val
}

// SetOperation sets the value of Operation.
func (s *EditVMVirtualDisksItem) SetOperation(val OptEditVMVirtualDisksItemOperation) {
	s.Operation = val
}

// Configurations for a disk.
type EditVMVirtualDisksItemDiskConfig struct {
	// Size of the disk in mebibytes. Mandatory parameter for ADD and EDIT operation.
	CapacityInMb OptInt `json:"capacityInMb"`
	// The UUID of the disk. Mandatory parameter for EDIT and DELETE operation.
	ID OptString `json:"id"`
	// Specifies if the backing files of the disk need to be retained after disk deletion. Mandatory
	// parameter for DELETE operation.
	RetainFiles OptBool `json:"retainFiles"`
	// The type of the disk.
	Type OptEditVMVirtualDisksItemDiskConfigType `json:"type"`
}

// GetCapacityInMb returns the value of CapacityInMb.
func (s *EditVMVirtualDisksItemDiskConfig) GetCapacityInMb() OptInt {
	return s.CapacityInMb
}

// GetID returns the value of ID.
func (s *EditVMVirtualDisksItemDiskConfig) GetID() OptString {
	return s.ID
}

// GetRetainFiles returns the value of RetainFiles.
func (s *EditVMVirtualDisksItemDiskConfig) GetRetainFiles() OptBool {
	return s.RetainFiles
}

// GetType returns the value of Type.
func (s *EditVMVirtualDisksItemDiskConfig) GetType() OptEditVMVirtualDisksItemDiskConfigType {
	return s.Type
}

// SetCapacityInMb sets the value of CapacityInMb.
func (s *EditVMVirtualDisksItemDiskConfig) SetCapacityInMb(val OptInt) {
	s.CapacityInMb = val
}

// SetID sets the value of ID.
func (s *EditVMVirtualDisksItemDiskConfig) SetID(val OptString) {
	s.ID = val
}

// SetRetainFiles sets the value of RetainFiles.
func (s *EditVMVirtualDisksItemDiskConfig) SetRetainFiles(val OptBool) {
	s.RetainFiles = val
}

// SetType sets the value of Type.
func (s *EditVMVirtualDisksItemDiskConfig) SetType(val OptEditVMVirtualDisksItemDiskConfigType) {
	s.Type = val
}

// The type of the disk.
type EditVMVirtualDisksItemDiskConfigType string

const (
	EditVMVirtualDisksItemDiskConfigTypeIDE  EditVMVirtualDisksItemDiskConfigType = "IDE"
	EditVMVirtualDisksItemDiskConfigTypeSCSI EditVMVirtualDisksItemDiskConfigType = "SCSI"
	EditVMVirtualDisksItemDiskConfigTypeSATA EditVMVirtualDisksItemDiskConfigType = "SATA"
	EditVMVirtualDisksItemDiskConfigTypeNVME EditVMVirtualDisksItemDiskConfigType = "NVME"
)

// AllValues returns all EditVMVirtualDisksItemDiskConfigType values.
func (EditVMVirtualDisksItemDiskConfigType) AllValues() []EditVMVirtualDisksItemDiskConfigType {
	return []EditVMVirtualDisksItemDiskConfigType{
		EditVMVirtualDisksItemDiskConfigTypeIDE,
		EditVMVirtualDisksItemDiskConfigTypeSCSI,
		EditVMVirtualDisksItemDiskConfigTypeSATA,
		EditVMVirtualDisksItemDiskConfigTypeNVME,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditVMVirtualDisksItemDiskConfigType) MarshalText() ([]byte, error) {
	switch s {
	case EditVMVirtualDisksItemDiskConfigTypeIDE:
		return []byte(s), nil
	case EditVMVirtualDisksItemDiskConfigTypeSCSI:
		return []byte(s), nil
	case EditVMVirtualDisksItemDiskConfigTypeSATA:
		return []byte(s), nil
	case EditVMVirtualDisksItemDiskConfigTypeNVME:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditVMVirtualDisksItemDiskConfigType) UnmarshalText(data []byte) error {
	switch EditVMVirtualDisksItemDiskConfigType(data) {
	case EditVMVirtualDisksItemDiskConfigTypeIDE:
		*s = EditVMVirtualDisksItemDiskConfigTypeIDE
		return nil
	case EditVMVirtualDisksItemDiskConfigTypeSCSI:
		*s = EditVMVirtualDisksItemDiskConfigTypeSCSI
		return nil
	case EditVMVirtualDisksItemDiskConfigTypeSATA:
		*s = EditVMVirtualDisksItemDiskConfigTypeSATA
		return nil
	case EditVMVirtualDisksItemDiskConfigTypeNVME:
		*s = EditVMVirtualDisksItemDiskConfigTypeNVME
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Operation to be performed on a disk. Minimum size required to  add a disk is 1MB. Maximum capacity
// for a disk depends on the backing storage.
type EditVMVirtualDisksItemOperation string

const (
	EditVMVirtualDisksItemOperationADD    EditVMVirtualDisksItemOperation = "ADD"
	EditVMVirtualDisksItemOperationEDIT   EditVMVirtualDisksItemOperation = "EDIT"
	EditVMVirtualDisksItemOperationDELETE EditVMVirtualDisksItemOperation = "DELETE"
)

// AllValues returns all EditVMVirtualDisksItemOperation values.
func (EditVMVirtualDisksItemOperation) AllValues() []EditVMVirtualDisksItemOperation {
	return []EditVMVirtualDisksItemOperation{
		EditVMVirtualDisksItemOperationADD,
		EditVMVirtualDisksItemOperationEDIT,
		EditVMVirtualDisksItemOperationDELETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EditVMVirtualDisksItemOperation) MarshalText() ([]byte, error) {
	switch s {
	case EditVMVirtualDisksItemOperationADD:
		return []byte(s), nil
	case EditVMVirtualDisksItemOperationEDIT:
		return []byte(s), nil
	case EditVMVirtualDisksItemOperationDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EditVMVirtualDisksItemOperation) UnmarshalText(data []byte) error {
	switch EditVMVirtualDisksItemOperation(data) {
	case EditVMVirtualDisksItemOperationADD:
		*s = EditVMVirtualDisksItemOperationADD
		return nil
	case EditVMVirtualDisksItemOperationEDIT:
		*s = EditVMVirtualDisksItemOperationEDIT
		return nil
	case EditVMVirtualDisksItemOperationDELETE:
		*s = EditVMVirtualDisksItemOperationDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/EmptyResponse
type EmptyResponse struct{}

// EmptyResponseHeaders wraps EmptyResponse with response headers.
type EmptyResponseHeaders struct {
	Location OptString
	Response EmptyResponse
}

// GetLocation returns the value of Location.
func (s *EmptyResponseHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *EmptyResponseHeaders) GetResponse() EmptyResponse {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *EmptyResponseHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *EmptyResponseHeaders) SetResponse(val EmptyResponse) {
	s.Response = val
}

func (*EmptyResponseHeaders) editVMRes()            {}
func (*EmptyResponseHeaders) hCIDeployVMRes()       {}
func (*EmptyResponseHeaders) vMDeleteRes()          {}
func (*EmptyResponseHeaders) vMPowerOffRes()        {}
func (*EmptyResponseHeaders) vMPowerOnRes()         {}
func (*EmptyResponseHeaders) vMPowerResetRes()      {}
func (*EmptyResponseHeaders) vMRefreshRes()         {}
func (*EmptyResponseHeaders) vMRestartGuestOSRes()  {}
func (*EmptyResponseHeaders) vMShutdownGuestOSRes() {}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// A unique identifier for the request.
	DebugId string `json:"debugId"`
	// A machine friendly identifier for the error response.
	ErrorCode string `json:"errorCode"`
	// The HTTP status code of the response.
	HttpStatusCode int `json:"httpStatusCode"`
	// A user-friendly error message.
	Message string `json:"message"`
}

// GetDebugId returns the value of DebugId.
func (s *ErrorResponse) GetDebugId() string {
	return s.DebugId
}

// GetErrorCode returns the value of ErrorCode.
func (s *ErrorResponse) GetErrorCode() string {
	return s.ErrorCode
}

// GetHttpStatusCode returns the value of HttpStatusCode.
func (s *ErrorResponse) GetHttpStatusCode() int {
	return s.HttpStatusCode
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// SetDebugId sets the value of DebugId.
func (s *ErrorResponse) SetDebugId(val string) {
	s.DebugId = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ErrorResponse) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetHttpStatusCode sets the value of HttpStatusCode.
func (s *ErrorResponse) SetHttpStatusCode(val int) {
	s.HttpStatusCode = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

type GetVirtualMachineRequestForbidden ErrorResponse

func (*GetVirtualMachineRequestForbidden) getVirtualMachineRequestRes() {}

type GetVirtualMachineRequestInternalServerError ErrorResponse

func (*GetVirtualMachineRequestInternalServerError) getVirtualMachineRequestRes() {}

type GetVirtualMachineRequestListForbidden ErrorResponse

func (*GetVirtualMachineRequestListForbidden) getVirtualMachineRequestListRes() {}

type GetVirtualMachineRequestListInternalServerError ErrorResponse

func (*GetVirtualMachineRequestListInternalServerError) getVirtualMachineRequestListRes() {}

type GetVirtualMachineRequestListNotFound ErrorResponse

func (*GetVirtualMachineRequestListNotFound) getVirtualMachineRequestListRes() {}

type GetVirtualMachineRequestListUnauthorized ErrorResponse

func (*GetVirtualMachineRequestListUnauthorized) getVirtualMachineRequestListRes() {}

type GetVirtualMachineRequestNotFound ErrorResponse

func (*GetVirtualMachineRequestNotFound) getVirtualMachineRequestRes() {}

type GetVirtualMachineRequestUnauthorized ErrorResponse

func (*GetVirtualMachineRequestUnauthorized) getVirtualMachineRequestRes() {}

// Deploys one or more virtual machines using specified template and storage provisioning policy.
// Ref: #/components/schemas/HCIDeployVM
type HCIDeployVM struct {
	// Specifies where to deploy the virtual machine.
	Destination OptHCIDeployVMDestination `json:"destination"`
	// Specifies the hypervisor image information using which the virtual machine is deployed.
	ImageSource OptHCIDeployVMImageSource `json:"imageSource"`
	// Specifies name and the target network to use for deployment.
	NetworkConfig OptHCIDeployVMNetworkConfig `json:"networkConfig"`
	// Specifies the storage configurations for a virtual machine.
	StorageConfig HCIDeployVMStorageConfig `json:"storageConfig"`
	// Defines the virtual machine configurations.
	VmConfig HCIDeployVMVmConfig `json:"vmConfig"`
	// Specifies the policies which can be attached to the virtual machine.
	VmPolicy []HCIDeployVMVmPolicyItem `json:"vmPolicy"`
}

// GetDestination returns the value of Destination.
func (s *HCIDeployVM) GetDestination() OptHCIDeployVMDestination {
	return s.Destination
}

// GetImageSource returns the value of ImageSource.
func (s *HCIDeployVM) GetImageSource() OptHCIDeployVMImageSource {
	return s.ImageSource
}

// GetNetworkConfig returns the value of NetworkConfig.
func (s *HCIDeployVM) GetNetworkConfig() OptHCIDeployVMNetworkConfig {
	return s.NetworkConfig
}

// GetStorageConfig returns the value of StorageConfig.
func (s *HCIDeployVM) GetStorageConfig() HCIDeployVMStorageConfig {
	return s.StorageConfig
}

// GetVmConfig returns the value of VmConfig.
func (s *HCIDeployVM) GetVmConfig() HCIDeployVMVmConfig {
	return s.VmConfig
}

// GetVmPolicy returns the value of VmPolicy.
func (s *HCIDeployVM) GetVmPolicy() []HCIDeployVMVmPolicyItem {
	return s.VmPolicy
}

// SetDestination sets the value of Destination.
func (s *HCIDeployVM) SetDestination(val OptHCIDeployVMDestination) {
	s.Destination = val
}

// SetImageSource sets the value of ImageSource.
func (s *HCIDeployVM) SetImageSource(val OptHCIDeployVMImageSource) {
	s.ImageSource = val
}

// SetNetworkConfig sets the value of NetworkConfig.
func (s *HCIDeployVM) SetNetworkConfig(val OptHCIDeployVMNetworkConfig) {
	s.NetworkConfig = val
}

// SetStorageConfig sets the value of StorageConfig.
func (s *HCIDeployVM) SetStorageConfig(val HCIDeployVMStorageConfig) {
	s.StorageConfig = val
}

// SetVmConfig sets the value of VmConfig.
func (s *HCIDeployVM) SetVmConfig(val HCIDeployVMVmConfig) {
	s.VmConfig = val
}

// SetVmPolicy sets the value of VmPolicy.
func (s *HCIDeployVM) SetVmPolicy(val []HCIDeployVMVmPolicyItem) {
	s.VmPolicy = val
}

type HCIDeployVMBadRequest ErrorResponse

func (*HCIDeployVMBadRequest) hCIDeployVMRes() {}

// Specifies where to deploy the virtual machine.
type HCIDeployVMDestination struct {
	// The UUID of the hypervisor cluster where the virtual machine can be deployed.
	ClusterId OptString `json:"clusterId"`
	// The UUID of the hypervisor folder where the virtual machine can be deployed.
	FolderId OptString `json:"folderId"`
	// The UUID of the hypervisor host where the virtual machine can be deployed.
	HostId OptString `json:"hostId"`
	// The UUID of the hypervisor resource pool where the virtual machine can be deployed.
	ResourcePoolId OptString `json:"resourcePoolId"`
}

// GetClusterId returns the value of ClusterId.
func (s *HCIDeployVMDestination) GetClusterId() OptString {
	return s.ClusterId
}

// GetFolderId returns the value of FolderId.
func (s *HCIDeployVMDestination) GetFolderId() OptString {
	return s.FolderId
}

// GetHostId returns the value of HostId.
func (s *HCIDeployVMDestination) GetHostId() OptString {
	return s.HostId
}

// GetResourcePoolId returns the value of ResourcePoolId.
func (s *HCIDeployVMDestination) GetResourcePoolId() OptString {
	return s.ResourcePoolId
}

// SetClusterId sets the value of ClusterId.
func (s *HCIDeployVMDestination) SetClusterId(val OptString) {
	s.ClusterId = val
}

// SetFolderId sets the value of FolderId.
func (s *HCIDeployVMDestination) SetFolderId(val OptString) {
	s.FolderId = val
}

// SetHostId sets the value of HostId.
func (s *HCIDeployVMDestination) SetHostId(val OptString) {
	s.HostId = val
}

// SetResourcePoolId sets the value of ResourcePoolId.
func (s *HCIDeployVMDestination) SetResourcePoolId(val OptString) {
	s.ResourcePoolId = val
}

type HCIDeployVMForbidden ErrorResponse

func (*HCIDeployVMForbidden) hCIDeployVMRes() {}

// Specifies the hypervisor image information using which the virtual machine is deployed.
type HCIDeployVMImageSource struct {
	// The UUID of the hypervisor image using which a virtual machine is deployed.
	ImageId OptString `json:"imageId"`
	// The name of the hypervisor image using which a virtual machine is deployed.
	ImageName OptString `json:"imageName"`
	// The source of the image where it was hosted.
	ImageSourceType OptHCIDeployVMImageSourceImageSourceType `json:"imageSourceType"`
}

// GetImageId returns the value of ImageId.
func (s *HCIDeployVMImageSource) GetImageId() OptString {
	return s.ImageId
}

// GetImageName returns the value of ImageName.
func (s *HCIDeployVMImageSource) GetImageName() OptString {
	return s.ImageName
}

// GetImageSourceType returns the value of ImageSourceType.
func (s *HCIDeployVMImageSource) GetImageSourceType() OptHCIDeployVMImageSourceImageSourceType {
	return s.ImageSourceType
}

// SetImageId sets the value of ImageId.
func (s *HCIDeployVMImageSource) SetImageId(val OptString) {
	s.ImageId = val
}

// SetImageName sets the value of ImageName.
func (s *HCIDeployVMImageSource) SetImageName(val OptString) {
	s.ImageName = val
}

// SetImageSourceType sets the value of ImageSourceType.
func (s *HCIDeployVMImageSource) SetImageSourceType(val OptHCIDeployVMImageSourceImageSourceType) {
	s.ImageSourceType = val
}

// The source of the image where it was hosted.
type HCIDeployVMImageSourceImageSourceType string

const (
	HCIDeployVMImageSourceImageSourceTypeHYPERVISORIMAGELIBRARY HCIDeployVMImageSourceImageSourceType = "HYPERVISOR_IMAGE_LIBRARY"
)

// AllValues returns all HCIDeployVMImageSourceImageSourceType values.
func (HCIDeployVMImageSourceImageSourceType) AllValues() []HCIDeployVMImageSourceImageSourceType {
	return []HCIDeployVMImageSourceImageSourceType{
		HCIDeployVMImageSourceImageSourceTypeHYPERVISORIMAGELIBRARY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HCIDeployVMImageSourceImageSourceType) MarshalText() ([]byte, error) {
	switch s {
	case HCIDeployVMImageSourceImageSourceTypeHYPERVISORIMAGELIBRARY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HCIDeployVMImageSourceImageSourceType) UnmarshalText(data []byte) error {
	switch HCIDeployVMImageSourceImageSourceType(data) {
	case HCIDeployVMImageSourceImageSourceTypeHYPERVISORIMAGELIBRARY:
		*s = HCIDeployVMImageSourceImageSourceTypeHYPERVISORIMAGELIBRARY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HCIDeployVMInternalServerError ErrorResponse

func (*HCIDeployVMInternalServerError) hCIDeployVMRes() {}

// Specifies name and the target network to use for deployment.
type HCIDeployVMNetworkConfig struct {
	// Specifies whether IP addresses are allocated by DHCP or static address.
	IpAllocationPolicy OptHCIDeployVMNetworkConfigIpAllocationPolicy `json:"ipAllocationPolicy"`
	// Specifies name and the target network to be used for deployment.
	NetworkMapping []HCIDeployVMNetworkConfigNetworkMappingItem `json:"networkMapping"`
}

// GetIpAllocationPolicy returns the value of IpAllocationPolicy.
func (s *HCIDeployVMNetworkConfig) GetIpAllocationPolicy() OptHCIDeployVMNetworkConfigIpAllocationPolicy {
	return s.IpAllocationPolicy
}

// GetNetworkMapping returns the value of NetworkMapping.
func (s *HCIDeployVMNetworkConfig) GetNetworkMapping() []HCIDeployVMNetworkConfigNetworkMappingItem {
	return s.NetworkMapping
}

// SetIpAllocationPolicy sets the value of IpAllocationPolicy.
func (s *HCIDeployVMNetworkConfig) SetIpAllocationPolicy(val OptHCIDeployVMNetworkConfigIpAllocationPolicy) {
	s.IpAllocationPolicy = val
}

// SetNetworkMapping sets the value of NetworkMapping.
func (s *HCIDeployVMNetworkConfig) SetNetworkMapping(val []HCIDeployVMNetworkConfigNetworkMappingItem) {
	s.NetworkMapping = val
}

// Specifies whether IP addresses are allocated by DHCP or static address.
type HCIDeployVMNetworkConfigIpAllocationPolicy string

const (
	HCIDeployVMNetworkConfigIpAllocationPolicyDHCPPOLICY  HCIDeployVMNetworkConfigIpAllocationPolicy = "DHCP_POLICY"
	HCIDeployVMNetworkConfigIpAllocationPolicyFIXEDPOLICY HCIDeployVMNetworkConfigIpAllocationPolicy = "FIXED_POLICY"
)

// AllValues returns all HCIDeployVMNetworkConfigIpAllocationPolicy values.
func (HCIDeployVMNetworkConfigIpAllocationPolicy) AllValues() []HCIDeployVMNetworkConfigIpAllocationPolicy {
	return []HCIDeployVMNetworkConfigIpAllocationPolicy{
		HCIDeployVMNetworkConfigIpAllocationPolicyDHCPPOLICY,
		HCIDeployVMNetworkConfigIpAllocationPolicyFIXEDPOLICY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HCIDeployVMNetworkConfigIpAllocationPolicy) MarshalText() ([]byte, error) {
	switch s {
	case HCIDeployVMNetworkConfigIpAllocationPolicyDHCPPOLICY:
		return []byte(s), nil
	case HCIDeployVMNetworkConfigIpAllocationPolicyFIXEDPOLICY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HCIDeployVMNetworkConfigIpAllocationPolicy) UnmarshalText(data []byte) error {
	switch HCIDeployVMNetworkConfigIpAllocationPolicy(data) {
	case HCIDeployVMNetworkConfigIpAllocationPolicyDHCPPOLICY:
		*s = HCIDeployVMNetworkConfigIpAllocationPolicyDHCPPOLICY
		return nil
	case HCIDeployVMNetworkConfigIpAllocationPolicyFIXEDPOLICY:
		*s = HCIDeployVMNetworkConfigIpAllocationPolicyFIXEDPOLICY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HCIDeployVMNetworkConfigNetworkMappingItem struct {
	// Identifier for the network mapping.
	Name OptString `json:"name"`
	// Target network to be used for deployment.
	Network OptString `json:"network"`
}

// GetName returns the value of Name.
func (s *HCIDeployVMNetworkConfigNetworkMappingItem) GetName() OptString {
	return s.Name
}

// GetNetwork returns the value of Network.
func (s *HCIDeployVMNetworkConfigNetworkMappingItem) GetNetwork() OptString {
	return s.Network
}

// SetName sets the value of Name.
func (s *HCIDeployVMNetworkConfigNetworkMappingItem) SetName(val OptString) {
	s.Name = val
}

// SetNetwork sets the value of Network.
func (s *HCIDeployVMNetworkConfigNetworkMappingItem) SetNetwork(val OptString) {
	s.Network = val
}

// Specifies the storage configurations for a virtual machine.
type HCIDeployVMStorageConfig struct {
	// The UUID of the hypervisor datastore where the virtual machine is to be deployed.
	DefaultDatastoreId string `json:"defaultDatastoreId"`
	// Specifies whether datastore is THIN or THICK to provision the virtual machine.
	ProvisioningType OptHCIDeployVMStorageConfigProvisioningType `json:"provisioningType"`
}

// GetDefaultDatastoreId returns the value of DefaultDatastoreId.
func (s *HCIDeployVMStorageConfig) GetDefaultDatastoreId() string {
	return s.DefaultDatastoreId
}

// GetProvisioningType returns the value of ProvisioningType.
func (s *HCIDeployVMStorageConfig) GetProvisioningType() OptHCIDeployVMStorageConfigProvisioningType {
	return s.ProvisioningType
}

// SetDefaultDatastoreId sets the value of DefaultDatastoreId.
func (s *HCIDeployVMStorageConfig) SetDefaultDatastoreId(val string) {
	s.DefaultDatastoreId = val
}

// SetProvisioningType sets the value of ProvisioningType.
func (s *HCIDeployVMStorageConfig) SetProvisioningType(val OptHCIDeployVMStorageConfigProvisioningType) {
	s.ProvisioningType = val
}

// Specifies whether datastore is THIN or THICK to provision the virtual machine.
type HCIDeployVMStorageConfigProvisioningType string

const (
	HCIDeployVMStorageConfigProvisioningTypeTHIN  HCIDeployVMStorageConfigProvisioningType = "THIN"
	HCIDeployVMStorageConfigProvisioningTypeTHICK HCIDeployVMStorageConfigProvisioningType = "THICK"
)

// AllValues returns all HCIDeployVMStorageConfigProvisioningType values.
func (HCIDeployVMStorageConfigProvisioningType) AllValues() []HCIDeployVMStorageConfigProvisioningType {
	return []HCIDeployVMStorageConfigProvisioningType{
		HCIDeployVMStorageConfigProvisioningTypeTHIN,
		HCIDeployVMStorageConfigProvisioningTypeTHICK,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HCIDeployVMStorageConfigProvisioningType) MarshalText() ([]byte, error) {
	switch s {
	case HCIDeployVMStorageConfigProvisioningTypeTHIN:
		return []byte(s), nil
	case HCIDeployVMStorageConfigProvisioningTypeTHICK:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HCIDeployVMStorageConfigProvisioningType) UnmarshalText(data []byte) error {
	switch HCIDeployVMStorageConfigProvisioningType(data) {
	case HCIDeployVMStorageConfigProvisioningTypeTHIN:
		*s = HCIDeployVMStorageConfigProvisioningTypeTHIN
		return nil
	case HCIDeployVMStorageConfigProvisioningTypeTHICK:
		*s = HCIDeployVMStorageConfigProvisioningTypeTHICK
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HCIDeployVMUnauthorized ErrorResponse

func (*HCIDeployVMUnauthorized) hCIDeployVMRes() {}

// Defines the virtual machine configurations.
type HCIDeployVMVmConfig struct {
	// Accept EULA by default or not.
	AcceptEula bool `json:"acceptEula"`
	// The description of the image.
	Annotation OptString `json:"annotation"`
	// Locale to use for parsing OVF descriptor.
	Locale OptString `json:"locale"`
	// Name of the virtual machine to be deployed.
	Name string `json:"name"`
	// Number of virtual machines to be created.
	NumberOfVms OptInt `json:"numberOfVms"`
	// Power on/off the virtual machine.
	PowerOn OptBool `json:"powerOn"`
	// Properties which can be set to a virtual machine during deployment.
	PropertyConfig []HCIDeployVMVmConfigPropertyConfigItem `json:"propertyConfig"`
}

// GetAcceptEula returns the value of AcceptEula.
func (s *HCIDeployVMVmConfig) GetAcceptEula() bool {
	return s.AcceptEula
}

// GetAnnotation returns the value of Annotation.
func (s *HCIDeployVMVmConfig) GetAnnotation() OptString {
	return s.Annotation
}

// GetLocale returns the value of Locale.
func (s *HCIDeployVMVmConfig) GetLocale() OptString {
	return s.Locale
}

// GetName returns the value of Name.
func (s *HCIDeployVMVmConfig) GetName() string {
	return s.Name
}

// GetNumberOfVms returns the value of NumberOfVms.
func (s *HCIDeployVMVmConfig) GetNumberOfVms() OptInt {
	return s.NumberOfVms
}

// GetPowerOn returns the value of PowerOn.
func (s *HCIDeployVMVmConfig) GetPowerOn() OptBool {
	return s.PowerOn
}

// GetPropertyConfig returns the value of PropertyConfig.
func (s *HCIDeployVMVmConfig) GetPropertyConfig() []HCIDeployVMVmConfigPropertyConfigItem {
	return s.PropertyConfig
}

// SetAcceptEula sets the value of AcceptEula.
func (s *HCIDeployVMVmConfig) SetAcceptEula(val bool) {
	s.AcceptEula = val
}

// SetAnnotation sets the value of Annotation.
func (s *HCIDeployVMVmConfig) SetAnnotation(val OptString) {
	s.Annotation = val
}

// SetLocale sets the value of Locale.
func (s *HCIDeployVMVmConfig) SetLocale(val OptString) {
	s.Locale = val
}

// SetName sets the value of Name.
func (s *HCIDeployVMVmConfig) SetName(val string) {
	s.Name = val
}

// SetNumberOfVms sets the value of NumberOfVms.
func (s *HCIDeployVMVmConfig) SetNumberOfVms(val OptInt) {
	s.NumberOfVms = val
}

// SetPowerOn sets the value of PowerOn.
func (s *HCIDeployVMVmConfig) SetPowerOn(val OptBool) {
	s.PowerOn = val
}

// SetPropertyConfig sets the value of PropertyConfig.
func (s *HCIDeployVMVmConfig) SetPropertyConfig(val []HCIDeployVMVmConfigPropertyConfigItem) {
	s.PropertyConfig = val
}

type HCIDeployVMVmConfigPropertyConfigItem struct {
	// Name of the property to be set to the virtual machine.
	Key OptString `json:"key"`
	// Value of the property to be set to the virtual machine.
	Value OptString `json:"value"`
}

// GetKey returns the value of Key.
func (s *HCIDeployVMVmConfigPropertyConfigItem) GetKey() OptString {
	return s.Key
}

// GetValue returns the value of Value.
func (s *HCIDeployVMVmConfigPropertyConfigItem) GetValue() OptString {
	return s.Value
}

// SetKey sets the value of Key.
func (s *HCIDeployVMVmConfigPropertyConfigItem) SetKey(val OptString) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *HCIDeployVMVmConfigPropertyConfigItem) SetValue(val OptString) {
	s.Value = val
}

type HCIDeployVMVmPolicyItem struct {
	// The UUID of the policy.
	ID OptString `json:"id"`
	// Type of the policy which needs to be attached to the virtual machine.
	Type OptHCIDeployVMVmPolicyItemType `json:"type"`
}

// GetID returns the value of ID.
func (s *HCIDeployVMVmPolicyItem) GetID() OptString {
	return s.ID
}

// GetType returns the value of Type.
func (s *HCIDeployVMVmPolicyItem) GetType() OptHCIDeployVMVmPolicyItemType {
	return s.Type
}

// SetID sets the value of ID.
func (s *HCIDeployVMVmPolicyItem) SetID(val OptString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *HCIDeployVMVmPolicyItem) SetType(val OptHCIDeployVMVmPolicyItemType) {
	s.Type = val
}

// Type of the policy which needs to be attached to the virtual machine.
type HCIDeployVMVmPolicyItemType string

const (
	HCIDeployVMVmPolicyItemTypeVMPROTECTIONPOLICY   HCIDeployVMVmPolicyItemType = "VM_PROTECTION_POLICY"
	HCIDeployVMVmPolicyItemTypeVMPROVISIONINGPOLICY HCIDeployVMVmPolicyItemType = "VM_PROVISIONING_POLICY"
)

// AllValues returns all HCIDeployVMVmPolicyItemType values.
func (HCIDeployVMVmPolicyItemType) AllValues() []HCIDeployVMVmPolicyItemType {
	return []HCIDeployVMVmPolicyItemType{
		HCIDeployVMVmPolicyItemTypeVMPROTECTIONPOLICY,
		HCIDeployVMVmPolicyItemTypeVMPROVISIONINGPOLICY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HCIDeployVMVmPolicyItemType) MarshalText() ([]byte, error) {
	switch s {
	case HCIDeployVMVmPolicyItemTypeVMPROTECTIONPOLICY:
		return []byte(s), nil
	case HCIDeployVMVmPolicyItemTypeVMPROVISIONINGPOLICY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HCIDeployVMVmPolicyItemType) UnmarshalText(data []byte) error {
	switch HCIDeployVMVmPolicyItemType(data) {
	case HCIDeployVMVmPolicyItemTypeVMPROTECTIONPOLICY:
		*s = HCIDeployVMVmPolicyItemTypeVMPROTECTIONPOLICY
		return nil
	case HCIDeployVMVmPolicyItemTypeVMPROVISIONINGPOLICY:
		*s = HCIDeployVMVmPolicyItemTypeVMPROVISIONINGPOLICY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ID string

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMNetworkAdaptersItemNetworkDetails returns new OptEditVMNetworkAdaptersItemNetworkDetails with value set to v.
func NewOptEditVMNetworkAdaptersItemNetworkDetails(v EditVMNetworkAdaptersItemNetworkDetails) OptEditVMNetworkAdaptersItemNetworkDetails {
	return OptEditVMNetworkAdaptersItemNetworkDetails{
		Value: v,
		Set:   true,
	}
}

// OptEditVMNetworkAdaptersItemNetworkDetails is optional EditVMNetworkAdaptersItemNetworkDetails.
type OptEditVMNetworkAdaptersItemNetworkDetails struct {
	Value EditVMNetworkAdaptersItemNetworkDetails
	Set   bool
}

// IsSet returns true if OptEditVMNetworkAdaptersItemNetworkDetails was set.
func (o OptEditVMNetworkAdaptersItemNetworkDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMNetworkAdaptersItemNetworkDetails) Reset() {
	var v EditVMNetworkAdaptersItemNetworkDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMNetworkAdaptersItemNetworkDetails) SetTo(v EditVMNetworkAdaptersItemNetworkDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMNetworkAdaptersItemNetworkDetails) Get() (v EditVMNetworkAdaptersItemNetworkDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMNetworkAdaptersItemNetworkDetails) Or(d EditVMNetworkAdaptersItemNetworkDetails) EditVMNetworkAdaptersItemNetworkDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMNetworkAdaptersItemNetworkDetailsType returns new OptEditVMNetworkAdaptersItemNetworkDetailsType with value set to v.
func NewOptEditVMNetworkAdaptersItemNetworkDetailsType(v EditVMNetworkAdaptersItemNetworkDetailsType) OptEditVMNetworkAdaptersItemNetworkDetailsType {
	return OptEditVMNetworkAdaptersItemNetworkDetailsType{
		Value: v,
		Set:   true,
	}
}

// OptEditVMNetworkAdaptersItemNetworkDetailsType is optional EditVMNetworkAdaptersItemNetworkDetailsType.
type OptEditVMNetworkAdaptersItemNetworkDetailsType struct {
	Value EditVMNetworkAdaptersItemNetworkDetailsType
	Set   bool
}

// IsSet returns true if OptEditVMNetworkAdaptersItemNetworkDetailsType was set.
func (o OptEditVMNetworkAdaptersItemNetworkDetailsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMNetworkAdaptersItemNetworkDetailsType) Reset() {
	var v EditVMNetworkAdaptersItemNetworkDetailsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMNetworkAdaptersItemNetworkDetailsType) SetTo(v EditVMNetworkAdaptersItemNetworkDetailsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMNetworkAdaptersItemNetworkDetailsType) Get() (v EditVMNetworkAdaptersItemNetworkDetailsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMNetworkAdaptersItemNetworkDetailsType) Or(d EditVMNetworkAdaptersItemNetworkDetailsType) EditVMNetworkAdaptersItemNetworkDetailsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMNetworkAdaptersItemOperation returns new OptEditVMNetworkAdaptersItemOperation with value set to v.
func NewOptEditVMNetworkAdaptersItemOperation(v EditVMNetworkAdaptersItemOperation) OptEditVMNetworkAdaptersItemOperation {
	return OptEditVMNetworkAdaptersItemOperation{
		Value: v,
		Set:   true,
	}
}

// OptEditVMNetworkAdaptersItemOperation is optional EditVMNetworkAdaptersItemOperation.
type OptEditVMNetworkAdaptersItemOperation struct {
	Value EditVMNetworkAdaptersItemOperation
	Set   bool
}

// IsSet returns true if OptEditVMNetworkAdaptersItemOperation was set.
func (o OptEditVMNetworkAdaptersItemOperation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMNetworkAdaptersItemOperation) Reset() {
	var v EditVMNetworkAdaptersItemOperation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMNetworkAdaptersItemOperation) SetTo(v EditVMNetworkAdaptersItemOperation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMNetworkAdaptersItemOperation) Get() (v EditVMNetworkAdaptersItemOperation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMNetworkAdaptersItemOperation) Or(d EditVMNetworkAdaptersItemOperation) EditVMNetworkAdaptersItemOperation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMNetworkAdaptersItemType returns new OptEditVMNetworkAdaptersItemType with value set to v.
func NewOptEditVMNetworkAdaptersItemType(v EditVMNetworkAdaptersItemType) OptEditVMNetworkAdaptersItemType {
	return OptEditVMNetworkAdaptersItemType{
		Value: v,
		Set:   true,
	}
}

// OptEditVMNetworkAdaptersItemType is optional EditVMNetworkAdaptersItemType.
type OptEditVMNetworkAdaptersItemType struct {
	Value EditVMNetworkAdaptersItemType
	Set   bool
}

// IsSet returns true if OptEditVMNetworkAdaptersItemType was set.
func (o OptEditVMNetworkAdaptersItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMNetworkAdaptersItemType) Reset() {
	var v EditVMNetworkAdaptersItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMNetworkAdaptersItemType) SetTo(v EditVMNetworkAdaptersItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMNetworkAdaptersItemType) Get() (v EditVMNetworkAdaptersItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMNetworkAdaptersItemType) Or(d EditVMNetworkAdaptersItemType) EditVMNetworkAdaptersItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMVirtualDisksItemDiskConfig returns new OptEditVMVirtualDisksItemDiskConfig with value set to v.
func NewOptEditVMVirtualDisksItemDiskConfig(v EditVMVirtualDisksItemDiskConfig) OptEditVMVirtualDisksItemDiskConfig {
	return OptEditVMVirtualDisksItemDiskConfig{
		Value: v,
		Set:   true,
	}
}

// OptEditVMVirtualDisksItemDiskConfig is optional EditVMVirtualDisksItemDiskConfig.
type OptEditVMVirtualDisksItemDiskConfig struct {
	Value EditVMVirtualDisksItemDiskConfig
	Set   bool
}

// IsSet returns true if OptEditVMVirtualDisksItemDiskConfig was set.
func (o OptEditVMVirtualDisksItemDiskConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMVirtualDisksItemDiskConfig) Reset() {
	var v EditVMVirtualDisksItemDiskConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMVirtualDisksItemDiskConfig) SetTo(v EditVMVirtualDisksItemDiskConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMVirtualDisksItemDiskConfig) Get() (v EditVMVirtualDisksItemDiskConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMVirtualDisksItemDiskConfig) Or(d EditVMVirtualDisksItemDiskConfig) EditVMVirtualDisksItemDiskConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMVirtualDisksItemDiskConfigType returns new OptEditVMVirtualDisksItemDiskConfigType with value set to v.
func NewOptEditVMVirtualDisksItemDiskConfigType(v EditVMVirtualDisksItemDiskConfigType) OptEditVMVirtualDisksItemDiskConfigType {
	return OptEditVMVirtualDisksItemDiskConfigType{
		Value: v,
		Set:   true,
	}
}

// OptEditVMVirtualDisksItemDiskConfigType is optional EditVMVirtualDisksItemDiskConfigType.
type OptEditVMVirtualDisksItemDiskConfigType struct {
	Value EditVMVirtualDisksItemDiskConfigType
	Set   bool
}

// IsSet returns true if OptEditVMVirtualDisksItemDiskConfigType was set.
func (o OptEditVMVirtualDisksItemDiskConfigType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMVirtualDisksItemDiskConfigType) Reset() {
	var v EditVMVirtualDisksItemDiskConfigType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMVirtualDisksItemDiskConfigType) SetTo(v EditVMVirtualDisksItemDiskConfigType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMVirtualDisksItemDiskConfigType) Get() (v EditVMVirtualDisksItemDiskConfigType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMVirtualDisksItemDiskConfigType) Or(d EditVMVirtualDisksItemDiskConfigType) EditVMVirtualDisksItemDiskConfigType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditVMVirtualDisksItemOperation returns new OptEditVMVirtualDisksItemOperation with value set to v.
func NewOptEditVMVirtualDisksItemOperation(v EditVMVirtualDisksItemOperation) OptEditVMVirtualDisksItemOperation {
	return OptEditVMVirtualDisksItemOperation{
		Value: v,
		Set:   true,
	}
}

// OptEditVMVirtualDisksItemOperation is optional EditVMVirtualDisksItemOperation.
type OptEditVMVirtualDisksItemOperation struct {
	Value EditVMVirtualDisksItemOperation
	Set   bool
}

// IsSet returns true if OptEditVMVirtualDisksItemOperation was set.
func (o OptEditVMVirtualDisksItemOperation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditVMVirtualDisksItemOperation) Reset() {
	var v EditVMVirtualDisksItemOperation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditVMVirtualDisksItemOperation) SetTo(v EditVMVirtualDisksItemOperation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditVMVirtualDisksItemOperation) Get() (v EditVMVirtualDisksItemOperation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditVMVirtualDisksItemOperation) Or(d EditVMVirtualDisksItemOperation) EditVMVirtualDisksItemOperation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMDestination returns new OptHCIDeployVMDestination with value set to v.
func NewOptHCIDeployVMDestination(v HCIDeployVMDestination) OptHCIDeployVMDestination {
	return OptHCIDeployVMDestination{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMDestination is optional HCIDeployVMDestination.
type OptHCIDeployVMDestination struct {
	Value HCIDeployVMDestination
	Set   bool
}

// IsSet returns true if OptHCIDeployVMDestination was set.
func (o OptHCIDeployVMDestination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMDestination) Reset() {
	var v HCIDeployVMDestination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMDestination) SetTo(v HCIDeployVMDestination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMDestination) Get() (v HCIDeployVMDestination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMDestination) Or(d HCIDeployVMDestination) HCIDeployVMDestination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMImageSource returns new OptHCIDeployVMImageSource with value set to v.
func NewOptHCIDeployVMImageSource(v HCIDeployVMImageSource) OptHCIDeployVMImageSource {
	return OptHCIDeployVMImageSource{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMImageSource is optional HCIDeployVMImageSource.
type OptHCIDeployVMImageSource struct {
	Value HCIDeployVMImageSource
	Set   bool
}

// IsSet returns true if OptHCIDeployVMImageSource was set.
func (o OptHCIDeployVMImageSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMImageSource) Reset() {
	var v HCIDeployVMImageSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMImageSource) SetTo(v HCIDeployVMImageSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMImageSource) Get() (v HCIDeployVMImageSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMImageSource) Or(d HCIDeployVMImageSource) HCIDeployVMImageSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMImageSourceImageSourceType returns new OptHCIDeployVMImageSourceImageSourceType with value set to v.
func NewOptHCIDeployVMImageSourceImageSourceType(v HCIDeployVMImageSourceImageSourceType) OptHCIDeployVMImageSourceImageSourceType {
	return OptHCIDeployVMImageSourceImageSourceType{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMImageSourceImageSourceType is optional HCIDeployVMImageSourceImageSourceType.
type OptHCIDeployVMImageSourceImageSourceType struct {
	Value HCIDeployVMImageSourceImageSourceType
	Set   bool
}

// IsSet returns true if OptHCIDeployVMImageSourceImageSourceType was set.
func (o OptHCIDeployVMImageSourceImageSourceType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMImageSourceImageSourceType) Reset() {
	var v HCIDeployVMImageSourceImageSourceType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMImageSourceImageSourceType) SetTo(v HCIDeployVMImageSourceImageSourceType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMImageSourceImageSourceType) Get() (v HCIDeployVMImageSourceImageSourceType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMImageSourceImageSourceType) Or(d HCIDeployVMImageSourceImageSourceType) HCIDeployVMImageSourceImageSourceType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMNetworkConfig returns new OptHCIDeployVMNetworkConfig with value set to v.
func NewOptHCIDeployVMNetworkConfig(v HCIDeployVMNetworkConfig) OptHCIDeployVMNetworkConfig {
	return OptHCIDeployVMNetworkConfig{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMNetworkConfig is optional HCIDeployVMNetworkConfig.
type OptHCIDeployVMNetworkConfig struct {
	Value HCIDeployVMNetworkConfig
	Set   bool
}

// IsSet returns true if OptHCIDeployVMNetworkConfig was set.
func (o OptHCIDeployVMNetworkConfig) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMNetworkConfig) Reset() {
	var v HCIDeployVMNetworkConfig
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMNetworkConfig) SetTo(v HCIDeployVMNetworkConfig) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMNetworkConfig) Get() (v HCIDeployVMNetworkConfig, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMNetworkConfig) Or(d HCIDeployVMNetworkConfig) HCIDeployVMNetworkConfig {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMNetworkConfigIpAllocationPolicy returns new OptHCIDeployVMNetworkConfigIpAllocationPolicy with value set to v.
func NewOptHCIDeployVMNetworkConfigIpAllocationPolicy(v HCIDeployVMNetworkConfigIpAllocationPolicy) OptHCIDeployVMNetworkConfigIpAllocationPolicy {
	return OptHCIDeployVMNetworkConfigIpAllocationPolicy{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMNetworkConfigIpAllocationPolicy is optional HCIDeployVMNetworkConfigIpAllocationPolicy.
type OptHCIDeployVMNetworkConfigIpAllocationPolicy struct {
	Value HCIDeployVMNetworkConfigIpAllocationPolicy
	Set   bool
}

// IsSet returns true if OptHCIDeployVMNetworkConfigIpAllocationPolicy was set.
func (o OptHCIDeployVMNetworkConfigIpAllocationPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMNetworkConfigIpAllocationPolicy) Reset() {
	var v HCIDeployVMNetworkConfigIpAllocationPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMNetworkConfigIpAllocationPolicy) SetTo(v HCIDeployVMNetworkConfigIpAllocationPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMNetworkConfigIpAllocationPolicy) Get() (v HCIDeployVMNetworkConfigIpAllocationPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMNetworkConfigIpAllocationPolicy) Or(d HCIDeployVMNetworkConfigIpAllocationPolicy) HCIDeployVMNetworkConfigIpAllocationPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMStorageConfigProvisioningType returns new OptHCIDeployVMStorageConfigProvisioningType with value set to v.
func NewOptHCIDeployVMStorageConfigProvisioningType(v HCIDeployVMStorageConfigProvisioningType) OptHCIDeployVMStorageConfigProvisioningType {
	return OptHCIDeployVMStorageConfigProvisioningType{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMStorageConfigProvisioningType is optional HCIDeployVMStorageConfigProvisioningType.
type OptHCIDeployVMStorageConfigProvisioningType struct {
	Value HCIDeployVMStorageConfigProvisioningType
	Set   bool
}

// IsSet returns true if OptHCIDeployVMStorageConfigProvisioningType was set.
func (o OptHCIDeployVMStorageConfigProvisioningType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMStorageConfigProvisioningType) Reset() {
	var v HCIDeployVMStorageConfigProvisioningType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMStorageConfigProvisioningType) SetTo(v HCIDeployVMStorageConfigProvisioningType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMStorageConfigProvisioningType) Get() (v HCIDeployVMStorageConfigProvisioningType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMStorageConfigProvisioningType) Or(d HCIDeployVMStorageConfigProvisioningType) HCIDeployVMStorageConfigProvisioningType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHCIDeployVMVmPolicyItemType returns new OptHCIDeployVMVmPolicyItemType with value set to v.
func NewOptHCIDeployVMVmPolicyItemType(v HCIDeployVMVmPolicyItemType) OptHCIDeployVMVmPolicyItemType {
	return OptHCIDeployVMVmPolicyItemType{
		Value: v,
		Set:   true,
	}
}

// OptHCIDeployVMVmPolicyItemType is optional HCIDeployVMVmPolicyItemType.
type OptHCIDeployVMVmPolicyItemType struct {
	Value HCIDeployVMVmPolicyItemType
	Set   bool
}

// IsSet returns true if OptHCIDeployVMVmPolicyItemType was set.
func (o OptHCIDeployVMVmPolicyItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHCIDeployVMVmPolicyItemType) Reset() {
	var v HCIDeployVMVmPolicyItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHCIDeployVMVmPolicyItemType) SetTo(v HCIDeployVMVmPolicyItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHCIDeployVMVmPolicyItemType) Get() (v HCIDeployVMVmPolicyItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHCIDeployVMVmPolicyItemType) Or(d HCIDeployVMVmPolicyItemType) HCIDeployVMVmPolicyItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVMRequestsListItems returns new OptVMRequestsListItems with value set to v.
func NewOptVMRequestsListItems(v VMRequestsListItems) OptVMRequestsListItems {
	return OptVMRequestsListItems{
		Value: v,
		Set:   true,
	}
}

// OptVMRequestsListItems is optional VMRequestsListItems.
type OptVMRequestsListItems struct {
	Value VMRequestsListItems
	Set   bool
}

// IsSet returns true if OptVMRequestsListItems was set.
func (o OptVMRequestsListItems) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVMRequestsListItems) Reset() {
	var v VMRequestsListItems
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVMRequestsListItems) SetTo(v VMRequestsListItems) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVMRequestsListItems) Get() (v VMRequestsListItems, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVMRequestsListItems) Or(d VMRequestsListItems) VMRequestsListItems {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type VMDeleteBadRequest ErrorResponse

func (*VMDeleteBadRequest) vMDeleteRes() {}

type VMDeleteConflict ErrorResponse

func (*VMDeleteConflict) vMDeleteRes() {}

type VMDeleteForbidden ErrorResponse

func (*VMDeleteForbidden) vMDeleteRes() {}

type VMDeleteInternalServerError ErrorResponse

func (*VMDeleteInternalServerError) vMDeleteRes() {}

type VMDeleteNotFound ErrorResponse

func (*VMDeleteNotFound) vMDeleteRes() {}

type VMDeleteServiceUnavailable ErrorResponse

func (*VMDeleteServiceUnavailable) vMDeleteRes() {}

type VMDeleteUnauthorized ErrorResponse

func (*VMDeleteUnauthorized) vMDeleteRes() {}

// Ref: #/components/schemas/VMDeployInstance
type VMDeployInstance struct {
	RequestId      uuid.UUID      `json:"requestId"`
	VmId           OptString      `json:"vmId"`
	VmName         string         `json:"vmName"`
	VmStatus       string         `json:"vmStatus"`
	VmStateMessage OptString      `json:"vmStateMessage"`
	CompletedAt    OptNilDateTime `json:"completedAt"`
}

// GetRequestId returns the value of RequestId.
func (s *VMDeployInstance) GetRequestId() uuid.UUID {
	return s.RequestId
}

// GetVmId returns the value of VmId.
func (s *VMDeployInstance) GetVmId() OptString {
	return s.VmId
}

// GetVmName returns the value of VmName.
func (s *VMDeployInstance) GetVmName() string {
	return s.VmName
}

// GetVmStatus returns the value of VmStatus.
func (s *VMDeployInstance) GetVmStatus() string {
	return s.VmStatus
}

// GetVmStateMessage returns the value of VmStateMessage.
func (s *VMDeployInstance) GetVmStateMessage() OptString {
	return s.VmStateMessage
}

// GetCompletedAt returns the value of CompletedAt.
func (s *VMDeployInstance) GetCompletedAt() OptNilDateTime {
	return s.CompletedAt
}

// SetRequestId sets the value of RequestId.
func (s *VMDeployInstance) SetRequestId(val uuid.UUID) {
	s.RequestId = val
}

// SetVmId sets the value of VmId.
func (s *VMDeployInstance) SetVmId(val OptString) {
	s.VmId = val
}

// SetVmName sets the value of VmName.
func (s *VMDeployInstance) SetVmName(val string) {
	s.VmName = val
}

// SetVmStatus sets the value of VmStatus.
func (s *VMDeployInstance) SetVmStatus(val string) {
	s.VmStatus = val
}

// SetVmStateMessage sets the value of VmStateMessage.
func (s *VMDeployInstance) SetVmStateMessage(val OptString) {
	s.VmStateMessage = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *VMDeployInstance) SetCompletedAt(val OptNilDateTime) {
	s.CompletedAt = val
}

type VMPowerOffBadRequest ErrorResponse

func (*VMPowerOffBadRequest) vMPowerOffRes() {}

type VMPowerOffConflict ErrorResponse

func (*VMPowerOffConflict) vMPowerOffRes() {}

type VMPowerOffForbidden ErrorResponse

func (*VMPowerOffForbidden) vMPowerOffRes() {}

type VMPowerOffInternalServerError ErrorResponse

func (*VMPowerOffInternalServerError) vMPowerOffRes() {}

type VMPowerOffNotFound ErrorResponse

func (*VMPowerOffNotFound) vMPowerOffRes() {}

type VMPowerOffServiceUnavailable ErrorResponse

func (*VMPowerOffServiceUnavailable) vMPowerOffRes() {}

type VMPowerOffUnauthorized ErrorResponse

func (*VMPowerOffUnauthorized) vMPowerOffRes() {}

type VMPowerOnBadRequest ErrorResponse

func (*VMPowerOnBadRequest) vMPowerOnRes() {}

type VMPowerOnConflict ErrorResponse

func (*VMPowerOnConflict) vMPowerOnRes() {}

type VMPowerOnForbidden ErrorResponse

func (*VMPowerOnForbidden) vMPowerOnRes() {}

type VMPowerOnInternalServerError ErrorResponse

func (*VMPowerOnInternalServerError) vMPowerOnRes() {}

type VMPowerOnNotFound ErrorResponse

func (*VMPowerOnNotFound) vMPowerOnRes() {}

type VMPowerOnServiceUnavailable ErrorResponse

func (*VMPowerOnServiceUnavailable) vMPowerOnRes() {}

type VMPowerOnUnauthorized ErrorResponse

func (*VMPowerOnUnauthorized) vMPowerOnRes() {}

type VMPowerResetBadRequest ErrorResponse

func (*VMPowerResetBadRequest) vMPowerResetRes() {}

type VMPowerResetConflict ErrorResponse

func (*VMPowerResetConflict) vMPowerResetRes() {}

type VMPowerResetForbidden ErrorResponse

func (*VMPowerResetForbidden) vMPowerResetRes() {}

type VMPowerResetInternalServerError ErrorResponse

func (*VMPowerResetInternalServerError) vMPowerResetRes() {}

type VMPowerResetNotFound ErrorResponse

func (*VMPowerResetNotFound) vMPowerResetRes() {}

type VMPowerResetServiceUnavailable ErrorResponse

func (*VMPowerResetServiceUnavailable) vMPowerResetRes() {}

type VMPowerResetUnauthorized ErrorResponse

func (*VMPowerResetUnauthorized) vMPowerResetRes() {}

type VMRefreshConflict ErrorResponse

func (*VMRefreshConflict) vMRefreshRes() {}

type VMRefreshForbidden ErrorResponse

func (*VMRefreshForbidden) vMRefreshRes() {}

type VMRefreshInternalServerError ErrorResponse

func (*VMRefreshInternalServerError) vMRefreshRes() {}

type VMRefreshNotFound ErrorResponse

func (*VMRefreshNotFound) vMRefreshRes() {}

type VMRefreshUnauthorized ErrorResponse

func (*VMRefreshUnauthorized) vMRefreshRes() {}

// Ref: #/components/schemas/VMRequest
type VMRequest struct {
	RequestId     uuid.UUID              `json:"requestId"`
	Operation     VMRequestOperation     `json:"operation"`
	RequestStatus VMRequestRequestStatus `json:"requestStatus"`
	WorkspaceId   OptString              `json:"workspaceId"`
	DatacenterId  OptString              `json:"datacenterId"`
	CreatedAt     time.Time              `json:"createdAt"`
	CompletedAt   OptNilDateTime         `json:"completedAt"`
	// JSON metadata stored as text.
	RequestMetadata string `json:"requestMetadata"`
}

// GetRequestId returns the value of RequestId.
func (s *VMRequest) GetRequestId() uuid.UUID {
	return s.RequestId
}

// GetOperation returns the value of Operation.
func (s *VMRequest) GetOperation() VMRequestOperation {
	return s.Operation
}

// GetRequestStatus returns the value of RequestStatus.
func (s *VMRequest) GetRequestStatus() VMRequestRequestStatus {
	return s.RequestStatus
}

// GetWorkspaceId returns the value of WorkspaceId.
func (s *VMRequest) GetWorkspaceId() OptString {
	return s.WorkspaceId
}

// GetDatacenterId returns the value of DatacenterId.
func (s *VMRequest) GetDatacenterId() OptString {
	return s.DatacenterId
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VMRequest) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *VMRequest) GetCompletedAt() OptNilDateTime {
	return s.CompletedAt
}

// GetRequestMetadata returns the value of RequestMetadata.
func (s *VMRequest) GetRequestMetadata() string {
	return s.RequestMetadata
}

// SetRequestId sets the value of RequestId.
func (s *VMRequest) SetRequestId(val uuid.UUID) {
	s.RequestId = val
}

// SetOperation sets the value of Operation.
func (s *VMRequest) SetOperation(val VMRequestOperation) {
	s.Operation = val
}

// SetRequestStatus sets the value of RequestStatus.
func (s *VMRequest) SetRequestStatus(val VMRequestRequestStatus) {
	s.RequestStatus = val
}

// SetWorkspaceId sets the value of WorkspaceId.
func (s *VMRequest) SetWorkspaceId(val OptString) {
	s.WorkspaceId = val
}

// SetDatacenterId sets the value of DatacenterId.
func (s *VMRequest) SetDatacenterId(val OptString) {
	s.DatacenterId = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VMRequest) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *VMRequest) SetCompletedAt(val OptNilDateTime) {
	s.CompletedAt = val
}

// SetRequestMetadata sets the value of RequestMetadata.
func (s *VMRequest) SetRequestMetadata(val string) {
	s.RequestMetadata = val
}

type VMRequestOperation string

const (
	VMRequestOperationVmDeploy      VMRequestOperation = "vmDeploy"
	VMRequestOperationVmReconfigure VMRequestOperation = "vmReconfigure"
	VMRequestOperationVmPowerOn     VMRequestOperation = "vmPowerOn"
	VMRequestOperationVmPowerOff    VMRequestOperation = "vmPowerOff"
	VMRequestOperationVmReset       VMRequestOperation = "vmReset"
	VMRequestOperationVmRestart     VMRequestOperation = "vmRestart"
	VMRequestOperationVmShutdown    VMRequestOperation = "vmShutdown"
	VMRequestOperationVmDelete      VMRequestOperation = "vmDelete"
)

// AllValues returns all VMRequestOperation values.
func (VMRequestOperation) AllValues() []VMRequestOperation {
	return []VMRequestOperation{
		VMRequestOperationVmDeploy,
		VMRequestOperationVmReconfigure,
		VMRequestOperationVmPowerOn,
		VMRequestOperationVmPowerOff,
		VMRequestOperationVmReset,
		VMRequestOperationVmRestart,
		VMRequestOperationVmShutdown,
		VMRequestOperationVmDelete,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VMRequestOperation) MarshalText() ([]byte, error) {
	switch s {
	case VMRequestOperationVmDeploy:
		return []byte(s), nil
	case VMRequestOperationVmReconfigure:
		return []byte(s), nil
	case VMRequestOperationVmPowerOn:
		return []byte(s), nil
	case VMRequestOperationVmPowerOff:
		return []byte(s), nil
	case VMRequestOperationVmReset:
		return []byte(s), nil
	case VMRequestOperationVmRestart:
		return []byte(s), nil
	case VMRequestOperationVmShutdown:
		return []byte(s), nil
	case VMRequestOperationVmDelete:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VMRequestOperation) UnmarshalText(data []byte) error {
	switch VMRequestOperation(data) {
	case VMRequestOperationVmDeploy:
		*s = VMRequestOperationVmDeploy
		return nil
	case VMRequestOperationVmReconfigure:
		*s = VMRequestOperationVmReconfigure
		return nil
	case VMRequestOperationVmPowerOn:
		*s = VMRequestOperationVmPowerOn
		return nil
	case VMRequestOperationVmPowerOff:
		*s = VMRequestOperationVmPowerOff
		return nil
	case VMRequestOperationVmReset:
		*s = VMRequestOperationVmReset
		return nil
	case VMRequestOperationVmRestart:
		*s = VMRequestOperationVmRestart
		return nil
	case VMRequestOperationVmShutdown:
		*s = VMRequestOperationVmShutdown
		return nil
	case VMRequestOperationVmDelete:
		*s = VMRequestOperationVmDelete
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VMRequestRequestStatus string

const (
	VMRequestRequestStatusNEW        VMRequestRequestStatus = "NEW"
	VMRequestRequestStatusINPROGRESS VMRequestRequestStatus = "INPROGRESS"
	VMRequestRequestStatusSUCCESS    VMRequestRequestStatus = "SUCCESS"
	VMRequestRequestStatusFAILURE    VMRequestRequestStatus = "FAILURE"
)

// AllValues returns all VMRequestRequestStatus values.
func (VMRequestRequestStatus) AllValues() []VMRequestRequestStatus {
	return []VMRequestRequestStatus{
		VMRequestRequestStatusNEW,
		VMRequestRequestStatusINPROGRESS,
		VMRequestRequestStatusSUCCESS,
		VMRequestRequestStatusFAILURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VMRequestRequestStatus) MarshalText() ([]byte, error) {
	switch s {
	case VMRequestRequestStatusNEW:
		return []byte(s), nil
	case VMRequestRequestStatusINPROGRESS:
		return []byte(s), nil
	case VMRequestRequestStatusSUCCESS:
		return []byte(s), nil
	case VMRequestRequestStatusFAILURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VMRequestRequestStatus) UnmarshalText(data []byte) error {
	switch VMRequestRequestStatus(data) {
	case VMRequestRequestStatusNEW:
		*s = VMRequestRequestStatusNEW
		return nil
	case VMRequestRequestStatusINPROGRESS:
		*s = VMRequestRequestStatusINPROGRESS
		return nil
	case VMRequestRequestStatusSUCCESS:
		*s = VMRequestRequestStatusSUCCESS
		return nil
	case VMRequestRequestStatusFAILURE:
		*s = VMRequestRequestStatusFAILURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/VMRequestWithDeploy
type VMRequestWithDeploy struct {
	VMRequest    VMRequest          `json:"vm_request"`
	VMDeployList []VMDeployInstance `json:"vm_deploy_list"`
}

// GetVMRequest returns the value of VMRequest.
func (s *VMRequestWithDeploy) GetVMRequest() VMRequest {
	return s.VMRequest
}

// GetVMDeployList returns the value of VMDeployList.
func (s *VMRequestWithDeploy) GetVMDeployList() []VMDeployInstance {
	return s.VMDeployList
}

// SetVMRequest sets the value of VMRequest.
func (s *VMRequestWithDeploy) SetVMRequest(val VMRequest) {
	s.VMRequest = val
}

// SetVMDeployList sets the value of VMDeployList.
func (s *VMRequestWithDeploy) SetVMDeployList(val []VMDeployInstance) {
	s.VMDeployList = val
}

func (*VMRequestWithDeploy) getVirtualMachineRequestRes() {}

// List of all the VM Requests made.
// Ref: #/components/schemas/VMRequestsList
type VMRequestsList struct {
	// Total number of vm request records returned.
	VMMinusRequestsListCount OptInt `json:"vm-requests_list_count"`
	// Total number of vm deploy records returned.
	VMMinusDeployListCount OptInt                 `json:"vm-deploy_list_count"`
	Items                  OptVMRequestsListItems `json:"items"`
}

// GetVMMinusRequestsListCount returns the value of VMMinusRequestsListCount.
func (s *VMRequestsList) GetVMMinusRequestsListCount() OptInt {
	return s.VMMinusRequestsListCount
}

// GetVMMinusDeployListCount returns the value of VMMinusDeployListCount.
func (s *VMRequestsList) GetVMMinusDeployListCount() OptInt {
	return s.VMMinusDeployListCount
}

// GetItems returns the value of Items.
func (s *VMRequestsList) GetItems() OptVMRequestsListItems {
	return s.Items
}

// SetVMMinusRequestsListCount sets the value of VMMinusRequestsListCount.
func (s *VMRequestsList) SetVMMinusRequestsListCount(val OptInt) {
	s.VMMinusRequestsListCount = val
}

// SetVMMinusDeployListCount sets the value of VMMinusDeployListCount.
func (s *VMRequestsList) SetVMMinusDeployListCount(val OptInt) {
	s.VMMinusDeployListCount = val
}

// SetItems sets the value of Items.
func (s *VMRequestsList) SetItems(val OptVMRequestsListItems) {
	s.Items = val
}

func (*VMRequestsList) getVirtualMachineRequestListRes() {}

type VMRequestsListItems struct {
	VMRequetsList []VMRequest        `json:"vm_requets_list"`
	VMDeployList  []VMDeployInstance `json:"vm_deploy_list"`
}

// GetVMRequetsList returns the value of VMRequetsList.
func (s *VMRequestsListItems) GetVMRequetsList() []VMRequest {
	return s.VMRequetsList
}

// GetVMDeployList returns the value of VMDeployList.
func (s *VMRequestsListItems) GetVMDeployList() []VMDeployInstance {
	return s.VMDeployList
}

// SetVMRequetsList sets the value of VMRequetsList.
func (s *VMRequestsListItems) SetVMRequetsList(val []VMRequest) {
	s.VMRequetsList = val
}

// SetVMDeployList sets the value of VMDeployList.
func (s *VMRequestsListItems) SetVMDeployList(val []VMDeployInstance) {
	s.VMDeployList = val
}

type VMRestartGuestOSBadRequest ErrorResponse

func (*VMRestartGuestOSBadRequest) vMRestartGuestOSRes() {}

type VMRestartGuestOSConflict ErrorResponse

func (*VMRestartGuestOSConflict) vMRestartGuestOSRes() {}

type VMRestartGuestOSForbidden ErrorResponse

func (*VMRestartGuestOSForbidden) vMRestartGuestOSRes() {}

type VMRestartGuestOSInternalServerError ErrorResponse

func (*VMRestartGuestOSInternalServerError) vMRestartGuestOSRes() {}

type VMRestartGuestOSNotFound ErrorResponse

func (*VMRestartGuestOSNotFound) vMRestartGuestOSRes() {}

type VMRestartGuestOSServiceUnavailable ErrorResponse

func (*VMRestartGuestOSServiceUnavailable) vMRestartGuestOSRes() {}

type VMRestartGuestOSUnauthorized ErrorResponse

func (*VMRestartGuestOSUnauthorized) vMRestartGuestOSRes() {}

type VMShutdownGuestOSBadRequest ErrorResponse

func (*VMShutdownGuestOSBadRequest) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSConflict ErrorResponse

func (*VMShutdownGuestOSConflict) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSForbidden ErrorResponse

func (*VMShutdownGuestOSForbidden) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSInternalServerError ErrorResponse

func (*VMShutdownGuestOSInternalServerError) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSNotFound ErrorResponse

func (*VMShutdownGuestOSNotFound) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSServiceUnavailable ErrorResponse

func (*VMShutdownGuestOSServiceUnavailable) vMShutdownGuestOSRes() {}

type VMShutdownGuestOSUnauthorized ErrorResponse

func (*VMShutdownGuestOSUnauthorized) vMShutdownGuestOSRes() {}
