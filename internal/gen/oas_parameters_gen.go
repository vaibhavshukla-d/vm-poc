// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EditVMParams is parameters of EditVM operation.
type EditVMParams struct {
	VMID ID
}

func unpackEditVMParams(packed middleware.Parameters) (params EditVMParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeEditVMParams(args [1]string, argsEscaped bool, r *http.Request) (params EditVMParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetVirtualMachineRequestParams is parameters of GetVirtualMachineRequest operation.
type GetVirtualMachineRequestParams struct {
	RequestID string
}

func unpackGetVirtualMachineRequestParams(packed middleware.Parameters) (params GetVirtualMachineRequestParams) {
	{
		key := middleware.ParameterKey{
			Name: "request-id",
			In:   "path",
		}
		params.RequestID = packed[key].(string)
	}
	return params
}

func decodeGetVirtualMachineRequestParams(args [1]string, argsEscaped bool, r *http.Request) (params GetVirtualMachineRequestParams, _ error) {
	// Decode path: request-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "request-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RequestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "request-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMDeleteParams is parameters of VMDelete operation.
type VMDeleteParams struct {
	VMID ID
}

func unpackVMDeleteParams(packed middleware.Parameters) (params VMDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params VMDeleteParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMPowerOffParams is parameters of VMPowerOff operation.
type VMPowerOffParams struct {
	VMID ID
}

func unpackVMPowerOffParams(packed middleware.Parameters) (params VMPowerOffParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMPowerOffParams(args [1]string, argsEscaped bool, r *http.Request) (params VMPowerOffParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMPowerOnParams is parameters of VMPowerOn operation.
type VMPowerOnParams struct {
	VMID ID
}

func unpackVMPowerOnParams(packed middleware.Parameters) (params VMPowerOnParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMPowerOnParams(args [1]string, argsEscaped bool, r *http.Request) (params VMPowerOnParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMPowerResetParams is parameters of VMPowerReset operation.
type VMPowerResetParams struct {
	VMID ID
}

func unpackVMPowerResetParams(packed middleware.Parameters) (params VMPowerResetParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMPowerResetParams(args [1]string, argsEscaped bool, r *http.Request) (params VMPowerResetParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMRefreshParams is parameters of VMRefresh operation.
type VMRefreshParams struct {
	VMID ID
}

func unpackVMRefreshParams(packed middleware.Parameters) (params VMRefreshParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMRefreshParams(args [1]string, argsEscaped bool, r *http.Request) (params VMRefreshParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMRestartGuestOSParams is parameters of VMRestartGuestOS operation.
type VMRestartGuestOSParams struct {
	VMID ID
}

func unpackVMRestartGuestOSParams(packed middleware.Parameters) (params VMRestartGuestOSParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMRestartGuestOSParams(args [1]string, argsEscaped bool, r *http.Request) (params VMRestartGuestOSParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// VMShutdownGuestOSParams is parameters of VMShutdownGuestOS operation.
type VMShutdownGuestOSParams struct {
	VMID ID
}

func unpackVMShutdownGuestOSParams(packed middleware.Parameters) (params VMShutdownGuestOSParams) {
	{
		key := middleware.ParameterKey{
			Name: "vm-id",
			In:   "path",
		}
		params.VMID = packed[key].(ID)
	}
	return params
}

func decodeVMShutdownGuestOSParams(args [1]string, argsEscaped bool, r *http.Request) (params VMShutdownGuestOSParams, _ error) {
	// Decode path: vm-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "vm-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotVMIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVMIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.VMID = ID(paramsDotVMIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "vm-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
