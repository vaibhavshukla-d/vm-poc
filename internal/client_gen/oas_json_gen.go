// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *CpuInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CpuInfo) encodeFields(e *jx.Encoder) {
	{
		if s.HyperthreadingActive.Set {
			e.FieldStart("hyperthreadingActive")
			s.HyperthreadingActive.Encode(e)
		}
	}
	{
		if s.LogicalProcessors.Set {
			e.FieldStart("logicalProcessors")
			s.LogicalProcessors.Encode(e)
		}
	}
	{
		if s.ProcessorCores.Set {
			e.FieldStart("processorCores")
			s.ProcessorCores.Encode(e)
		}
	}
	{
		if s.ProcessorSockets.Set {
			e.FieldStart("processorSockets")
			s.ProcessorSockets.Encode(e)
		}
	}
	{
		if s.ProcessorSpeedHz.Set {
			e.FieldStart("processorSpeedHz")
			s.ProcessorSpeedHz.Encode(e)
		}
	}
}

var jsonFieldsNameOfCpuInfo = [5]string{
	0: "hyperthreadingActive",
	1: "logicalProcessors",
	2: "processorCores",
	3: "processorSockets",
	4: "processorSpeedHz",
}

// Decode decodes CpuInfo from json.
func (s *CpuInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CpuInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "hyperthreadingActive":
			if err := func() error {
				s.HyperthreadingActive.Reset()
				if err := s.HyperthreadingActive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hyperthreadingActive\"")
			}
		case "logicalProcessors":
			if err := func() error {
				s.LogicalProcessors.Reset()
				if err := s.LogicalProcessors.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"logicalProcessors\"")
			}
		case "processorCores":
			if err := func() error {
				s.ProcessorCores.Reset()
				if err := s.ProcessorCores.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processorCores\"")
			}
		case "processorSockets":
			if err := func() error {
				s.ProcessorSockets.Reset()
				if err := s.ProcessorSockets.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processorSockets\"")
			}
		case "processorSpeedHz":
			if err := func() error {
				s.ProcessorSpeedHz.Reset()
				if err := s.ProcessorSpeedHz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processorSpeedHz\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CpuInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CpuInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CpuInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CpuSocket) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CpuSocket) encodeFields(e *jx.Encoder) {
	{
		if s.CpuBusSpeedHz.Set {
			e.FieldStart("cpuBusSpeedHz")
			s.CpuBusSpeedHz.Encode(e)
		}
	}
	{
		if s.CpuCoreSpeedHz.Set {
			e.FieldStart("cpuCoreSpeedHz")
			s.CpuCoreSpeedHz.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Vendor.Set {
			e.FieldStart("vendor")
			s.Vendor.Encode(e)
		}
	}
}

var jsonFieldsNameOfCpuSocket = [4]string{
	0: "cpuBusSpeedHz",
	1: "cpuCoreSpeedHz",
	2: "description",
	3: "vendor",
}

// Decode decodes CpuSocket from json.
func (s *CpuSocket) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CpuSocket to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cpuBusSpeedHz":
			if err := func() error {
				s.CpuBusSpeedHz.Reset()
				if err := s.CpuBusSpeedHz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuBusSpeedHz\"")
			}
		case "cpuCoreSpeedHz":
			if err := func() error {
				s.CpuCoreSpeedHz.Reset()
				if err := s.CpuCoreSpeedHz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuCoreSpeedHz\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "vendor":
			if err := func() error {
				s.Vendor.Reset()
				if err := s.Vendor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendor\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CpuSocket")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CpuSocket) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CpuSocket) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataManagementJobInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataManagementJobInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ProtectionPolicyInfo.Set {
			e.FieldStart("protectionPolicyInfo")
			s.ProtectionPolicyInfo.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataManagementJobInfo = [5]string{
	0: "id",
	1: "name",
	2: "protectionPolicyInfo",
	3: "resourceUri",
	4: "type",
}

// Decode decodes DataManagementJobInfo from json.
func (s *DataManagementJobInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataManagementJobInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "protectionPolicyInfo":
			if err := func() error {
				s.ProtectionPolicyInfo.Reset()
				if err := s.ProtectionPolicyInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionPolicyInfo\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataManagementJobInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataManagementJobInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataManagementJobInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DataManagementTemplateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DataManagementTemplateInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDataManagementTemplateInfo = [4]string{
	0: "id",
	1: "name",
	2: "resourceUri",
	3: "type",
}

// Decode decodes DataManagementTemplateInfo from json.
func (s *DataManagementTemplateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DataManagementTemplateInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DataManagementTemplateInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DataManagementTemplateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DataManagementTemplateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatacenterInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatacenterInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatacenterInfo = [3]string{
	0: "id",
	1: "moref",
	2: "name",
}

// Decode decodes DatacenterInfo from json.
func (s *DatacenterInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatacenterInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatacenterInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatacenterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatacenterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Datastore) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Datastore) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedOperations != nil {
			e.FieldStart("allowedOperations")
			e.ArrStart()
			for _, elem := range s.AllowedOperations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AppType.Set {
			e.FieldStart("appType")
			s.AppType.Encode(e)
		}
	}
	{
		if s.CapacityFree.Set {
			e.FieldStart("capacityFree")
			s.CapacityFree.Encode(e)
		}
	}
	{
		if s.CapacityInBytes.Set {
			e.FieldStart("capacityInBytes")
			s.CapacityInBytes.Encode(e)
		}
	}
	{
		if s.CapacityUncommitted.Set {
			e.FieldStart("capacityUncommitted")
			s.CapacityUncommitted.Encode(e)
		}
	}
	{
		if s.ClusterInfo.Set {
			e.FieldStart("clusterInfo")
			s.ClusterInfo.Encode(e)
		}
	}
	{
		e.FieldStart("createdAt")
		json.EncodeDateTime(e, s.CreatedAt)
	}
	{
		if s.CustomerId.Set {
			e.FieldStart("customerId")
			s.CustomerId.Encode(e)
		}
	}
	{
		if s.DatacentersInfo != nil {
			e.FieldStart("datacentersInfo")
			e.ArrStart()
			for _, elem := range s.DatacentersInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.DatastoreClassification.Set {
			e.FieldStart("datastoreClassification")
			s.DatastoreClassification.Encode(e)
		}
	}
	{
		if s.DatastoreType.Set {
			e.FieldStart("datastoreType")
			s.DatastoreType.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.FolderInfo.Set {
			e.FieldStart("folderInfo")
			s.FolderInfo.Encode(e)
		}
	}
	{
		e.FieldStart("generation")
		s.Generation.Encode(e)
	}
	{
		if s.HciClusterUuid.Set {
			e.FieldStart("hciClusterUuid")
			s.HciClusterUuid.Encode(e)
		}
	}
	{
		if s.HostsInfo != nil {
			e.FieldStart("hostsInfo")
			e.ArrStart()
			for _, elem := range s.HostsInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HypervisorManagerInfo.Set {
			e.FieldStart("hypervisorManagerInfo")
			s.HypervisorManagerInfo.Encode(e)
		}
	}
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ProtectionJobInfo.Set {
			e.FieldStart("protectionJobInfo")
			s.ProtectionJobInfo.Encode(e)
		}
	}
	{
		if s.ProtectionPolicyAppliedAtInfo.Set {
			e.FieldStart("protectionPolicyAppliedAtInfo")
			s.ProtectionPolicyAppliedAtInfo.Encode(e)
		}
	}
	{
		if s.ProtectionStatus.Set {
			e.FieldStart("protectionStatus")
			s.ProtectionStatus.Encode(e)
		}
	}
	{
		if s.ProvisioningPolicyInfo.Set {
			e.FieldStart("provisioningPolicyInfo")
			s.ProvisioningPolicyInfo.Encode(e)
		}
	}
	{
		if s.RecoveryPointsExist.Set {
			e.FieldStart("recoveryPointsExist")
			s.RecoveryPointsExist.Encode(e)
		}
	}
	{
		if s.ReplicationInfo.Set {
			e.FieldStart("replicationInfo")
			s.ReplicationInfo.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Services != nil {
			e.FieldStart("services")
			s.Services.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StateReason.Set {
			e.FieldStart("stateReason")
			s.StateReason.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		s.Type.Encode(e)
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		e.FieldStart("updatedAt")
		json.EncodeDateTime(e, s.UpdatedAt)
	}
	{
		if s.VmCount.Set {
			e.FieldStart("vmCount")
			s.VmCount.Encode(e)
		}
	}
	{
		if s.VmProtectionGroupsInfo != nil {
			e.FieldStart("vmProtectionGroupsInfo")
			e.ArrStart()
			for _, elem := range s.VmProtectionGroupsInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VolumesInfo != nil {
			e.FieldStart("volumesInfo")
			e.ArrStart()
			for _, elem := range s.VolumesInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfDatastore = [37]string{
	0:  "allowedOperations",
	1:  "appType",
	2:  "capacityFree",
	3:  "capacityInBytes",
	4:  "capacityUncommitted",
	5:  "clusterInfo",
	6:  "createdAt",
	7:  "customerId",
	8:  "datacentersInfo",
	9:  "datastoreClassification",
	10: "datastoreType",
	11: "displayName",
	12: "folderInfo",
	13: "generation",
	14: "hciClusterUuid",
	15: "hostsInfo",
	16: "hypervisorManagerInfo",
	17: "id",
	18: "moref",
	19: "name",
	20: "protectionJobInfo",
	21: "protectionPolicyAppliedAtInfo",
	22: "protectionStatus",
	23: "provisioningPolicyInfo",
	24: "recoveryPointsExist",
	25: "replicationInfo",
	26: "resourceUri",
	27: "services",
	28: "state",
	29: "stateReason",
	30: "status",
	31: "type",
	32: "uid",
	33: "updatedAt",
	34: "vmCount",
	35: "vmProtectionGroupsInfo",
	36: "volumesInfo",
}

// Decode decodes Datastore from json.
func (s *Datastore) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Datastore to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowedOperations":
			if err := func() error {
				s.AllowedOperations = make([]DatastoreAllowedOperationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DatastoreAllowedOperationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AllowedOperations = append(s.AllowedOperations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowedOperations\"")
			}
		case "appType":
			if err := func() error {
				s.AppType.Reset()
				if err := s.AppType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appType\"")
			}
		case "capacityFree":
			if err := func() error {
				s.CapacityFree.Reset()
				if err := s.CapacityFree.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capacityFree\"")
			}
		case "capacityInBytes":
			if err := func() error {
				s.CapacityInBytes.Reset()
				if err := s.CapacityInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capacityInBytes\"")
			}
		case "capacityUncommitted":
			if err := func() error {
				s.CapacityUncommitted.Reset()
				if err := s.CapacityUncommitted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capacityUncommitted\"")
			}
		case "clusterInfo":
			if err := func() error {
				s.ClusterInfo.Reset()
				if err := s.ClusterInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clusterInfo\"")
			}
		case "createdAt":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.CreatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdAt\"")
			}
		case "customerId":
			if err := func() error {
				s.CustomerId.Reset()
				if err := s.CustomerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerId\"")
			}
		case "datacentersInfo":
			if err := func() error {
				s.DatacentersInfo = make([]DatacenterInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DatacenterInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DatacentersInfo = append(s.DatacentersInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datacentersInfo\"")
			}
		case "datastoreClassification":
			if err := func() error {
				s.DatastoreClassification.Reset()
				if err := s.DatastoreClassification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datastoreClassification\"")
			}
		case "datastoreType":
			if err := func() error {
				s.DatastoreType.Reset()
				if err := s.DatastoreType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datastoreType\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "folderInfo":
			if err := func() error {
				s.FolderInfo.Reset()
				if err := s.FolderInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"folderInfo\"")
			}
		case "generation":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.Generation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"generation\"")
			}
		case "hciClusterUuid":
			if err := func() error {
				s.HciClusterUuid.Reset()
				if err := s.HciClusterUuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hciClusterUuid\"")
			}
		case "hostsInfo":
			if err := func() error {
				s.HostsInfo = make([]DatastoreHostsInfoItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem DatastoreHostsInfoItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HostsInfo = append(s.HostsInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostsInfo\"")
			}
		case "hypervisorManagerInfo":
			if err := func() error {
				s.HypervisorManagerInfo.Reset()
				if err := s.HypervisorManagerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hypervisorManagerInfo\"")
			}
		case "id":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "protectionJobInfo":
			if err := func() error {
				s.ProtectionJobInfo.Reset()
				if err := s.ProtectionJobInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionJobInfo\"")
			}
		case "protectionPolicyAppliedAtInfo":
			if err := func() error {
				s.ProtectionPolicyAppliedAtInfo.Reset()
				if err := s.ProtectionPolicyAppliedAtInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionPolicyAppliedAtInfo\"")
			}
		case "protectionStatus":
			if err := func() error {
				s.ProtectionStatus.Reset()
				if err := s.ProtectionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionStatus\"")
			}
		case "provisioningPolicyInfo":
			if err := func() error {
				s.ProvisioningPolicyInfo.Reset()
				if err := s.ProvisioningPolicyInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provisioningPolicyInfo\"")
			}
		case "recoveryPointsExist":
			if err := func() error {
				s.RecoveryPointsExist.Reset()
				if err := s.RecoveryPointsExist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recoveryPointsExist\"")
			}
		case "replicationInfo":
			if err := func() error {
				s.ReplicationInfo.Reset()
				if err := s.ReplicationInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"replicationInfo\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "services":
			if err := func() error {
				if err := s.Services.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"services\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "stateReason":
			if err := func() error {
				s.StateReason.Reset()
				if err := s.StateReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stateReason\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "type":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "updatedAt":
			requiredBitSet[4] |= 1 << 1
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.UpdatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		case "vmCount":
			if err := func() error {
				s.VmCount.Reset()
				if err := s.VmCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmCount\"")
			}
		case "vmProtectionGroupsInfo":
			if err := func() error {
				s.VmProtectionGroupsInfo = make([]VmProtectionGroupInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VmProtectionGroupInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VmProtectionGroupsInfo = append(s.VmProtectionGroupsInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmProtectionGroupsInfo\"")
			}
		case "volumesInfo":
			if err := func() error {
				s.VolumesInfo = make([]VolumeInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VolumeInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VolumesInfo = append(s.VolumesInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volumesInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Datastore")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b01000000,
		0b00100000,
		0b00000010,
		0b10000000,
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDatastore) {
					name = jsonFieldsNameOfDatastore[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Datastore) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Datastore) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreAllowedOperationsItem as json.
func (s DatastoreAllowedOperationsItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreAllowedOperationsItem from json.
func (s *DatastoreAllowedOperationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreAllowedOperationsItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreAllowedOperationsItem(v) {
	case DatastoreAllowedOperationsItemDATASTORECREATE:
		*s = DatastoreAllowedOperationsItemDATASTORECREATE
	case DatastoreAllowedOperationsItemDATASTOREDELETE:
		*s = DatastoreAllowedOperationsItemDATASTOREDELETE
	case DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE
	case DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE
	case DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE
	case DatastoreAllowedOperationsItemDATASTORERESTORE:
		*s = DatastoreAllowedOperationsItemDATASTORERESTORE
	default:
		*s = DatastoreAllowedOperationsItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreAllowedOperationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreAllowedOperationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreAppType as json.
func (s DatastoreAppType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreAppType from json.
func (s *DatastoreAppType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreAppType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreAppType(v) {
	case DatastoreAppTypeVMWARE:
		*s = DatastoreAppTypeVMWARE
	default:
		*s = DatastoreAppType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreAppType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreAppType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatastoreClusterInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatastoreClusterInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatastoreClusterInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes DatastoreClusterInfo from json.
func (s *DatastoreClusterInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreClusterInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatastoreClusterInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreClusterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreClusterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreDatastoreClassification as json.
func (s DatastoreDatastoreClassification) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreDatastoreClassification from json.
func (s *DatastoreDatastoreClassification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreDatastoreClassification to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreDatastoreClassification(v) {
	case DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY:
		*s = DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY
	default:
		*s = DatastoreDatastoreClassification(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreDatastoreClassification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreDatastoreClassification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreDatastoreType as json.
func (s DatastoreDatastoreType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreDatastoreType from json.
func (s *DatastoreDatastoreType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreDatastoreType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreDatastoreType(v) {
	case DatastoreDatastoreTypeVMFS:
		*s = DatastoreDatastoreTypeVMFS
	case DatastoreDatastoreTypeVVOL:
		*s = DatastoreDatastoreTypeVVOL
	case DatastoreDatastoreTypeNFS:
		*s = DatastoreDatastoreTypeNFS
	case DatastoreDatastoreTypeVSAN:
		*s = DatastoreDatastoreTypeVSAN
	default:
		*s = DatastoreDatastoreType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreDatastoreType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreDatastoreType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatastoreFolderInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatastoreFolderInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatastoreFolderInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes DatastoreFolderInfo from json.
func (s *DatastoreFolderInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreFolderInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatastoreFolderInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreForbidden as json.
func (s *DatastoreForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes DatastoreForbidden from json.
func (s *DatastoreForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreForbidden to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DatastoreForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatastoreHostsInfoItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatastoreHostsInfoItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatastoreHostsInfoItem = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes DatastoreHostsInfoItem from json.
func (s *DatastoreHostsInfoItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreHostsInfoItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatastoreHostsInfoItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreHostsInfoItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreHostsInfoItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DatastoreHypervisorManagerInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DatastoreHypervisorManagerInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfDatastoreHypervisorManagerInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes DatastoreHypervisorManagerInfo from json.
func (s *DatastoreHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreHypervisorManagerInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DatastoreHypervisorManagerInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreInternalServerError as json.
func (s *DatastoreInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes DatastoreInternalServerError from json.
func (s *DatastoreInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DatastoreInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreNotFound as json.
func (s *DatastoreNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes DatastoreNotFound from json.
func (s *DatastoreNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreNotFound to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DatastoreNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreState as json.
func (s DatastoreState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreState from json.
func (s *DatastoreState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreState(v) {
	case DatastoreStateOK:
		*s = DatastoreStateOK
	case DatastoreStateERROR:
		*s = DatastoreStateERROR
	case DatastoreStateCREATING:
		*s = DatastoreStateCREATING
	case DatastoreStateDELETING:
		*s = DatastoreStateDELETING
	case DatastoreStateUPDATING:
		*s = DatastoreStateUPDATING
	case DatastoreStateREFRESHING:
		*s = DatastoreStateREFRESHING
	case DatastoreStateRESTORING:
		*s = DatastoreStateRESTORING
	case DatastoreStateMOUNTED:
		*s = DatastoreStateMOUNTED
	case DatastoreStateDELETED:
		*s = DatastoreStateDELETED
	default:
		*s = DatastoreState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreStatus as json.
func (s DatastoreStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DatastoreStatus from json.
func (s *DatastoreStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DatastoreStatus(v) {
	case DatastoreStatusOK:
		*s = DatastoreStatusOK
	case DatastoreStatusERROR:
		*s = DatastoreStatusERROR
	case DatastoreStatusWARNING:
		*s = DatastoreStatusWARNING
	default:
		*s = DatastoreStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DatastoreStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreUnauthorized as json.
func (s *DatastoreUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes DatastoreUnauthorized from json.
func (s *DatastoreUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DatastoreUnauthorized to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DatastoreUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DatastoreUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DatastoreUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DisplayName as json.
func (s DisplayName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes DisplayName from json.
func (s *DisplayName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DisplayName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DisplayName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DisplayName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DisplayName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponse) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("debugId")
		e.Str(s.DebugId)
	}
	{
		e.FieldStart("errorCode")
		e.Str(s.ErrorCode)
	}
	{
		e.FieldStart("httpStatusCode")
		e.Int(s.HttpStatusCode)
	}
	{
		e.FieldStart("message")
		e.Str(s.Message)
	}
}

var jsonFieldsNameOfErrorResponse = [4]string{
	0: "debugId",
	1: "errorCode",
	2: "httpStatusCode",
	3: "message",
}

// Decode decodes ErrorResponse from json.
func (s *ErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponse to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "debugId":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.DebugId = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"debugId\"")
			}
		case "errorCode":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ErrorCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errorCode\"")
			}
		case "httpStatusCode":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Int()
				s.HttpStatusCode = int(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"httpStatusCode\"")
			}
		case "message":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Message = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponse")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfErrorResponse) {
					name = jsonFieldsNameOfErrorResponse[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Generation as json.
func (s Generation) Encode(e *jx.Encoder) {
	unwrapped := int64(s)

	e.Int64(unwrapped)
}

// Decode decodes Generation from json.
func (s *Generation) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Generation to nil")
	}
	var unwrapped int64
	if err := func() error {
		v, err := d.Int64()
		unwrapped = int64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Generation(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Generation) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Generation) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetImageForbidden as json.
func (s *GetImageForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetImageForbidden from json.
func (s *GetImageForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImageForbidden to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetImageForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetImageForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetImageForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetImageInternalServerError as json.
func (s *GetImageInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetImageInternalServerError from json.
func (s *GetImageInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImageInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetImageInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetImageInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetImageInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetImageNotFound as json.
func (s *GetImageNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetImageNotFound from json.
func (s *GetImageNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImageNotFound to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetImageNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetImageNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetImageNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetImageUnauthorized as json.
func (s *GetImageUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetImageUnauthorized from json.
func (s *GetImageUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetImageUnauthorized to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetImageUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetImageUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetImageUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVmForbidden as json.
func (s *GetVmForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetVmForbidden from json.
func (s *GetVmForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVmForbidden to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetVmForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVmForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVmForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVmInternalServerError as json.
func (s *GetVmInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetVmInternalServerError from json.
func (s *GetVmInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVmInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetVmInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVmInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVmInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVmNotFound as json.
func (s *GetVmNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetVmNotFound from json.
func (s *GetVmNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVmNotFound to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetVmNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVmNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVmNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GetVmUnauthorized as json.
func (s *GetVmUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes GetVmUnauthorized from json.
func (s *GetVmUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GetVmUnauthorized to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = GetVmUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GetVmUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GetVmUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HostNetworkSystem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HostNetworkSystem) encodeFields(e *jx.Encoder) {
	{
		if s.PortGroups != nil {
			e.FieldStart("portGroups")
			e.ArrStart()
			for _, elem := range s.PortGroups {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfHostNetworkSystem = [1]string{
	0: "portGroups",
}

// Decode decodes HostNetworkSystem from json.
func (s *HostNetworkSystem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HostNetworkSystem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "portGroups":
			if err := func() error {
				s.PortGroups = make([]PortGroup, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PortGroup
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PortGroups = append(s.PortGroups, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"portGroups\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HostNetworkSystem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HostNetworkSystem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HostNetworkSystem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorCluster) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorCluster) encodeFields(e *jx.Encoder) {
	{
		if s.AppInfo.Set {
			e.FieldStart("appInfo")
			s.AppInfo.Encode(e)
		}
	}
	{
		if s.ClusterPerfMetricInfo.Set {
			e.FieldStart("clusterPerfMetricInfo")
			s.ClusterPerfMetricInfo.Encode(e)
		}
	}
	{
		if s.ClusterType.Set {
			e.FieldStart("clusterType")
			s.ClusterType.Encode(e)
		}
	}
	{
		e.FieldStart("createdAt")
		json.EncodeDateTime(e, s.CreatedAt)
	}
	{
		if s.CustomerId.Set {
			e.FieldStart("customerId")
			s.CustomerId.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		e.FieldStart("generation")
		s.Generation.Encode(e)
	}
	{
		if s.HciClusterUuid.Set {
			e.FieldStart("hciClusterUuid")
			s.HciClusterUuid.Encode(e)
		}
	}
	{
		if s.HypervisorHosts != nil {
			e.FieldStart("hypervisorHosts")
			e.ArrStart()
			for _, elem := range s.HypervisorHosts {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.HypervisorManagerInfo.Set {
			e.FieldStart("hypervisorManagerInfo")
			s.HypervisorManagerInfo.Encode(e)
		}
	}
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworksInfo != nil {
			e.FieldStart("networksInfo")
			e.ArrStart()
			for _, elem := range s.NetworksInfo {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Services != nil {
			e.FieldStart("services")
			s.Services.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StateReason.Set {
			e.FieldStart("stateReason")
			s.StateReason.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		s.Type.Encode(e)
	}
	{
		e.FieldStart("updatedAt")
		json.EncodeDateTime(e, s.UpdatedAt)
	}
}

var jsonFieldsNameOfHypervisorCluster = [20]string{
	0:  "appInfo",
	1:  "clusterPerfMetricInfo",
	2:  "clusterType",
	3:  "createdAt",
	4:  "customerId",
	5:  "displayName",
	6:  "generation",
	7:  "hciClusterUuid",
	8:  "hypervisorHosts",
	9:  "hypervisorManagerInfo",
	10: "id",
	11: "name",
	12: "networksInfo",
	13: "resourceUri",
	14: "services",
	15: "state",
	16: "stateReason",
	17: "status",
	18: "type",
	19: "updatedAt",
}

// Decode decodes HypervisorCluster from json.
func (s *HypervisorCluster) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorCluster to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "appInfo":
			if err := func() error {
				s.AppInfo.Reset()
				if err := s.AppInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appInfo\"")
			}
		case "clusterPerfMetricInfo":
			if err := func() error {
				s.ClusterPerfMetricInfo.Reset()
				if err := s.ClusterPerfMetricInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clusterPerfMetricInfo\"")
			}
		case "clusterType":
			if err := func() error {
				s.ClusterType.Reset()
				if err := s.ClusterType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clusterType\"")
			}
		case "createdAt":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.CreatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdAt\"")
			}
		case "customerId":
			if err := func() error {
				s.CustomerId.Reset()
				if err := s.CustomerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerId\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "generation":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.Generation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"generation\"")
			}
		case "hciClusterUuid":
			if err := func() error {
				s.HciClusterUuid.Reset()
				if err := s.HciClusterUuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hciClusterUuid\"")
			}
		case "hypervisorHosts":
			if err := func() error {
				s.HypervisorHosts = make([]HypervisorClusterHypervisorHostsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem HypervisorClusterHypervisorHostsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.HypervisorHosts = append(s.HypervisorHosts, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hypervisorHosts\"")
			}
		case "hypervisorManagerInfo":
			if err := func() error {
				s.HypervisorManagerInfo.Reset()
				if err := s.HypervisorManagerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hypervisorManagerInfo\"")
			}
		case "id":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "networksInfo":
			if err := func() error {
				s.NetworksInfo = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.NetworksInfo = append(s.NetworksInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networksInfo\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "services":
			if err := func() error {
				if err := s.Services.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"services\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "stateReason":
			if err := func() error {
				s.StateReason.Reset()
				if err := s.StateReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stateReason\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "type":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "updatedAt":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.UpdatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorCluster")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b01001000,
		0b00000100,
		0b00001100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfHypervisorCluster) {
					name = jsonFieldsNameOfHypervisorCluster[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorCluster) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorCluster) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorClusterAppInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorClusterAppInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Vmware.Set {
			e.FieldStart("vmware")
			s.Vmware.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorClusterAppInfo = [1]string{
	0: "vmware",
}

// Decode decodes HypervisorClusterAppInfo from json.
func (s *HypervisorClusterAppInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterAppInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vmware":
			if err := func() error {
				s.Vmware.Reset()
				if err := s.Vmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmware\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorClusterAppInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorClusterAppInfoVmware) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorClusterAppInfoVmware) encodeFields(e *jx.Encoder) {
	{
		if s.DatacenterInfo.Set {
			e.FieldStart("datacenterInfo")
			s.DatacenterInfo.Encode(e)
		}
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorClusterAppInfoVmware = [2]string{
	0: "datacenterInfo",
	1: "moref",
}

// Decode decodes HypervisorClusterAppInfoVmware from json.
func (s *HypervisorClusterAppInfoVmware) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterAppInfoVmware to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "datacenterInfo":
			if err := func() error {
				s.DatacenterInfo.Reset()
				if err := s.DatacenterInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datacenterInfo\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorClusterAppInfoVmware")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorClusterClusterPerfMetricInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorClusterClusterPerfMetricInfo) encodeFields(e *jx.Encoder) {
	{
		if s.CpuCapacityInMhz.Set {
			e.FieldStart("cpuCapacityInMhz")
			s.CpuCapacityInMhz.Encode(e)
		}
	}
	{
		if s.CpuUsageInMhz.Set {
			e.FieldStart("cpuUsageInMhz")
			s.CpuUsageInMhz.Encode(e)
		}
	}
	{
		if s.MemorySizeInBytes.Set {
			e.FieldStart("memorySizeInBytes")
			s.MemorySizeInBytes.Encode(e)
		}
	}
	{
		if s.MemoryUsageInMb.Set {
			e.FieldStart("memoryUsageInMb")
			s.MemoryUsageInMb.Encode(e)
		}
	}
	{
		if s.TotalStorageInBytes.Set {
			e.FieldStart("totalStorageInBytes")
			s.TotalStorageInBytes.Encode(e)
		}
	}
	{
		if s.UsedStorageInBytes.Set {
			e.FieldStart("usedStorageInBytes")
			s.UsedStorageInBytes.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorClusterClusterPerfMetricInfo = [6]string{
	0: "cpuCapacityInMhz",
	1: "cpuUsageInMhz",
	2: "memorySizeInBytes",
	3: "memoryUsageInMb",
	4: "totalStorageInBytes",
	5: "usedStorageInBytes",
}

// Decode decodes HypervisorClusterClusterPerfMetricInfo from json.
func (s *HypervisorClusterClusterPerfMetricInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterClusterPerfMetricInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cpuCapacityInMhz":
			if err := func() error {
				s.CpuCapacityInMhz.Reset()
				if err := s.CpuCapacityInMhz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuCapacityInMhz\"")
			}
		case "cpuUsageInMhz":
			if err := func() error {
				s.CpuUsageInMhz.Reset()
				if err := s.CpuUsageInMhz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuUsageInMhz\"")
			}
		case "memorySizeInBytes":
			if err := func() error {
				s.MemorySizeInBytes.Reset()
				if err := s.MemorySizeInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memorySizeInBytes\"")
			}
		case "memoryUsageInMb":
			if err := func() error {
				s.MemoryUsageInMb.Reset()
				if err := s.MemoryUsageInMb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memoryUsageInMb\"")
			}
		case "totalStorageInBytes":
			if err := func() error {
				s.TotalStorageInBytes.Reset()
				if err := s.TotalStorageInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalStorageInBytes\"")
			}
		case "usedStorageInBytes":
			if err := func() error {
				s.UsedStorageInBytes.Reset()
				if err := s.UsedStorageInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usedStorageInBytes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorClusterClusterPerfMetricInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterClusterPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterClusterPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterClusterType as json.
func (s HypervisorClusterClusterType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorClusterClusterType from json.
func (s *HypervisorClusterClusterType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterClusterType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorClusterClusterType(v) {
	case HypervisorClusterClusterTypeESXCLUSTER:
		*s = HypervisorClusterClusterTypeESXCLUSTER
	default:
		*s = HypervisorClusterClusterType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorClusterClusterType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterClusterType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterForbidden as json.
func (s *HypervisorClusterForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorClusterForbidden from json.
func (s *HypervisorClusterForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterForbidden to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorClusterForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorClusterHypervisorHostsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorClusterHypervisorHostsItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorClusterHypervisorHostsItem = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes HypervisorClusterHypervisorHostsItem from json.
func (s *HypervisorClusterHypervisorHostsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterHypervisorHostsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorClusterHypervisorHostsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterHypervisorHostsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterHypervisorHostsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorClusterHypervisorManagerInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorClusterHypervisorManagerInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorClusterHypervisorManagerInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes HypervisorClusterHypervisorManagerInfo from json.
func (s *HypervisorClusterHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterHypervisorManagerInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorClusterHypervisorManagerInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterInternalServerError as json.
func (s *HypervisorClusterInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorClusterInternalServerError from json.
func (s *HypervisorClusterInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorClusterInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterNotFound as json.
func (s *HypervisorClusterNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorClusterNotFound from json.
func (s *HypervisorClusterNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterNotFound to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorClusterNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterState as json.
func (s HypervisorClusterState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorClusterState from json.
func (s *HypervisorClusterState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorClusterState(v) {
	case HypervisorClusterStateOK:
		*s = HypervisorClusterStateOK
	case HypervisorClusterStateERROR:
		*s = HypervisorClusterStateERROR
	case HypervisorClusterStateREFRESHING:
		*s = HypervisorClusterStateREFRESHING
	default:
		*s = HypervisorClusterState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorClusterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterStatus as json.
func (s HypervisorClusterStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorClusterStatus from json.
func (s *HypervisorClusterStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorClusterStatus(v) {
	case HypervisorClusterStatusOK:
		*s = HypervisorClusterStatusOK
	case HypervisorClusterStatusERROR:
		*s = HypervisorClusterStatusERROR
	case HypervisorClusterStatusWARNING:
		*s = HypervisorClusterStatusWARNING
	default:
		*s = HypervisorClusterStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorClusterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterUnauthorized as json.
func (s *HypervisorClusterUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorClusterUnauthorized from json.
func (s *HypervisorClusterUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorClusterUnauthorized to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorClusterUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorClusterUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorClusterUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHost) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHost) encodeFields(e *jx.Encoder) {
	{
		if s.AppInfo.Set {
			e.FieldStart("appInfo")
			s.AppInfo.Encode(e)
		}
	}
	{
		if s.CpuInfo.Set {
			e.FieldStart("cpuInfo")
			s.CpuInfo.Encode(e)
		}
	}
	{
		if s.CpuSockets != nil {
			e.FieldStart("cpuSockets")
			e.ArrStart()
			for _, elem := range s.CpuSockets {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		e.FieldStart("createdAt")
		json.EncodeDateTime(e, s.CreatedAt)
	}
	{
		if s.CustomerId.Set {
			e.FieldStart("customerId")
			s.CustomerId.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		e.FieldStart("generation")
		s.Generation.Encode(e)
	}
	{
		if s.HciClusterUuid.Set {
			e.FieldStart("hciClusterUuid")
			s.HciClusterUuid.Encode(e)
		}
	}
	{
		if s.HciServerUuid.Set {
			e.FieldStart("hciServerUuid")
			s.HciServerUuid.Encode(e)
		}
	}
	{
		if s.HostNetworkSystem.Set {
			e.FieldStart("hostNetworkSystem")
			s.HostNetworkSystem.Encode(e)
		}
	}
	{
		if s.HostPerfMetricInfo.Set {
			e.FieldStart("hostPerfMetricInfo")
			s.HostPerfMetricInfo.Encode(e)
		}
	}
	{
		if s.HostType.Set {
			e.FieldStart("hostType")
			s.HostType.Encode(e)
		}
	}
	{
		if s.HypervisorManagerInfo.Set {
			e.FieldStart("hypervisorManagerInfo")
			s.HypervisorManagerInfo.Encode(e)
		}
	}
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkAddress.Set {
			e.FieldStart("networkAddress")
			s.NetworkAddress.Encode(e)
		}
	}
	{
		if s.NetworksInfo != nil {
			e.FieldStart("networksInfo")
			e.ArrStart()
			for _, elem := range s.NetworksInfo {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ParentInfo.Set {
			e.FieldStart("parentInfo")
			s.ParentInfo.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Services != nil {
			e.FieldStart("services")
			s.Services.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StateReason.Set {
			e.FieldStart("stateReason")
			s.StateReason.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StorageAdaptersInfo != nil {
			e.FieldStart("storageAdaptersInfo")
			e.ArrStart()
			for _, elem := range s.StorageAdaptersInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		e.FieldStart("type")
		s.Type.Encode(e)
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		e.FieldStart("updatedAt")
		json.EncodeDateTime(e, s.UpdatedAt)
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHost = [28]string{
	0:  "appInfo",
	1:  "cpuInfo",
	2:  "cpuSockets",
	3:  "createdAt",
	4:  "customerId",
	5:  "displayName",
	6:  "generation",
	7:  "hciClusterUuid",
	8:  "hciServerUuid",
	9:  "hostNetworkSystem",
	10: "hostPerfMetricInfo",
	11: "hostType",
	12: "hypervisorManagerInfo",
	13: "id",
	14: "name",
	15: "networkAddress",
	16: "networksInfo",
	17: "parentInfo",
	18: "resourceUri",
	19: "services",
	20: "state",
	21: "stateReason",
	22: "status",
	23: "storageAdaptersInfo",
	24: "type",
	25: "uid",
	26: "updatedAt",
	27: "version",
}

// Decode decodes HypervisorHost from json.
func (s *HypervisorHost) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHost to nil")
	}
	var requiredBitSet [4]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "appInfo":
			if err := func() error {
				s.AppInfo.Reset()
				if err := s.AppInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appInfo\"")
			}
		case "cpuInfo":
			if err := func() error {
				s.CpuInfo.Reset()
				if err := s.CpuInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuInfo\"")
			}
		case "cpuSockets":
			if err := func() error {
				s.CpuSockets = make([]CpuSocket, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CpuSocket
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.CpuSockets = append(s.CpuSockets, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuSockets\"")
			}
		case "createdAt":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.CreatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdAt\"")
			}
		case "customerId":
			if err := func() error {
				s.CustomerId.Reset()
				if err := s.CustomerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerId\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "generation":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.Generation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"generation\"")
			}
		case "hciClusterUuid":
			if err := func() error {
				s.HciClusterUuid.Reset()
				if err := s.HciClusterUuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hciClusterUuid\"")
			}
		case "hciServerUuid":
			if err := func() error {
				s.HciServerUuid.Reset()
				if err := s.HciServerUuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hciServerUuid\"")
			}
		case "hostNetworkSystem":
			if err := func() error {
				s.HostNetworkSystem.Reset()
				if err := s.HostNetworkSystem.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostNetworkSystem\"")
			}
		case "hostPerfMetricInfo":
			if err := func() error {
				s.HostPerfMetricInfo.Reset()
				if err := s.HostPerfMetricInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostPerfMetricInfo\"")
			}
		case "hostType":
			if err := func() error {
				s.HostType.Reset()
				if err := s.HostType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostType\"")
			}
		case "hypervisorManagerInfo":
			if err := func() error {
				s.HypervisorManagerInfo.Reset()
				if err := s.HypervisorManagerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hypervisorManagerInfo\"")
			}
		case "id":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "networkAddress":
			if err := func() error {
				s.NetworkAddress.Reset()
				if err := s.NetworkAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkAddress\"")
			}
		case "networksInfo":
			if err := func() error {
				s.NetworksInfo = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.NetworksInfo = append(s.NetworksInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networksInfo\"")
			}
		case "parentInfo":
			if err := func() error {
				s.ParentInfo.Reset()
				if err := s.ParentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"parentInfo\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "services":
			if err := func() error {
				if err := s.Services.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"services\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "stateReason":
			if err := func() error {
				s.StateReason.Reset()
				if err := s.StateReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stateReason\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "storageAdaptersInfo":
			if err := func() error {
				s.StorageAdaptersInfo = make([]HypervisorHostStorageAdaptersInfoItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem HypervisorHostStorageAdaptersInfoItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.StorageAdaptersInfo = append(s.StorageAdaptersInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storageAdaptersInfo\"")
			}
		case "type":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "updatedAt":
			requiredBitSet[3] |= 1 << 2
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.UpdatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHost")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [4]uint8{
		0b01001000,
		0b00100000,
		0b00000000,
		0b00000101,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfHypervisorHost) {
					name = jsonFieldsNameOfHypervisorHost[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHost) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHost) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostAppInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostAppInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Vmware.Set {
			e.FieldStart("vmware")
			s.Vmware.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostAppInfo = [1]string{
	0: "vmware",
}

// Decode decodes HypervisorHostAppInfo from json.
func (s *HypervisorHostAppInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostAppInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vmware":
			if err := func() error {
				s.Vmware.Reset()
				if err := s.Vmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmware\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostAppInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostAppInfoVmware) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostAppInfoVmware) encodeFields(e *jx.Encoder) {
	{
		if s.DatacenterInfo.Set {
			e.FieldStart("datacenterInfo")
			s.DatacenterInfo.Encode(e)
		}
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostAppInfoVmware = [2]string{
	0: "datacenterInfo",
	1: "moref",
}

// Decode decodes HypervisorHostAppInfoVmware from json.
func (s *HypervisorHostAppInfoVmware) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostAppInfoVmware to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "datacenterInfo":
			if err := func() error {
				s.DatacenterInfo.Reset()
				if err := s.DatacenterInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datacenterInfo\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostAppInfoVmware")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostForbidden as json.
func (s *HypervisorHostForbidden) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorHostForbidden from json.
func (s *HypervisorHostForbidden) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostForbidden to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorHostForbidden(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostForbidden) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostForbidden) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostHostPerfMetricInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostHostPerfMetricInfo) encodeFields(e *jx.Encoder) {
	{
		if s.CpuCapacityInHz.Set {
			e.FieldStart("cpuCapacityInHz")
			s.CpuCapacityInHz.Encode(e)
		}
	}
	{
		if s.CpuUsageInMhz.Set {
			e.FieldStart("cpuUsageInMhz")
			s.CpuUsageInMhz.Encode(e)
		}
	}
	{
		if s.MemorySizeInBytes.Set {
			e.FieldStart("memorySizeInBytes")
			s.MemorySizeInBytes.Encode(e)
		}
	}
	{
		if s.MemoryUsageInMb.Set {
			e.FieldStart("memoryUsageInMb")
			s.MemoryUsageInMb.Encode(e)
		}
	}
	{
		if s.TotalStorageInBytes.Set {
			e.FieldStart("totalStorageInBytes")
			s.TotalStorageInBytes.Encode(e)
		}
	}
	{
		if s.UsedStorageInBytes.Set {
			e.FieldStart("usedStorageInBytes")
			s.UsedStorageInBytes.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostHostPerfMetricInfo = [6]string{
	0: "cpuCapacityInHz",
	1: "cpuUsageInMhz",
	2: "memorySizeInBytes",
	3: "memoryUsageInMb",
	4: "totalStorageInBytes",
	5: "usedStorageInBytes",
}

// Decode decodes HypervisorHostHostPerfMetricInfo from json.
func (s *HypervisorHostHostPerfMetricInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostHostPerfMetricInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cpuCapacityInHz":
			if err := func() error {
				s.CpuCapacityInHz.Reset()
				if err := s.CpuCapacityInHz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuCapacityInHz\"")
			}
		case "cpuUsageInMhz":
			if err := func() error {
				s.CpuUsageInMhz.Reset()
				if err := s.CpuUsageInMhz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuUsageInMhz\"")
			}
		case "memorySizeInBytes":
			if err := func() error {
				s.MemorySizeInBytes.Reset()
				if err := s.MemorySizeInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memorySizeInBytes\"")
			}
		case "memoryUsageInMb":
			if err := func() error {
				s.MemoryUsageInMb.Reset()
				if err := s.MemoryUsageInMb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memoryUsageInMb\"")
			}
		case "totalStorageInBytes":
			if err := func() error {
				s.TotalStorageInBytes.Reset()
				if err := s.TotalStorageInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalStorageInBytes\"")
			}
		case "usedStorageInBytes":
			if err := func() error {
				s.UsedStorageInBytes.Reset()
				if err := s.UsedStorageInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usedStorageInBytes\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostHostPerfMetricInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostHostPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostHostPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostHostType as json.
func (s HypervisorHostHostType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorHostHostType from json.
func (s *HypervisorHostHostType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostHostType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorHostHostType(v) {
	case HypervisorHostHostTypeESXI:
		*s = HypervisorHostHostTypeESXI
	default:
		*s = HypervisorHostHostType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorHostHostType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostHostType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostHypervisorManagerInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostHypervisorManagerInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostHypervisorManagerInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes HypervisorHostHypervisorManagerInfo from json.
func (s *HypervisorHostHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostHypervisorManagerInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostHypervisorManagerInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostInternalServerError as json.
func (s *HypervisorHostInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorHostInternalServerError from json.
func (s *HypervisorHostInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorHostInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostNotFound as json.
func (s *HypervisorHostNotFound) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorHostNotFound from json.
func (s *HypervisorHostNotFound) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostNotFound to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorHostNotFound(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostNotFound) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostNotFound) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostParentInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostParentInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostParentInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes HypervisorHostParentInfo from json.
func (s *HypervisorHostParentInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostParentInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostParentInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostParentInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostParentInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostParentInfoType as json.
func (s HypervisorHostParentInfoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorHostParentInfoType from json.
func (s *HypervisorHostParentInfoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostParentInfoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorHostParentInfoType(v) {
	case HypervisorHostParentInfoTypeCLUSTER:
		*s = HypervisorHostParentInfoTypeCLUSTER
	case HypervisorHostParentInfoTypeFOLDER:
		*s = HypervisorHostParentInfoTypeFOLDER
	default:
		*s = HypervisorHostParentInfoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorHostParentInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostParentInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostState as json.
func (s HypervisorHostState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorHostState from json.
func (s *HypervisorHostState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorHostState(v) {
	case HypervisorHostStateOK:
		*s = HypervisorHostStateOK
	case HypervisorHostStateERROR:
		*s = HypervisorHostStateERROR
	case HypervisorHostStateREFRESHING:
		*s = HypervisorHostStateREFRESHING
	default:
		*s = HypervisorHostState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorHostState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostStatus as json.
func (s HypervisorHostStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorHostStatus from json.
func (s *HypervisorHostStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorHostStatus(v) {
	case HypervisorHostStatusOK:
		*s = HypervisorHostStatusOK
	case HypervisorHostStatusERROR:
		*s = HypervisorHostStatusERROR
	case HypervisorHostStatusWARNING:
		*s = HypervisorHostStatusWARNING
	default:
		*s = HypervisorHostStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorHostStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *HypervisorHostStorageAdaptersInfoItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *HypervisorHostStorageAdaptersInfoItem) encodeFields(e *jx.Encoder) {
	{
		if s.Model.Set {
			e.FieldStart("model")
			s.Model.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Wwn.Set {
			e.FieldStart("wwn")
			s.Wwn.Encode(e)
		}
	}
}

var jsonFieldsNameOfHypervisorHostStorageAdaptersInfoItem = [5]string{
	0: "model",
	1: "name",
	2: "status",
	3: "type",
	4: "wwn",
}

// Decode decodes HypervisorHostStorageAdaptersInfoItem from json.
func (s *HypervisorHostStorageAdaptersInfoItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostStorageAdaptersInfoItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "model":
			if err := func() error {
				s.Model.Reset()
				if err := s.Model.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"model\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "wwn":
			if err := func() error {
				s.Wwn.Reset()
				if err := s.Wwn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"wwn\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode HypervisorHostStorageAdaptersInfoItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostStorageAdaptersInfoItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostStorageAdaptersInfoItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostStorageAdaptersInfoItemStatus as json.
func (s HypervisorHostStorageAdaptersInfoItemStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes HypervisorHostStorageAdaptersInfoItemStatus from json.
func (s *HypervisorHostStorageAdaptersInfoItemStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostStorageAdaptersInfoItemStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch HypervisorHostStorageAdaptersInfoItemStatus(v) {
	case HypervisorHostStorageAdaptersInfoItemStatusOFFLINE:
		*s = HypervisorHostStorageAdaptersInfoItemStatusOFFLINE
	case HypervisorHostStorageAdaptersInfoItemStatusONLINE:
		*s = HypervisorHostStorageAdaptersInfoItemStatusONLINE
	case HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN:
		*s = HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN
	default:
		*s = HypervisorHostStorageAdaptersInfoItemStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HypervisorHostStorageAdaptersInfoItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostStorageAdaptersInfoItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostUnauthorized as json.
func (s *HypervisorHostUnauthorized) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes HypervisorHostUnauthorized from json.
func (s *HypervisorHostUnauthorized) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HypervisorHostUnauthorized to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HypervisorHostUnauthorized(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *HypervisorHostUnauthorized) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HypervisorHostUnauthorized) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (s ID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ID from json.
func (s *ID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Image) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Image) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("type")
		e.Str(s.Type)
	}
}

var jsonFieldsNameOfImage = [3]string{
	0: "id",
	1: "name",
	2: "type",
}

// Decode decodes Image from json.
func (s *Image) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Image to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "type":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Type = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Image")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfImage) {
					name = jsonFieldsNameOfImage[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Image) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Image) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (s Name) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Name from json.
func (s *Name) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Name to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Name(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Name) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Name) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NicTeamingPolicy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NicTeamingPolicy) encodeFields(e *jx.Encoder) {
	{
		if s.ActiveNics != nil {
			e.FieldStart("activeNics")
			e.ArrStart()
			for _, elem := range s.ActiveNics {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NotifySwitches.Set {
			e.FieldStart("notifySwitches")
			s.NotifySwitches.Encode(e)
		}
	}
	{
		if s.PolicyName.Set {
			e.FieldStart("policyName")
			s.PolicyName.Encode(e)
		}
	}
	{
		if s.RollingOrder.Set {
			e.FieldStart("rollingOrder")
			s.RollingOrder.Encode(e)
		}
	}
	{
		if s.UseBeaconProbing.Set {
			e.FieldStart("useBeaconProbing")
			s.UseBeaconProbing.Encode(e)
		}
	}
}

var jsonFieldsNameOfNicTeamingPolicy = [5]string{
	0: "activeNics",
	1: "notifySwitches",
	2: "policyName",
	3: "rollingOrder",
	4: "useBeaconProbing",
}

// Decode decodes NicTeamingPolicy from json.
func (s *NicTeamingPolicy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NicTeamingPolicy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "activeNics":
			if err := func() error {
				s.ActiveNics = make([]NicTeamingPolicyActiveNicsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem NicTeamingPolicyActiveNicsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ActiveNics = append(s.ActiveNics, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"activeNics\"")
			}
		case "notifySwitches":
			if err := func() error {
				s.NotifySwitches.Reset()
				if err := s.NotifySwitches.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"notifySwitches\"")
			}
		case "policyName":
			if err := func() error {
				s.PolicyName.Reset()
				if err := s.PolicyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"policyName\"")
			}
		case "rollingOrder":
			if err := func() error {
				s.RollingOrder.Reset()
				if err := s.RollingOrder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"rollingOrder\"")
			}
		case "useBeaconProbing":
			if err := func() error {
				s.UseBeaconProbing.Reset()
				if err := s.UseBeaconProbing.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"useBeaconProbing\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NicTeamingPolicy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NicTeamingPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NicTeamingPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NicTeamingPolicyActiveNicsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NicTeamingPolicyActiveNicsItem) encodeFields(e *jx.Encoder) {
	{
		if s.Device.Set {
			e.FieldStart("device")
			s.Device.Encode(e)
		}
	}
}

var jsonFieldsNameOfNicTeamingPolicyActiveNicsItem = [1]string{
	0: "device",
}

// Decode decodes NicTeamingPolicyActiveNicsItem from json.
func (s *NicTeamingPolicyActiveNicsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NicTeamingPolicyActiveNicsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "device":
			if err := func() error {
				s.Device.Reset()
				if err := s.Device.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NicTeamingPolicyActiveNicsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NicTeamingPolicyActiveNicsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NicTeamingPolicyActiveNicsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CpuInfo as json.
func (o OptCpuInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CpuInfo from json.
func (o *OptCpuInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCpuInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCpuInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCpuInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataManagementJobInfo as json.
func (o OptDataManagementJobInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataManagementJobInfo from json.
func (o *OptDataManagementJobInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDataManagementJobInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDataManagementJobInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDataManagementJobInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DataManagementTemplateInfo as json.
func (o OptDataManagementTemplateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DataManagementTemplateInfo from json.
func (o *OptDataManagementTemplateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDataManagementTemplateInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDataManagementTemplateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDataManagementTemplateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatacenterInfo as json.
func (o OptDatacenterInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatacenterInfo from json.
func (o *OptDatacenterInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatacenterInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatacenterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatacenterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreAppType as json.
func (o OptDatastoreAppType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DatastoreAppType from json.
func (o *OptDatastoreAppType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreAppType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreAppType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreAppType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreClusterInfo as json.
func (o OptDatastoreClusterInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatastoreClusterInfo from json.
func (o *OptDatastoreClusterInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreClusterInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreClusterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreClusterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreDatastoreClassification as json.
func (o OptDatastoreDatastoreClassification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DatastoreDatastoreClassification from json.
func (o *OptDatastoreDatastoreClassification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreDatastoreClassification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreDatastoreClassification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreDatastoreClassification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreDatastoreType as json.
func (o OptDatastoreDatastoreType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DatastoreDatastoreType from json.
func (o *OptDatastoreDatastoreType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreDatastoreType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreDatastoreType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreDatastoreType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreFolderInfo as json.
func (o OptDatastoreFolderInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatastoreFolderInfo from json.
func (o *OptDatastoreFolderInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreFolderInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreHypervisorManagerInfo as json.
func (o OptDatastoreHypervisorManagerInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DatastoreHypervisorManagerInfo from json.
func (o *OptDatastoreHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreHypervisorManagerInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreState as json.
func (o OptDatastoreState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DatastoreState from json.
func (o *OptDatastoreState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DatastoreStatus as json.
func (o OptDatastoreStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DatastoreStatus from json.
func (o *OptDatastoreStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDatastoreStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDatastoreStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDatastoreStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DisplayName as json.
func (o OptDisplayName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DisplayName from json.
func (o *OptDisplayName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDisplayName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDisplayName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDisplayName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HostNetworkSystem as json.
func (o OptHostNetworkSystem) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HostNetworkSystem from json.
func (o *OptHostNetworkSystem) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHostNetworkSystem to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHostNetworkSystem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHostNetworkSystem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterAppInfo as json.
func (o OptHypervisorClusterAppInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorClusterAppInfo from json.
func (o *OptHypervisorClusterAppInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterAppInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterAppInfoVmware as json.
func (o OptHypervisorClusterAppInfoVmware) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorClusterAppInfoVmware from json.
func (o *OptHypervisorClusterAppInfoVmware) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterAppInfoVmware to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterClusterPerfMetricInfo as json.
func (o OptHypervisorClusterClusterPerfMetricInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorClusterClusterPerfMetricInfo from json.
func (o *OptHypervisorClusterClusterPerfMetricInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterClusterPerfMetricInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterClusterPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterClusterPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterClusterType as json.
func (o OptHypervisorClusterClusterType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorClusterClusterType from json.
func (o *OptHypervisorClusterClusterType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterClusterType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterClusterType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterClusterType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterHypervisorManagerInfo as json.
func (o OptHypervisorClusterHypervisorManagerInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorClusterHypervisorManagerInfo from json.
func (o *OptHypervisorClusterHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterHypervisorManagerInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterState as json.
func (o OptHypervisorClusterState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorClusterState from json.
func (o *OptHypervisorClusterState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorClusterStatus as json.
func (o OptHypervisorClusterStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorClusterStatus from json.
func (o *OptHypervisorClusterStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorClusterStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorClusterStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorClusterStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostAppInfo as json.
func (o OptHypervisorHostAppInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorHostAppInfo from json.
func (o *OptHypervisorHostAppInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostAppInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostAppInfoVmware as json.
func (o OptHypervisorHostAppInfoVmware) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorHostAppInfoVmware from json.
func (o *OptHypervisorHostAppInfoVmware) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostAppInfoVmware to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostHostPerfMetricInfo as json.
func (o OptHypervisorHostHostPerfMetricInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorHostHostPerfMetricInfo from json.
func (o *OptHypervisorHostHostPerfMetricInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostHostPerfMetricInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostHostPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostHostPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostHostType as json.
func (o OptHypervisorHostHostType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorHostHostType from json.
func (o *OptHypervisorHostHostType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostHostType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostHostType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostHostType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostHypervisorManagerInfo as json.
func (o OptHypervisorHostHypervisorManagerInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorHostHypervisorManagerInfo from json.
func (o *OptHypervisorHostHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostHypervisorManagerInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostParentInfo as json.
func (o OptHypervisorHostParentInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HypervisorHostParentInfo from json.
func (o *OptHypervisorHostParentInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostParentInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostParentInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostParentInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostParentInfoType as json.
func (o OptHypervisorHostParentInfoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorHostParentInfoType from json.
func (o *OptHypervisorHostParentInfoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostParentInfoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostParentInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostParentInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostState as json.
func (o OptHypervisorHostState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorHostState from json.
func (o *OptHypervisorHostState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostStatus as json.
func (o OptHypervisorHostStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorHostStatus from json.
func (o *OptHypervisorHostStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HypervisorHostStorageAdaptersInfoItemStatus as json.
func (o OptHypervisorHostStorageAdaptersInfoItemStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes HypervisorHostStorageAdaptersInfoItemStatus from json.
func (o *OptHypervisorHostStorageAdaptersInfoItemStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptHypervisorHostStorageAdaptersInfoItemStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptHypervisorHostStorageAdaptersInfoItemStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptHypervisorHostStorageAdaptersInfoItemStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (o OptID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ID from json.
func (o *OptID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (o OptName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Name from json.
func (o *OptName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NicTeamingPolicy as json.
func (o OptNicTeamingPolicy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NicTeamingPolicy from json.
func (o *OptNicTeamingPolicy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNicTeamingPolicy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNicTeamingPolicy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNicTeamingPolicy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProtectionPolicyAppliedAtInfo as json.
func (o OptProtectionPolicyAppliedAtInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ProtectionPolicyAppliedAtInfo from json.
func (o *OptProtectionPolicyAppliedAtInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptProtectionPolicyAppliedAtInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptProtectionPolicyAppliedAtInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptProtectionPolicyAppliedAtInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProtectionPolicyAppliedAtInfoType as json.
func (o OptProtectionPolicyAppliedAtInfoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ProtectionPolicyAppliedAtInfoType from json.
func (o *OptProtectionPolicyAppliedAtInfoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptProtectionPolicyAppliedAtInfoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptProtectionPolicyAppliedAtInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptProtectionPolicyAppliedAtInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProtectionStatus as json.
func (o OptProtectionStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ProtectionStatus from json.
func (o *OptProtectionStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptProtectionStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptProtectionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptProtectionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProvisioningPolicyInfo as json.
func (o OptProvisioningPolicyInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ProvisioningPolicyInfo from json.
func (o *OptProvisioningPolicyInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptProvisioningPolicyInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptProvisioningPolicyInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptProvisioningPolicyInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecoveryPointsExist as json.
func (o OptRecoveryPointsExist) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RecoveryPointsExist from json.
func (o *OptRecoveryPointsExist) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRecoveryPointsExist to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRecoveryPointsExist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRecoveryPointsExist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReplicationInfo as json.
func (o OptReplicationInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ReplicationInfo from json.
func (o *OptReplicationInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReplicationInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReplicationInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReplicationInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReplicationPartnerInfoMode as json.
func (o OptReplicationPartnerInfoMode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ReplicationPartnerInfoMode from json.
func (o *OptReplicationPartnerInfoMode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReplicationPartnerInfoMode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReplicationPartnerInfoMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReplicationPartnerInfoMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReplicationPartnerInfoVendorName as json.
func (o OptReplicationPartnerInfoVendorName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ReplicationPartnerInfoVendorName from json.
func (o *OptReplicationPartnerInfoVendorName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReplicationPartnerInfoVendorName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReplicationPartnerInfoVendorName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReplicationPartnerInfoVendorName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StorageFolderInfo as json.
func (o OptStorageFolderInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StorageFolderInfo from json.
func (o *OptStorageFolderInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStorageFolderInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStorageFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStorageFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StoragePoolInfo as json.
func (o OptStoragePoolInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StoragePoolInfo from json.
func (o *OptStoragePoolInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStoragePoolInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStoragePoolInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStoragePoolInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StorageSystemInfo as json.
func (o OptStorageSystemInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StorageSystemInfo from json.
func (o *OptStorageSystemInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStorageSystemInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStorageSystemInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStorageSystemInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StorageSystemInfoType as json.
func (o OptStorageSystemInfoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes StorageSystemInfoType from json.
func (o *OptStorageSystemInfoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStorageSystemInfoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStorageSystemInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStorageSystemInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Type as json.
func (o OptType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Type from json.
func (o *OptType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes uuid.UUID as json.
func (o OptUUID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeUUID(e, o.Value)
}

// Decode decodes uuid.UUID from json.
func (o *OptUUID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUUID to nil")
	}
	o.Set = true
	v, err := json.DecodeUUID(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfo as json.
func (o OptVirtualMachineAppInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineAppInfo from json.
func (o *OptVirtualMachineAppInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmware as json.
func (o OptVirtualMachineAppInfoVmware) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineAppInfoVmware from json.
func (o *OptVirtualMachineAppInfoVmware) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfoVmware to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareResourcePoolInfo as json.
func (o OptVirtualMachineAppInfoVmwareResourcePoolInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineAppInfoVmwareResourcePoolInfo from json.
func (o *OptVirtualMachineAppInfoVmwareResourcePoolInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfoVmwareResourcePoolInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfoVmwareResourcePoolInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfoVmwareResourcePoolInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareToolsInfo as json.
func (o OptVirtualMachineAppInfoVmwareToolsInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineAppInfoVmwareToolsInfo from json.
func (o *OptVirtualMachineAppInfoVmwareToolsInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfoVmwareToolsInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfoVmwareToolsInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfoVmwareToolsInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareToolsInfoStatus as json.
func (o OptVirtualMachineAppInfoVmwareToolsInfoStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineAppInfoVmwareToolsInfoStatus from json.
func (o *OptVirtualMachineAppInfoVmwareToolsInfoStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfoVmwareToolsInfoStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfoVmwareToolsInfoStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfoVmwareToolsInfoStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareType as json.
func (o OptVirtualMachineAppInfoVmwareType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineAppInfoVmwareType from json.
func (o *OptVirtualMachineAppInfoVmwareType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppInfoVmwareType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppInfoVmwareType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppInfoVmwareType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppType as json.
func (o OptVirtualMachineAppType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineAppType from json.
func (o *OptVirtualMachineAppType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineAppType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineAppType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineAppType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineClusterInfo as json.
func (o OptVirtualMachineClusterInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineClusterInfo from json.
func (o *OptVirtualMachineClusterInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineClusterInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineClusterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineClusterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineComputeInfo as json.
func (o OptVirtualMachineComputeInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineComputeInfo from json.
func (o *OptVirtualMachineComputeInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineComputeInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineComputeInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineComputeInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineFolderInfo as json.
func (o OptVirtualMachineFolderInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineFolderInfo from json.
func (o *OptVirtualMachineFolderInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineFolderInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineGuestInfo as json.
func (o OptVirtualMachineGuestInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineGuestInfo from json.
func (o *OptVirtualMachineGuestInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineGuestInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineGuestInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineGuestInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineGuestInfoType as json.
func (o OptVirtualMachineGuestInfoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineGuestInfoType from json.
func (o *OptVirtualMachineGuestInfoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineGuestInfoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineGuestInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineGuestInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineHostInfo as json.
func (o OptVirtualMachineHostInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineHostInfo from json.
func (o *OptVirtualMachineHostInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineHostInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineHostInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineHostInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineHypervisorManagerInfo as json.
func (o OptVirtualMachineHypervisorManagerInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineHypervisorManagerInfo from json.
func (o *OptVirtualMachineHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineHypervisorManagerInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineNetworkAdaptersItemMacAddressType as json.
func (o OptVirtualMachineNetworkAdaptersItemMacAddressType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineNetworkAdaptersItemMacAddressType from json.
func (o *OptVirtualMachineNetworkAdaptersItemMacAddressType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineNetworkAdaptersItemMacAddressType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineNetworkAdaptersItemMacAddressType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineNetworkAdaptersItemMacAddressType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineNetworkAdaptersItemNetworkDetails as json.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineNetworkAdaptersItemNetworkDetails from json.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineNetworkAdaptersItemNetworkDetails to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineNetworkAdaptersItemNetworkDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineNetworkAdaptersItemNetworkDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineNetworkAdaptersItemNetworkDetailsState as json.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineNetworkAdaptersItemNetworkDetailsState from json.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineNetworkAdaptersItemNetworkDetailsState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachinePowerState as json.
func (o OptVirtualMachinePowerState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachinePowerState from json.
func (o *OptVirtualMachinePowerState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachinePowerState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachinePowerState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachinePowerState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineState as json.
func (o OptVirtualMachineState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineState from json.
func (o *OptVirtualMachineState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineState to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineStatus as json.
func (o OptVirtualMachineStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineStatus from json.
func (o *OptVirtualMachineStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVirtualDisksItemAppInfo as json.
func (o OptVirtualMachineVirtualDisksItemAppInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfo from json.
func (o *OptVirtualMachineVirtualDisksItemAppInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVirtualDisksItemAppInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVirtualDisksItemAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVirtualDisksItemAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVirtualDisksItemAppInfoVmware as json.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmware) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmware from json.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmware) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVirtualDisksItemAppInfoVmware to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVirtualDisksItemAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVirtualDisksItemAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo as json.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo from json.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVirtualDisksItemAppInfoVmwareType as json.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmwareType from json.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVirtualDisksItemAppInfoVmwareType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVirtualDisksItemAppInfoVmwareType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVirtualDisksItemAppInfoVmwareType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVmClassification as json.
func (o OptVirtualMachineVmClassification) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes VirtualMachineVmClassification from json.
func (o *OptVirtualMachineVmClassification) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVmClassification to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVmClassification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVmClassification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVmPerfMetricInfo as json.
func (o OptVirtualMachineVmPerfMetricInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VirtualMachineVmPerfMetricInfo from json.
func (o *OptVirtualMachineVmPerfMetricInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVirtualMachineVmPerfMetricInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVirtualMachineVmPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVirtualMachineVmPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VolumeSetInfo as json.
func (o OptVolumeSetInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VolumeSetInfo from json.
func (o *OptVolumeSetInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVolumeSetInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVolumeSetInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVolumeSetInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PortGroup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PortGroup) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NicTeamingPolicy.Set {
			e.FieldStart("nicTeamingPolicy")
			s.NicTeamingPolicy.Encode(e)
		}
	}
	{
		if s.VlanId.Set {
			e.FieldStart("vlanId")
			s.VlanId.Encode(e)
		}
	}
	{
		if s.Vswitch.Set {
			e.FieldStart("vswitch")
			s.Vswitch.Encode(e)
		}
	}
	{
		if s.VswitchName.Set {
			e.FieldStart("vswitchName")
			s.VswitchName.Encode(e)
		}
	}
}

var jsonFieldsNameOfPortGroup = [6]string{
	0: "key",
	1: "name",
	2: "nicTeamingPolicy",
	3: "vlanId",
	4: "vswitch",
	5: "vswitchName",
}

// Decode decodes PortGroup from json.
func (s *PortGroup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PortGroup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "nicTeamingPolicy":
			if err := func() error {
				s.NicTeamingPolicy.Reset()
				if err := s.NicTeamingPolicy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nicTeamingPolicy\"")
			}
		case "vlanId":
			if err := func() error {
				s.VlanId.Reset()
				if err := s.VlanId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vlanId\"")
			}
		case "vswitch":
			if err := func() error {
				s.Vswitch.Reset()
				if err := s.Vswitch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vswitch\"")
			}
		case "vswitchName":
			if err := func() error {
				s.VswitchName.Reset()
				if err := s.VswitchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vswitchName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PortGroup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PortGroup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PortGroup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ProtectionPolicyAppliedAtInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ProtectionPolicyAppliedAtInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfProtectionPolicyAppliedAtInfo = [4]string{
	0: "id",
	1: "name",
	2: "resourceUri",
	3: "type",
}

// Decode decodes ProtectionPolicyAppliedAtInfo from json.
func (s *ProtectionPolicyAppliedAtInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProtectionPolicyAppliedAtInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ProtectionPolicyAppliedAtInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ProtectionPolicyAppliedAtInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProtectionPolicyAppliedAtInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProtectionPolicyAppliedAtInfoType as json.
func (s ProtectionPolicyAppliedAtInfoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ProtectionPolicyAppliedAtInfoType from json.
func (s *ProtectionPolicyAppliedAtInfoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProtectionPolicyAppliedAtInfoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ProtectionPolicyAppliedAtInfoType(v) {
	case ProtectionPolicyAppliedAtInfoTypeDATASTORE:
		*s = ProtectionPolicyAppliedAtInfoTypeDATASTORE
	case ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE:
		*s = ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE
	case ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP:
		*s = ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP
	default:
		*s = ProtectionPolicyAppliedAtInfoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ProtectionPolicyAppliedAtInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProtectionPolicyAppliedAtInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProtectionStatus as json.
func (s ProtectionStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ProtectionStatus from json.
func (s *ProtectionStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProtectionStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ProtectionStatus(v) {
	case ProtectionStatusUNPROTECTED:
		*s = ProtectionStatusUNPROTECTED
	case ProtectionStatusLAPSED:
		*s = ProtectionStatusLAPSED
	case ProtectionStatusPENDING:
		*s = ProtectionStatusPENDING
	case ProtectionStatusPARTIAL:
		*s = ProtectionStatusPARTIAL
	case ProtectionStatusPROTECTED:
		*s = ProtectionStatusPROTECTED
	case ProtectionStatusPAUSED:
		*s = ProtectionStatusPAUSED
	case ProtectionStatusUNSUPPORTED:
		*s = ProtectionStatusUNSUPPORTED
	default:
		*s = ProtectionStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ProtectionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProtectionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ProvisioningPolicyInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ProvisioningPolicyInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfProvisioningPolicyInfo = [4]string{
	0: "id",
	1: "name",
	2: "resourceUri",
	3: "type",
}

// Decode decodes ProvisioningPolicyInfo from json.
func (s *ProvisioningPolicyInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProvisioningPolicyInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ProvisioningPolicyInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ProvisioningPolicyInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProvisioningPolicyInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RecoveryPointsExist as json.
func (s RecoveryPointsExist) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes RecoveryPointsExist from json.
func (s *RecoveryPointsExist) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RecoveryPointsExist to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RecoveryPointsExist(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RecoveryPointsExist) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RecoveryPointsExist) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReplicationInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReplicationInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.PartnerDetails != nil {
			e.FieldStart("partnerDetails")
			e.ArrStart()
			for _, elem := range s.PartnerDetails {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfReplicationInfo = [5]string{
	0: "id",
	1: "name",
	2: "partnerDetails",
	3: "resourceUri",
	4: "type",
}

// Decode decodes ReplicationInfo from json.
func (s *ReplicationInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReplicationInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "partnerDetails":
			if err := func() error {
				s.PartnerDetails = make([]ReplicationPartnerInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ReplicationPartnerInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PartnerDetails = append(s.PartnerDetails, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"partnerDetails\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReplicationInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReplicationInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReplicationInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReplicationPartnerInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReplicationPartnerInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Mode.Set {
			e.FieldStart("mode")
			s.Mode.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.SystemWwn.Set {
			e.FieldStart("systemWwn")
			s.SystemWwn.Encode(e)
		}
	}
	{
		if s.VendorName.Set {
			e.FieldStart("vendorName")
			s.VendorName.Encode(e)
		}
	}
}

var jsonFieldsNameOfReplicationPartnerInfo = [5]string{
	0: "id",
	1: "mode",
	2: "name",
	3: "systemWwn",
	4: "vendorName",
}

// Decode decodes ReplicationPartnerInfo from json.
func (s *ReplicationPartnerInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReplicationPartnerInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "mode":
			if err := func() error {
				s.Mode.Reset()
				if err := s.Mode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mode\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "systemWwn":
			if err := func() error {
				s.SystemWwn.Reset()
				if err := s.SystemWwn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"systemWwn\"")
			}
		case "vendorName":
			if err := func() error {
				s.VendorName.Reset()
				if err := s.VendorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendorName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReplicationPartnerInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReplicationPartnerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReplicationPartnerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReplicationPartnerInfoMode as json.
func (s ReplicationPartnerInfoMode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ReplicationPartnerInfoMode from json.
func (s *ReplicationPartnerInfoMode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReplicationPartnerInfoMode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ReplicationPartnerInfoMode(v) {
	case ReplicationPartnerInfoModeSYNCHRONOUS:
		*s = ReplicationPartnerInfoModeSYNCHRONOUS
	case ReplicationPartnerInfoModePERIODIC:
		*s = ReplicationPartnerInfoModePERIODIC
	default:
		*s = ReplicationPartnerInfoMode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReplicationPartnerInfoMode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReplicationPartnerInfoMode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReplicationPartnerInfoVendorName as json.
func (s ReplicationPartnerInfoVendorName) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ReplicationPartnerInfoVendorName from json.
func (s *ReplicationPartnerInfoVendorName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReplicationPartnerInfoVendorName to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ReplicationPartnerInfoVendorName(v) {
	case ReplicationPartnerInfoVendorNameNIMBLE:
		*s = ReplicationPartnerInfoVendorNameNIMBLE
	case ReplicationPartnerInfoVendorNamePRIMERA:
		*s = ReplicationPartnerInfoVendorNamePRIMERA
	default:
		*s = ReplicationPartnerInfoVendorName(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReplicationPartnerInfoVendorName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReplicationPartnerInfoVendorName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Services as json.
func (s Services) Encode(e *jx.Encoder) {
	unwrapped := []string(s)
	if unwrapped == nil {
		e.ArrEmpty()
		return
	}
	if unwrapped != nil {
		e.ArrStart()
		for _, elem := range unwrapped {
			e.Str(elem)
		}
		e.ArrEnd()
	}
}

// Decode decodes Services from json.
func (s *Services) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Services to nil")
	}
	var unwrapped []string
	if err := func() error {
		unwrapped = make([]string, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem string
			v, err := d.Str()
			elem = string(v)
			if err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Services(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Services) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Services) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StorageFolderInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StorageFolderInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfStorageFolderInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes StorageFolderInfo from json.
func (s *StorageFolderInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StorageFolderInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StorageFolderInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StorageFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StorageFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StoragePoolInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StoragePoolInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfStoragePoolInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes StoragePoolInfo from json.
func (s *StoragePoolInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StoragePoolInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StoragePoolInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StoragePoolInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StoragePoolInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StorageSystemInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StorageSystemInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Managed.Set {
			e.FieldStart("managed")
			s.Managed.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.SerialNumber.Set {
			e.FieldStart("serialNumber")
			s.SerialNumber.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.VendorName.Set {
			e.FieldStart("vendorName")
			s.VendorName.Encode(e)
		}
	}
}

var jsonFieldsNameOfStorageSystemInfo = [8]string{
	0: "displayName",
	1: "id",
	2: "managed",
	3: "name",
	4: "resourceUri",
	5: "serialNumber",
	6: "type",
	7: "vendorName",
}

// Decode decodes StorageSystemInfo from json.
func (s *StorageSystemInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StorageSystemInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "managed":
			if err := func() error {
				s.Managed.Reset()
				if err := s.Managed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"managed\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "serialNumber":
			if err := func() error {
				s.SerialNumber.Reset()
				if err := s.SerialNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"serialNumber\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "vendorName":
			if err := func() error {
				s.VendorName.Reset()
				if err := s.VendorName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vendorName\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StorageSystemInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StorageSystemInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StorageSystemInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StorageSystemInfoType as json.
func (s StorageSystemInfoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes StorageSystemInfoType from json.
func (s *StorageSystemInfoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StorageSystemInfoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch StorageSystemInfoType(v) {
	case StorageSystemInfoTypeNIMBLE:
		*s = StorageSystemInfoTypeNIMBLE
	case StorageSystemInfoTypeTHREEPAR:
		*s = StorageSystemInfoTypeTHREEPAR
	case StorageSystemInfoTypePRIMERA:
		*s = StorageSystemInfoTypePRIMERA
	case StorageSystemInfoTypeALLETRA6000:
		*s = StorageSystemInfoTypeALLETRA6000
	case StorageSystemInfoTypeALLETRA9000:
		*s = StorageSystemInfoTypeALLETRA9000
	default:
		*s = StorageSystemInfoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StorageSystemInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StorageSystemInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Type as json.
func (s Type) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Type from json.
func (s *Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Type to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Type(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachine) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachine) encodeFields(e *jx.Encoder) {
	{
		if s.AllowedOperations != nil {
			e.FieldStart("allowedOperations")
			e.ArrStart()
			for _, elem := range s.AllowedOperations {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AppInfo.Set {
			e.FieldStart("appInfo")
			s.AppInfo.Encode(e)
		}
	}
	{
		if s.AppType.Set {
			e.FieldStart("appType")
			s.AppType.Encode(e)
		}
	}
	{
		if s.CapacityInBytes.Set {
			e.FieldStart("capacityInBytes")
			s.CapacityInBytes.Encode(e)
		}
	}
	{
		if s.ClusterInfo.Set {
			e.FieldStart("clusterInfo")
			s.ClusterInfo.Encode(e)
		}
	}
	{
		if s.ComputeInfo.Set {
			e.FieldStart("computeInfo")
			s.ComputeInfo.Encode(e)
		}
	}
	{
		e.FieldStart("createdAt")
		json.EncodeDateTime(e, s.CreatedAt)
	}
	{
		if s.CustomerId.Set {
			e.FieldStart("customerId")
			s.CustomerId.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.FolderInfo.Set {
			e.FieldStart("folderInfo")
			s.FolderInfo.Encode(e)
		}
	}
	{
		e.FieldStart("generation")
		s.Generation.Encode(e)
	}
	{
		if s.GuestInfo.Set {
			e.FieldStart("guestInfo")
			s.GuestInfo.Encode(e)
		}
	}
	{
		if s.HciClusterUuid.Set {
			e.FieldStart("hciClusterUuid")
			s.HciClusterUuid.Encode(e)
		}
	}
	{
		if s.HostInfo.Set {
			e.FieldStart("hostInfo")
			s.HostInfo.Encode(e)
		}
	}
	{
		if s.HypervisorManagerInfo.Set {
			e.FieldStart("hypervisorManagerInfo")
			s.HypervisorManagerInfo.Encode(e)
		}
	}
	{
		e.FieldStart("id")
		e.Str(s.ID)
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkAdapters != nil {
			e.FieldStart("networkAdapters")
			e.ArrStart()
			for _, elem := range s.NetworkAdapters {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.NetworkAddress.Set {
			e.FieldStart("networkAddress")
			s.NetworkAddress.Encode(e)
		}
	}
	{
		if s.PowerState.Set {
			e.FieldStart("powerState")
			s.PowerState.Encode(e)
		}
	}
	{
		if s.ProtectionJobInfo.Set {
			e.FieldStart("protectionJobInfo")
			s.ProtectionJobInfo.Encode(e)
		}
	}
	{
		if s.ProtectionPolicyAppliedAtInfo.Set {
			e.FieldStart("protectionPolicyAppliedAtInfo")
			s.ProtectionPolicyAppliedAtInfo.Encode(e)
		}
	}
	{
		if s.ProtectionStatus.Set {
			e.FieldStart("protectionStatus")
			s.ProtectionStatus.Encode(e)
		}
	}
	{
		if s.RecoveryPointsExist.Set {
			e.FieldStart("recoveryPointsExist")
			s.RecoveryPointsExist.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Services != nil {
			e.FieldStart("services")
			s.Services.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.StateReason.Set {
			e.FieldStart("stateReason")
			s.StateReason.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		e.FieldStart("type")
		s.Type.Encode(e)
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
	{
		e.FieldStart("updatedAt")
		json.EncodeDateTime(e, s.UpdatedAt)
	}
	{
		if s.VclsVm.Set {
			e.FieldStart("vclsVm")
			s.VclsVm.Encode(e)
		}
	}
	{
		if s.VirtualDisks != nil {
			e.FieldStart("virtualDisks")
			e.ArrStart()
			for _, elem := range s.VirtualDisks {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VmClassification.Set {
			e.FieldStart("vmClassification")
			s.VmClassification.Encode(e)
		}
	}
	{
		if s.VmConfigPath.Set {
			e.FieldStart("vmConfigPath")
			s.VmConfigPath.Encode(e)
		}
	}
	{
		if s.VmPerfMetricInfo.Set {
			e.FieldStart("vmPerfMetricInfo")
			s.VmPerfMetricInfo.Encode(e)
		}
	}
	{
		if s.VmProtectionGroupsInfo != nil {
			e.FieldStart("vmProtectionGroupsInfo")
			e.ArrStart()
			for _, elem := range s.VmProtectionGroupsInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.VolumesInfo != nil {
			e.FieldStart("volumesInfo")
			e.ArrStart()
			for _, elem := range s.VolumesInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfVirtualMachine = [39]string{
	0:  "allowedOperations",
	1:  "appInfo",
	2:  "appType",
	3:  "capacityInBytes",
	4:  "clusterInfo",
	5:  "computeInfo",
	6:  "createdAt",
	7:  "customerId",
	8:  "displayName",
	9:  "folderInfo",
	10: "generation",
	11: "guestInfo",
	12: "hciClusterUuid",
	13: "hostInfo",
	14: "hypervisorManagerInfo",
	15: "id",
	16: "name",
	17: "networkAdapters",
	18: "networkAddress",
	19: "powerState",
	20: "protectionJobInfo",
	21: "protectionPolicyAppliedAtInfo",
	22: "protectionStatus",
	23: "recoveryPointsExist",
	24: "resourceUri",
	25: "services",
	26: "state",
	27: "stateReason",
	28: "status",
	29: "type",
	30: "uid",
	31: "updatedAt",
	32: "vclsVm",
	33: "virtualDisks",
	34: "vmClassification",
	35: "vmConfigPath",
	36: "vmPerfMetricInfo",
	37: "vmProtectionGroupsInfo",
	38: "volumesInfo",
}

// Decode decodes VirtualMachine from json.
func (s *VirtualMachine) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachine to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "allowedOperations":
			if err := func() error {
				s.AllowedOperations = make([]VirtualMachineAllowedOperationsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VirtualMachineAllowedOperationsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.AllowedOperations = append(s.AllowedOperations, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowedOperations\"")
			}
		case "appInfo":
			if err := func() error {
				s.AppInfo.Reset()
				if err := s.AppInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appInfo\"")
			}
		case "appType":
			if err := func() error {
				s.AppType.Reset()
				if err := s.AppType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appType\"")
			}
		case "capacityInBytes":
			if err := func() error {
				s.CapacityInBytes.Reset()
				if err := s.CapacityInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capacityInBytes\"")
			}
		case "clusterInfo":
			if err := func() error {
				s.ClusterInfo.Reset()
				if err := s.ClusterInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"clusterInfo\"")
			}
		case "computeInfo":
			if err := func() error {
				s.ComputeInfo.Reset()
				if err := s.ComputeInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"computeInfo\"")
			}
		case "createdAt":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.CreatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"createdAt\"")
			}
		case "customerId":
			if err := func() error {
				s.CustomerId.Reset()
				if err := s.CustomerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customerId\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "folderInfo":
			if err := func() error {
				s.FolderInfo.Reset()
				if err := s.FolderInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"folderInfo\"")
			}
		case "generation":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.Generation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"generation\"")
			}
		case "guestInfo":
			if err := func() error {
				s.GuestInfo.Reset()
				if err := s.GuestInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guestInfo\"")
			}
		case "hciClusterUuid":
			if err := func() error {
				s.HciClusterUuid.Reset()
				if err := s.HciClusterUuid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hciClusterUuid\"")
			}
		case "hostInfo":
			if err := func() error {
				s.HostInfo.Reset()
				if err := s.HostInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hostInfo\"")
			}
		case "hypervisorManagerInfo":
			if err := func() error {
				s.HypervisorManagerInfo.Reset()
				if err := s.HypervisorManagerInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hypervisorManagerInfo\"")
			}
		case "id":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.ID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "networkAdapters":
			if err := func() error {
				s.NetworkAdapters = make([]VirtualMachineNetworkAdaptersItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VirtualMachineNetworkAdaptersItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.NetworkAdapters = append(s.NetworkAdapters, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkAdapters\"")
			}
		case "networkAddress":
			if err := func() error {
				s.NetworkAddress.Reset()
				if err := s.NetworkAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkAddress\"")
			}
		case "powerState":
			if err := func() error {
				s.PowerState.Reset()
				if err := s.PowerState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"powerState\"")
			}
		case "protectionJobInfo":
			if err := func() error {
				s.ProtectionJobInfo.Reset()
				if err := s.ProtectionJobInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionJobInfo\"")
			}
		case "protectionPolicyAppliedAtInfo":
			if err := func() error {
				s.ProtectionPolicyAppliedAtInfo.Reset()
				if err := s.ProtectionPolicyAppliedAtInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionPolicyAppliedAtInfo\"")
			}
		case "protectionStatus":
			if err := func() error {
				s.ProtectionStatus.Reset()
				if err := s.ProtectionStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"protectionStatus\"")
			}
		case "recoveryPointsExist":
			if err := func() error {
				s.RecoveryPointsExist.Reset()
				if err := s.RecoveryPointsExist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recoveryPointsExist\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "services":
			if err := func() error {
				if err := s.Services.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"services\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "stateReason":
			if err := func() error {
				s.StateReason.Reset()
				if err := s.StateReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stateReason\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "type":
			requiredBitSet[3] |= 1 << 5
			if err := func() error {
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		case "updatedAt":
			requiredBitSet[3] |= 1 << 7
			if err := func() error {
				v, err := json.DecodeDateTime(d)
				s.UpdatedAt = v
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		case "vclsVm":
			if err := func() error {
				s.VclsVm.Reset()
				if err := s.VclsVm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vclsVm\"")
			}
		case "virtualDisks":
			if err := func() error {
				s.VirtualDisks = make([]VirtualMachineVirtualDisksItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VirtualMachineVirtualDisksItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VirtualDisks = append(s.VirtualDisks, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"virtualDisks\"")
			}
		case "vmClassification":
			if err := func() error {
				s.VmClassification.Reset()
				if err := s.VmClassification.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmClassification\"")
			}
		case "vmConfigPath":
			if err := func() error {
				s.VmConfigPath.Reset()
				if err := s.VmConfigPath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmConfigPath\"")
			}
		case "vmPerfMetricInfo":
			if err := func() error {
				s.VmPerfMetricInfo.Reset()
				if err := s.VmPerfMetricInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmPerfMetricInfo\"")
			}
		case "vmProtectionGroupsInfo":
			if err := func() error {
				s.VmProtectionGroupsInfo = make([]VmProtectionGroupInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VmProtectionGroupInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VmProtectionGroupsInfo = append(s.VmProtectionGroupsInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmProtectionGroupsInfo\"")
			}
		case "volumesInfo":
			if err := func() error {
				s.VolumesInfo = make([]VolumeInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VolumeInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.VolumesInfo = append(s.VolumesInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volumesInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachine")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b01000000,
		0b10000100,
		0b00000000,
		0b10100000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfVirtualMachine) {
					name = jsonFieldsNameOfVirtualMachine[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachine) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachine) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAllowedOperationsItem as json.
func (s VirtualMachineAllowedOperationsItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineAllowedOperationsItem from json.
func (s *VirtualMachineAllowedOperationsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAllowedOperationsItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineAllowedOperationsItem(v) {
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE
	default:
		*s = VirtualMachineAllowedOperationsItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineAllowedOperationsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAllowedOperationsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineAppInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineAppInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Vmware.Set {
			e.FieldStart("vmware")
			s.Vmware.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineAppInfo = [1]string{
	0: "vmware",
}

// Decode decodes VirtualMachineAppInfo from json.
func (s *VirtualMachineAppInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vmware":
			if err := func() error {
				s.Vmware.Reset()
				if err := s.Vmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmware\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineAppInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineAppInfoVmware) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineAppInfoVmware) encodeFields(e *jx.Encoder) {
	{
		if s.DatacenterInfo.Set {
			e.FieldStart("datacenterInfo")
			s.DatacenterInfo.Encode(e)
		}
	}
	{
		if s.DatastoresInfo != nil {
			e.FieldStart("datastoresInfo")
			e.ArrStart()
			for _, elem := range s.DatastoresInfo {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
	{
		if s.ResourcePoolInfo.Set {
			e.FieldStart("resourcePoolInfo")
			s.ResourcePoolInfo.Encode(e)
		}
	}
	{
		if s.ToolsInfo.Set {
			e.FieldStart("toolsInfo")
			s.ToolsInfo.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineAppInfoVmware = [6]string{
	0: "datacenterInfo",
	1: "datastoresInfo",
	2: "moref",
	3: "resourcePoolInfo",
	4: "toolsInfo",
	5: "type",
}

// Decode decodes VirtualMachineAppInfoVmware from json.
func (s *VirtualMachineAppInfoVmware) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmware to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "datacenterInfo":
			if err := func() error {
				s.DatacenterInfo.Reset()
				if err := s.DatacenterInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datacenterInfo\"")
			}
		case "datastoresInfo":
			if err := func() error {
				s.DatastoresInfo = make([]VirtualMachineAppInfoVmwareDatastoresInfoItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem VirtualMachineAppInfoVmwareDatastoresInfoItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.DatastoresInfo = append(s.DatastoresInfo, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datastoresInfo\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		case "resourcePoolInfo":
			if err := func() error {
				s.ResourcePoolInfo.Reset()
				if err := s.ResourcePoolInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourcePoolInfo\"")
			}
		case "toolsInfo":
			if err := func() error {
				s.ToolsInfo.Reset()
				if err := s.ToolsInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"toolsInfo\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineAppInfoVmware")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineAppInfoVmwareDatastoresInfoItem = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineAppInfoVmwareDatastoresInfoItem from json.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmwareDatastoresInfoItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineAppInfoVmwareDatastoresInfoItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Moref.Set {
			e.FieldStart("moref")
			s.Moref.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineAppInfoVmwareResourcePoolInfo = [6]string{
	0: "displayName",
	1: "id",
	2: "moref",
	3: "name",
	4: "resourceUri",
	5: "type",
}

// Decode decodes VirtualMachineAppInfoVmwareResourcePoolInfo from json.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmwareResourcePoolInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "moref":
			if err := func() error {
				s.Moref.Reset()
				if err := s.Moref.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"moref\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineAppInfoVmwareResourcePoolInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineAppInfoVmwareToolsInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineAppInfoVmwareToolsInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Version.Set {
			e.FieldStart("version")
			s.Version.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineAppInfoVmwareToolsInfo = [3]string{
	0: "status",
	1: "type",
	2: "version",
}

// Decode decodes VirtualMachineAppInfoVmwareToolsInfo from json.
func (s *VirtualMachineAppInfoVmwareToolsInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmwareToolsInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "version":
			if err := func() error {
				s.Version.Reset()
				if err := s.Version.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"version\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineAppInfoVmwareToolsInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineAppInfoVmwareToolsInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmwareToolsInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareToolsInfoStatus as json.
func (s VirtualMachineAppInfoVmwareToolsInfoStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineAppInfoVmwareToolsInfoStatus from json.
func (s *VirtualMachineAppInfoVmwareToolsInfoStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmwareToolsInfoStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineAppInfoVmwareToolsInfoStatus(v) {
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING
	case VirtualMachineAppInfoVmwareToolsInfoStatusOK:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusOK
	case VirtualMachineAppInfoVmwareToolsInfoStatusOLD:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusOLD
	default:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineAppInfoVmwareToolsInfoStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmwareToolsInfoStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppInfoVmwareType as json.
func (s VirtualMachineAppInfoVmwareType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineAppInfoVmwareType from json.
func (s *VirtualMachineAppInfoVmwareType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppInfoVmwareType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineAppInfoVmwareType(v) {
	case VirtualMachineAppInfoVmwareTypeVMFS:
		*s = VirtualMachineAppInfoVmwareTypeVMFS
	case VirtualMachineAppInfoVmwareTypeVVOL:
		*s = VirtualMachineAppInfoVmwareTypeVVOL
	case VirtualMachineAppInfoVmwareTypeNFS:
		*s = VirtualMachineAppInfoVmwareTypeNFS
	case VirtualMachineAppInfoVmwareTypeVSAN:
		*s = VirtualMachineAppInfoVmwareTypeVSAN
	default:
		*s = VirtualMachineAppInfoVmwareType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineAppInfoVmwareType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppInfoVmwareType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineAppType as json.
func (s VirtualMachineAppType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineAppType from json.
func (s *VirtualMachineAppType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineAppType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineAppType(v) {
	case VirtualMachineAppTypeVMWARE:
		*s = VirtualMachineAppTypeVMWARE
	default:
		*s = VirtualMachineAppType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineAppType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineAppType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineClusterInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineClusterInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineClusterInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineClusterInfo from json.
func (s *VirtualMachineClusterInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineClusterInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineClusterInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineClusterInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineClusterInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineComputeInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineComputeInfo) encodeFields(e *jx.Encoder) {
	{
		if s.MemorySizeInMib.Set {
			e.FieldStart("memorySizeInMib")
			s.MemorySizeInMib.Encode(e)
		}
	}
	{
		if s.NumCpuCores.Set {
			e.FieldStart("numCpuCores")
			s.NumCpuCores.Encode(e)
		}
	}
	{
		if s.NumCpuThreads.Set {
			e.FieldStart("numCpuThreads")
			s.NumCpuThreads.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineComputeInfo = [3]string{
	0: "memorySizeInMib",
	1: "numCpuCores",
	2: "numCpuThreads",
}

// Decode decodes VirtualMachineComputeInfo from json.
func (s *VirtualMachineComputeInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineComputeInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "memorySizeInMib":
			if err := func() error {
				s.MemorySizeInMib.Reset()
				if err := s.MemorySizeInMib.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memorySizeInMib\"")
			}
		case "numCpuCores":
			if err := func() error {
				s.NumCpuCores.Reset()
				if err := s.NumCpuCores.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numCpuCores\"")
			}
		case "numCpuThreads":
			if err := func() error {
				s.NumCpuThreads.Reset()
				if err := s.NumCpuThreads.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"numCpuThreads\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineComputeInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineComputeInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineComputeInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineFolderInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineFolderInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineFolderInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineFolderInfo from json.
func (s *VirtualMachineFolderInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineFolderInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineFolderInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineFolderInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineFolderInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineGuestInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineGuestInfo) encodeFields(e *jx.Encoder) {
	{
		if s.BuildVersion.Set {
			e.FieldStart("buildVersion")
			s.BuildVersion.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ReleaseVersion.Set {
			e.FieldStart("releaseVersion")
			s.ReleaseVersion.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineGuestInfo = [4]string{
	0: "buildVersion",
	1: "name",
	2: "releaseVersion",
	3: "type",
}

// Decode decodes VirtualMachineGuestInfo from json.
func (s *VirtualMachineGuestInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineGuestInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "buildVersion":
			if err := func() error {
				s.BuildVersion.Reset()
				if err := s.BuildVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buildVersion\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "releaseVersion":
			if err := func() error {
				s.ReleaseVersion.Reset()
				if err := s.ReleaseVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"releaseVersion\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineGuestInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineGuestInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineGuestInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineGuestInfoType as json.
func (s VirtualMachineGuestInfoType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineGuestInfoType from json.
func (s *VirtualMachineGuestInfoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineGuestInfoType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineGuestInfoType(v) {
	case VirtualMachineGuestInfoTypeWINDOWS:
		*s = VirtualMachineGuestInfoTypeWINDOWS
	case VirtualMachineGuestInfoTypeLINUX:
		*s = VirtualMachineGuestInfoTypeLINUX
	case VirtualMachineGuestInfoTypeOTHERS:
		*s = VirtualMachineGuestInfoTypeOTHERS
	default:
		*s = VirtualMachineGuestInfoType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineGuestInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineGuestInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineHostInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineHostInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineHostInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineHostInfo from json.
func (s *VirtualMachineHostInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineHostInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineHostInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineHostInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineHostInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineHypervisorManagerInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineHypervisorManagerInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineHypervisorManagerInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineHypervisorManagerInfo from json.
func (s *VirtualMachineHypervisorManagerInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineHypervisorManagerInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineHypervisorManagerInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineHypervisorManagerInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineHypervisorManagerInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineNetworkAdaptersItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineNetworkAdaptersItem) encodeFields(e *jx.Encoder) {
	{
		if s.MacAddress.Set {
			e.FieldStart("macAddress")
			s.MacAddress.Encode(e)
		}
	}
	{
		if s.MacAddressType.Set {
			e.FieldStart("macAddressType")
			s.MacAddressType.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.NetworkDetails.Set {
			e.FieldStart("networkDetails")
			s.NetworkDetails.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineNetworkAdaptersItem = [4]string{
	0: "macAddress",
	1: "macAddressType",
	2: "name",
	3: "networkDetails",
}

// Decode decodes VirtualMachineNetworkAdaptersItem from json.
func (s *VirtualMachineNetworkAdaptersItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineNetworkAdaptersItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "macAddress":
			if err := func() error {
				s.MacAddress.Reset()
				if err := s.MacAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"macAddress\"")
			}
		case "macAddressType":
			if err := func() error {
				s.MacAddressType.Reset()
				if err := s.MacAddressType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"macAddressType\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "networkDetails":
			if err := func() error {
				s.NetworkDetails.Reset()
				if err := s.NetworkDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"networkDetails\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineNetworkAdaptersItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineNetworkAdaptersItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineNetworkAdaptersItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineNetworkAdaptersItemMacAddressType as json.
func (s VirtualMachineNetworkAdaptersItemMacAddressType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineNetworkAdaptersItemMacAddressType from json.
func (s *VirtualMachineNetworkAdaptersItemMacAddressType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineNetworkAdaptersItemMacAddressType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineNetworkAdaptersItemMacAddressType(v) {
	case VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL:
		*s = VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL
	case VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC:
		*s = VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC
	default:
		*s = VirtualMachineNetworkAdaptersItemMacAddressType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineNetworkAdaptersItemMacAddressType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineNetworkAdaptersItemMacAddressType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) encodeFields(e *jx.Encoder) {
	{
		if s.ConnectAtPowerOn.Set {
			e.FieldStart("connectAtPowerOn")
			s.ConnectAtPowerOn.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.State.Set {
			e.FieldStart("state")
			s.State.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineNetworkAdaptersItemNetworkDetails = [7]string{
	0: "connectAtPowerOn",
	1: "displayName",
	2: "id",
	3: "name",
	4: "resourceUri",
	5: "state",
	6: "type",
}

// Decode decodes VirtualMachineNetworkAdaptersItemNetworkDetails from json.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineNetworkAdaptersItemNetworkDetails to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "connectAtPowerOn":
			if err := func() error {
				s.ConnectAtPowerOn.Reset()
				if err := s.ConnectAtPowerOn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"connectAtPowerOn\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "state":
			if err := func() error {
				s.State.Reset()
				if err := s.State.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"state\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineNetworkAdaptersItemNetworkDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineNetworkAdaptersItemNetworkDetailsState as json.
func (s VirtualMachineNetworkAdaptersItemNetworkDetailsState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineNetworkAdaptersItemNetworkDetailsState from json.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetailsState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineNetworkAdaptersItemNetworkDetailsState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineNetworkAdaptersItemNetworkDetailsState(v) {
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE:
		*s = VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED:
		*s = VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED
	default:
		*s = VirtualMachineNetworkAdaptersItemNetworkDetailsState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineNetworkAdaptersItemNetworkDetailsState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetailsState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachinePowerState as json.
func (s VirtualMachinePowerState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachinePowerState from json.
func (s *VirtualMachinePowerState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachinePowerState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachinePowerState(v) {
	case VirtualMachinePowerStatePOWEREDON:
		*s = VirtualMachinePowerStatePOWEREDON
	case VirtualMachinePowerStatePOWEREDOFF:
		*s = VirtualMachinePowerStatePOWEREDOFF
	case VirtualMachinePowerStateSUSPENDED:
		*s = VirtualMachinePowerStateSUSPENDED
	case VirtualMachinePowerStateUNKNOWN:
		*s = VirtualMachinePowerStateUNKNOWN
	default:
		*s = VirtualMachinePowerState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachinePowerState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachinePowerState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineState as json.
func (s VirtualMachineState) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineState from json.
func (s *VirtualMachineState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineState to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineState(v) {
	case VirtualMachineStateOK:
		*s = VirtualMachineStateOK
	case VirtualMachineStateUNAVAILABLE:
		*s = VirtualMachineStateUNAVAILABLE
	case VirtualMachineStateERROR:
		*s = VirtualMachineStateERROR
	case VirtualMachineStateCREATING:
		*s = VirtualMachineStateCREATING
	case VirtualMachineStateDELETING:
		*s = VirtualMachineStateDELETING
	case VirtualMachineStateUPDATING:
		*s = VirtualMachineStateUPDATING
	case VirtualMachineStateREFRESHING:
		*s = VirtualMachineStateREFRESHING
	case VirtualMachineStateRESTORING:
		*s = VirtualMachineStateRESTORING
	case VirtualMachineStateRESTOREFAILED:
		*s = VirtualMachineStateRESTOREFAILED
	case VirtualMachineStateDELETED:
		*s = VirtualMachineStateDELETED
	default:
		*s = VirtualMachineState(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineStatus as json.
func (s VirtualMachineStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineStatus from json.
func (s *VirtualMachineStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineStatus(v) {
	case VirtualMachineStatusOK:
		*s = VirtualMachineStatusOK
	case VirtualMachineStatusERROR:
		*s = VirtualMachineStatusERROR
	case VirtualMachineStatusWARNING:
		*s = VirtualMachineStatusWARNING
	default:
		*s = VirtualMachineStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineVirtualDisksItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineVirtualDisksItem) encodeFields(e *jx.Encoder) {
	{
		if s.AppInfo.Set {
			e.FieldStart("appInfo")
			s.AppInfo.Encode(e)
		}
	}
	{
		if s.CapacityInBytes.Set {
			e.FieldStart("capacityInBytes")
			s.CapacityInBytes.Encode(e)
		}
	}
	{
		if s.FilePath.Set {
			e.FieldStart("filePath")
			s.FilePath.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uid")
			s.UID.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineVirtualDisksItem = [6]string{
	0: "appInfo",
	1: "capacityInBytes",
	2: "filePath",
	3: "id",
	4: "name",
	5: "uid",
}

// Decode decodes VirtualMachineVirtualDisksItem from json.
func (s *VirtualMachineVirtualDisksItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVirtualDisksItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "appInfo":
			if err := func() error {
				s.AppInfo.Reset()
				if err := s.AppInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"appInfo\"")
			}
		case "capacityInBytes":
			if err := func() error {
				s.CapacityInBytes.Reset()
				if err := s.CapacityInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capacityInBytes\"")
			}
		case "filePath":
			if err := func() error {
				s.FilePath.Reset()
				if err := s.FilePath.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filePath\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "uid":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uid\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineVirtualDisksItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineVirtualDisksItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVirtualDisksItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineVirtualDisksItemAppInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Vmware.Set {
			e.FieldStart("vmware")
			s.Vmware.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineVirtualDisksItemAppInfo = [1]string{
	0: "vmware",
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfo from json.
func (s *VirtualMachineVirtualDisksItemAppInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVirtualDisksItemAppInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vmware":
			if err := func() error {
				s.Vmware.Reset()
				if err := s.Vmware.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vmware\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineVirtualDisksItemAppInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVirtualDisksItemAppInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) encodeFields(e *jx.Encoder) {
	{
		if s.DatastoreInfo.Set {
			e.FieldStart("datastoreInfo")
			s.DatastoreInfo.Encode(e)
		}
	}
	{
		if s.DiskUuidEnabled.Set {
			e.FieldStart("diskUuidEnabled")
			s.DiskUuidEnabled.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineVirtualDisksItemAppInfoVmware = [3]string{
	0: "datastoreInfo",
	1: "diskUuidEnabled",
	2: "type",
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmware from json.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVirtualDisksItemAppInfoVmware to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "datastoreInfo":
			if err := func() error {
				s.DatastoreInfo.Reset()
				if err := s.DatastoreInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"datastoreInfo\"")
			}
		case "diskUuidEnabled":
			if err := func() error {
				s.DiskUuidEnabled.Reset()
				if err := s.DiskUuidEnabled.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"diskUuidEnabled\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineVirtualDisksItemAppInfoVmware")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo from json.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVirtualDisksItemAppInfoVmwareType as json.
func (s VirtualMachineVirtualDisksItemAppInfoVmwareType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineVirtualDisksItemAppInfoVmwareType from json.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVirtualDisksItemAppInfoVmwareType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineVirtualDisksItemAppInfoVmwareType(v) {
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM
	default:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineVirtualDisksItemAppInfoVmwareType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VirtualMachineVmClassification as json.
func (s VirtualMachineVmClassification) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes VirtualMachineVmClassification from json.
func (s *VirtualMachineVmClassification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVmClassification to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch VirtualMachineVmClassification(v) {
	case VirtualMachineVmClassificationDATAORCHESTRATOR:
		*s = VirtualMachineVmClassificationDATAORCHESTRATOR
	case VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY:
		*s = VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY
	case VirtualMachineVmClassificationVCLSVM:
		*s = VirtualMachineVmClassificationVCLSVM
	case VirtualMachineVmClassificationTEMPLATEVM:
		*s = VirtualMachineVmClassificationTEMPLATEVM
	case VirtualMachineVmClassificationOMNICUBEVM:
		*s = VirtualMachineVmClassificationOMNICUBEVM
	case VirtualMachineVmClassificationDSCVM:
		*s = VirtualMachineVmClassificationDSCVM
	default:
		*s = VirtualMachineVmClassification(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s VirtualMachineVmClassification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVmClassification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VirtualMachineVmPerfMetricInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VirtualMachineVmPerfMetricInfo) encodeFields(e *jx.Encoder) {
	{
		if s.AverageReadLatency.Set {
			e.FieldStart("averageReadLatency")
			s.AverageReadLatency.Encode(e)
		}
	}
	{
		if s.AverageWriteLatency.Set {
			e.FieldStart("averageWriteLatency")
			s.AverageWriteLatency.Encode(e)
		}
	}
	{
		if s.CpuAllocatedInMhz.Set {
			e.FieldStart("cpuAllocatedInMhz")
			s.CpuAllocatedInMhz.Encode(e)
		}
	}
	{
		if s.CpuUsedInMhz.Set {
			e.FieldStart("cpuUsedInMhz")
			s.CpuUsedInMhz.Encode(e)
		}
	}
	{
		if s.MemoryAllocatedInMb.Set {
			e.FieldStart("memoryAllocatedInMb")
			s.MemoryAllocatedInMb.Encode(e)
		}
	}
	{
		if s.MemoryUsedInMb.Set {
			e.FieldStart("memoryUsedInMb")
			s.MemoryUsedInMb.Encode(e)
		}
	}
	{
		if s.StorageAllocatedInKb.Set {
			e.FieldStart("storageAllocatedInKb")
			s.StorageAllocatedInKb.Encode(e)
		}
	}
	{
		if s.StorageUsedInBytes.Set {
			e.FieldStart("storageUsedInBytes")
			s.StorageUsedInBytes.Encode(e)
		}
	}
	{
		if s.TotalReadIops.Set {
			e.FieldStart("totalReadIops")
			s.TotalReadIops.Encode(e)
		}
	}
	{
		if s.TotalWriteIops.Set {
			e.FieldStart("totalWriteIops")
			s.TotalWriteIops.Encode(e)
		}
	}
}

var jsonFieldsNameOfVirtualMachineVmPerfMetricInfo = [10]string{
	0: "averageReadLatency",
	1: "averageWriteLatency",
	2: "cpuAllocatedInMhz",
	3: "cpuUsedInMhz",
	4: "memoryAllocatedInMb",
	5: "memoryUsedInMb",
	6: "storageAllocatedInKb",
	7: "storageUsedInBytes",
	8: "totalReadIops",
	9: "totalWriteIops",
}

// Decode decodes VirtualMachineVmPerfMetricInfo from json.
func (s *VirtualMachineVmPerfMetricInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VirtualMachineVmPerfMetricInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "averageReadLatency":
			if err := func() error {
				s.AverageReadLatency.Reset()
				if err := s.AverageReadLatency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"averageReadLatency\"")
			}
		case "averageWriteLatency":
			if err := func() error {
				s.AverageWriteLatency.Reset()
				if err := s.AverageWriteLatency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"averageWriteLatency\"")
			}
		case "cpuAllocatedInMhz":
			if err := func() error {
				s.CpuAllocatedInMhz.Reset()
				if err := s.CpuAllocatedInMhz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuAllocatedInMhz\"")
			}
		case "cpuUsedInMhz":
			if err := func() error {
				s.CpuUsedInMhz.Reset()
				if err := s.CpuUsedInMhz.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cpuUsedInMhz\"")
			}
		case "memoryAllocatedInMb":
			if err := func() error {
				s.MemoryAllocatedInMb.Reset()
				if err := s.MemoryAllocatedInMb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memoryAllocatedInMb\"")
			}
		case "memoryUsedInMb":
			if err := func() error {
				s.MemoryUsedInMb.Reset()
				if err := s.MemoryUsedInMb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"memoryUsedInMb\"")
			}
		case "storageAllocatedInKb":
			if err := func() error {
				s.StorageAllocatedInKb.Reset()
				if err := s.StorageAllocatedInKb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storageAllocatedInKb\"")
			}
		case "storageUsedInBytes":
			if err := func() error {
				s.StorageUsedInBytes.Reset()
				if err := s.StorageUsedInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storageUsedInBytes\"")
			}
		case "totalReadIops":
			if err := func() error {
				s.TotalReadIops.Reset()
				if err := s.TotalReadIops.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalReadIops\"")
			}
		case "totalWriteIops":
			if err := func() error {
				s.TotalWriteIops.Reset()
				if err := s.TotalWriteIops.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalWriteIops\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VirtualMachineVmPerfMetricInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VirtualMachineVmPerfMetricInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VirtualMachineVmPerfMetricInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VmProtectionGroupInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VmProtectionGroupInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVmProtectionGroupInfo = [4]string{
	0: "id",
	1: "name",
	2: "resourceUri",
	3: "type",
}

// Decode decodes VmProtectionGroupInfo from json.
func (s *VmProtectionGroupInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VmProtectionGroupInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VmProtectionGroupInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VmProtectionGroupInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VmProtectionGroupInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VolumeInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VolumeInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.ScsiIdentifier.Set {
			e.FieldStart("scsiIdentifier")
			s.ScsiIdentifier.Encode(e)
		}
	}
	{
		if s.SizeInBytes.Set {
			e.FieldStart("sizeInBytes")
			s.SizeInBytes.Encode(e)
		}
	}
	{
		if s.StorageFolderInfo.Set {
			e.FieldStart("storageFolderInfo")
			s.StorageFolderInfo.Encode(e)
		}
	}
	{
		if s.StoragePoolInfo.Set {
			e.FieldStart("storagePoolInfo")
			s.StoragePoolInfo.Encode(e)
		}
	}
	{
		if s.StorageSystemInfo.Set {
			e.FieldStart("storageSystemInfo")
			s.StorageSystemInfo.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.VolumeSetInfo.Set {
			e.FieldStart("volumeSetInfo")
			s.VolumeSetInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfVolumeInfo = [11]string{
	0:  "displayName",
	1:  "id",
	2:  "name",
	3:  "resourceUri",
	4:  "scsiIdentifier",
	5:  "sizeInBytes",
	6:  "storageFolderInfo",
	7:  "storagePoolInfo",
	8:  "storageSystemInfo",
	9:  "type",
	10: "volumeSetInfo",
}

// Decode decodes VolumeInfo from json.
func (s *VolumeInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VolumeInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "scsiIdentifier":
			if err := func() error {
				s.ScsiIdentifier.Reset()
				if err := s.ScsiIdentifier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scsiIdentifier\"")
			}
		case "sizeInBytes":
			if err := func() error {
				s.SizeInBytes.Reset()
				if err := s.SizeInBytes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sizeInBytes\"")
			}
		case "storageFolderInfo":
			if err := func() error {
				s.StorageFolderInfo.Reset()
				if err := s.StorageFolderInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storageFolderInfo\"")
			}
		case "storagePoolInfo":
			if err := func() error {
				s.StoragePoolInfo.Reset()
				if err := s.StoragePoolInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storagePoolInfo\"")
			}
		case "storageSystemInfo":
			if err := func() error {
				s.StorageSystemInfo.Reset()
				if err := s.StorageSystemInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"storageSystemInfo\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "volumeSetInfo":
			if err := func() error {
				s.VolumeSetInfo.Reset()
				if err := s.VolumeSetInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volumeSetInfo\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VolumeInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VolumeInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VolumeInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VolumeSetInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VolumeSetInfo) encodeFields(e *jx.Encoder) {
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ResourceUri.Set {
			e.FieldStart("resourceUri")
			s.ResourceUri.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfVolumeSetInfo = [5]string{
	0: "displayName",
	1: "id",
	2: "name",
	3: "resourceUri",
	4: "type",
}

// Decode decodes VolumeSetInfo from json.
func (s *VolumeSetInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VolumeSetInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "resourceUri":
			if err := func() error {
				s.ResourceUri.Reset()
				if err := s.ResourceUri.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"resourceUri\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VolumeSetInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VolumeSetInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VolumeSetInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
