// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// EditVM implements EditVM operation.
	//
	// Updates CPU, memory, network adapters, and disks of a virtual machine. This operation can be
	// performed when the virtual machine is powered off.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/update-hardware
	EditVM(ctx context.Context, req *EditVM, params EditVMParams) (EditVMRes, error)
	// GetVirtualMachineRequest implements GetVirtualMachineRequest operation.
	//
	// Details of a virtual machine request.
	//
	// GET /virtualization/v1beta1/virtual-machines-request/{request-id}
	GetVirtualMachineRequest(ctx context.Context, params GetVirtualMachineRequestParams) (GetVirtualMachineRequestRes, error)
	// GetVirtualMachineRequestList implements GetVirtualMachineRequestList operation.
	//
	// Details of a virtual machine request.
	//
	// GET /virtualization/v1beta1/virtual-machines-request
	GetVirtualMachineRequestList(ctx context.Context) (GetVirtualMachineRequestListRes, error)
	// HCIDeployVM implements HCIDeployVM operation.
	//
	// Deploys one or more virtual machines in HCI environment with specified template and storage
	// provisioning policy.
	//
	// POST /virtualization/v1beta1/virtual-machines
	HCIDeployVM(ctx context.Context, req *HCIDeployVM) (HCIDeployVMRes, error)
	// VMDelete implements VMDelete operation.
	//
	// Delete a virtual machine.
	//
	// DELETE /virtualization/v1beta1/virtual-machines/{vm-id}
	VMDelete(ctx context.Context, params VMDeleteParams) (VMDeleteRes, error)
	// VMPowerOff implements VMPowerOff operation.
	//
	// Power off a virtual machine.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/power-off
	VMPowerOff(ctx context.Context, params VMPowerOffParams) (VMPowerOffRes, error)
	// VMPowerOn implements VMPowerOn operation.
	//
	// Power on a virtual machine.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/power-on
	VMPowerOn(ctx context.Context, params VMPowerOnParams) (VMPowerOnRes, error)
	// VMPowerReset implements VMPowerReset operation.
	//
	// Reset a virtual machine.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/reset
	VMPowerReset(ctx context.Context, params VMPowerResetParams) (VMPowerResetRes, error)
	// VMRefresh implements VMRefresh operation.
	//
	// Updates the properties of the specified virtual machine instance.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/refresh
	VMRefresh(ctx context.Context, params VMRefreshParams) (VMRefreshRes, error)
	// VMRestartGuestOS implements VMRestartGuestOS operation.
	//
	// Restart guest OS of a virtual machine.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/restart-guest-os
	VMRestartGuestOS(ctx context.Context, params VMRestartGuestOSParams) (VMRestartGuestOSRes, error)
	// VMShutdownGuestOS implements VMShutdownGuestOS operation.
	//
	// Shutdown guest OS of a virtual machine.
	//
	// POST /virtualization/v1beta1/virtual-machines/{vm-id}/shutdown-guest-os
	VMShutdownGuestOS(ctx context.Context, params VMShutdownGuestOSParams) (VMShutdownGuestOSRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
