// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBearer handles bearer security.
	// The Data Service Cloud Console API uses a JWT bearer token for authentication.
	// An authentication token can be obtained from the HPE GreenLake console.
	HandleBearer(ctx context.Context, operationName OperationName, t Bearer) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesBearer = map[string][]string{
	EditVMOperation:                       []string{},
	GetVirtualMachineRequestOperation:     []string{},
	GetVirtualMachineRequestListOperation: []string{},
	HCIDeployVMOperation:                  []string{},
	VMDeleteOperation:                     []string{},
	VMPowerOffOperation:                   []string{},
	VMPowerOnOperation:                    []string{},
	VMPowerResetOperation:                 []string{},
	VMRefreshOperation:                    []string{},
	VMRestartGuestOSOperation:             []string{},
	VMShutdownGuestOSOperation:            []string{},
}

func (s *Server) securityBearer(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Bearer
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearer[operationName]
	rctx, err := s.sec.HandleBearer(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
