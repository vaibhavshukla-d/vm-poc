// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type Bearer struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *Bearer) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *Bearer) SetRoles(val []string) {
	s.Roles = val
}

// Information about the assigned Protection Policy and the Protection Job.
// Ref: #/components/schemas/DataManagementJobInfo
type DataManagementJobInfo struct {
	// UUID string uniquely identifying the Protection Job.
	ID OptUUID `json:"id"`
	// Name of the Protection Job.
	Name                 OptString                     `json:"name"`
	ProtectionPolicyInfo OptDataManagementTemplateInfo `json:"protectionPolicyInfo"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *DataManagementJobInfo) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataManagementJobInfo) GetName() OptString {
	return s.Name
}

// GetProtectionPolicyInfo returns the value of ProtectionPolicyInfo.
func (s *DataManagementJobInfo) GetProtectionPolicyInfo() OptDataManagementTemplateInfo {
	return s.ProtectionPolicyInfo
}

// GetResourceUri returns the value of ResourceUri.
func (s *DataManagementJobInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DataManagementJobInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *DataManagementJobInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataManagementJobInfo) SetName(val OptString) {
	s.Name = val
}

// SetProtectionPolicyInfo sets the value of ProtectionPolicyInfo.
func (s *DataManagementJobInfo) SetProtectionPolicyInfo(val OptDataManagementTemplateInfo) {
	s.ProtectionPolicyInfo = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DataManagementJobInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DataManagementJobInfo) SetType(val OptType) {
	s.Type = val
}

// Information about the Protection Policy that was used to create the job.
// Ref: #/components/schemas/DataManagementTemplateInfo
type DataManagementTemplateInfo struct {
	// UUID string uniquely identifying the Protection Policy.
	ID OptUUID `json:"id"`
	// User defined name of the Protection Policy.
	Name OptString `json:"name"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *DataManagementTemplateInfo) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataManagementTemplateInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DataManagementTemplateInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DataManagementTemplateInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *DataManagementTemplateInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataManagementTemplateInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DataManagementTemplateInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DataManagementTemplateInfo) SetType(val OptType) {
	s.Type = val
}

// References to the datacenter that house this virtual machine.
// Ref: #/components/schemas/DatacenterInfo
type DatacenterInfo struct {
	// UUID string uniquely identifier of the datacenter.
	ID OptString `json:"id"`
	// VMware provided moref for the datacenter.
	Moref OptString `json:"moref"`
	// VMware provided name for the datacenter.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *DatacenterInfo) GetID() OptString {
	return s.ID
}

// GetMoref returns the value of Moref.
func (s *DatacenterInfo) GetMoref() OptString {
	return s.Moref
}

// GetName returns the value of Name.
func (s *DatacenterInfo) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *DatacenterInfo) SetID(val OptString) {
	s.ID = val
}

// SetMoref sets the value of Moref.
func (s *DatacenterInfo) SetMoref(val OptString) {
	s.Moref = val
}

// SetName sets the value of Name.
func (s *DatacenterInfo) SetName(val OptString) {
	s.Name = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// A unique identifier for the request.
	DebugId string `json:"debugId"`
	// A machine friendly identifier for the error response.
	ErrorCode string `json:"errorCode"`
	// The HTTP status code of the response.
	HttpStatusCode int `json:"httpStatusCode"`
	// A user-friendly error message.
	Message string `json:"message"`
}

// GetDebugId returns the value of DebugId.
func (s *ErrorResponse) GetDebugId() string {
	return s.DebugId
}

// GetErrorCode returns the value of ErrorCode.
func (s *ErrorResponse) GetErrorCode() string {
	return s.ErrorCode
}

// GetHttpStatusCode returns the value of HttpStatusCode.
func (s *ErrorResponse) GetHttpStatusCode() int {
	return s.HttpStatusCode
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// SetDebugId sets the value of DebugId.
func (s *ErrorResponse) SetDebugId(val string) {
	s.DebugId = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ErrorResponse) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetHttpStatusCode sets the value of HttpStatusCode.
func (s *ErrorResponse) SetHttpStatusCode(val int) {
	s.HttpStatusCode = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

type Generation int64

type GetVmForbidden ErrorResponse

func (*GetVmForbidden) getVmRes() {}

type GetVmInternalServerError ErrorResponse

func (*GetVmInternalServerError) getVmRes() {}

type GetVmNotFound ErrorResponse

func (*GetVmNotFound) getVmRes() {}

type GetVmUnauthorized ErrorResponse

func (*GetVmUnauthorized) getVmRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataManagementJobInfo returns new OptDataManagementJobInfo with value set to v.
func NewOptDataManagementJobInfo(v DataManagementJobInfo) OptDataManagementJobInfo {
	return OptDataManagementJobInfo{
		Value: v,
		Set:   true,
	}
}

// OptDataManagementJobInfo is optional DataManagementJobInfo.
type OptDataManagementJobInfo struct {
	Value DataManagementJobInfo
	Set   bool
}

// IsSet returns true if OptDataManagementJobInfo was set.
func (o OptDataManagementJobInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataManagementJobInfo) Reset() {
	var v DataManagementJobInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataManagementJobInfo) SetTo(v DataManagementJobInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataManagementJobInfo) Get() (v DataManagementJobInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataManagementJobInfo) Or(d DataManagementJobInfo) DataManagementJobInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataManagementTemplateInfo returns new OptDataManagementTemplateInfo with value set to v.
func NewOptDataManagementTemplateInfo(v DataManagementTemplateInfo) OptDataManagementTemplateInfo {
	return OptDataManagementTemplateInfo{
		Value: v,
		Set:   true,
	}
}

// OptDataManagementTemplateInfo is optional DataManagementTemplateInfo.
type OptDataManagementTemplateInfo struct {
	Value DataManagementTemplateInfo
	Set   bool
}

// IsSet returns true if OptDataManagementTemplateInfo was set.
func (o OptDataManagementTemplateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataManagementTemplateInfo) Reset() {
	var v DataManagementTemplateInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataManagementTemplateInfo) SetTo(v DataManagementTemplateInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataManagementTemplateInfo) Get() (v DataManagementTemplateInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataManagementTemplateInfo) Or(d DataManagementTemplateInfo) DataManagementTemplateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatacenterInfo returns new OptDatacenterInfo with value set to v.
func NewOptDatacenterInfo(v DatacenterInfo) OptDatacenterInfo {
	return OptDatacenterInfo{
		Value: v,
		Set:   true,
	}
}

// OptDatacenterInfo is optional DatacenterInfo.
type OptDatacenterInfo struct {
	Value DatacenterInfo
	Set   bool
}

// IsSet returns true if OptDatacenterInfo was set.
func (o OptDatacenterInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatacenterInfo) Reset() {
	var v DatacenterInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatacenterInfo) SetTo(v DatacenterInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatacenterInfo) Get() (v DatacenterInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatacenterInfo) Or(d DatacenterInfo) DatacenterInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionPolicyAppliedAtInfo returns new OptProtectionPolicyAppliedAtInfo with value set to v.
func NewOptProtectionPolicyAppliedAtInfo(v ProtectionPolicyAppliedAtInfo) OptProtectionPolicyAppliedAtInfo {
	return OptProtectionPolicyAppliedAtInfo{
		Value: v,
		Set:   true,
	}
}

// OptProtectionPolicyAppliedAtInfo is optional ProtectionPolicyAppliedAtInfo.
type OptProtectionPolicyAppliedAtInfo struct {
	Value ProtectionPolicyAppliedAtInfo
	Set   bool
}

// IsSet returns true if OptProtectionPolicyAppliedAtInfo was set.
func (o OptProtectionPolicyAppliedAtInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionPolicyAppliedAtInfo) Reset() {
	var v ProtectionPolicyAppliedAtInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionPolicyAppliedAtInfo) SetTo(v ProtectionPolicyAppliedAtInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionPolicyAppliedAtInfo) Get() (v ProtectionPolicyAppliedAtInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionPolicyAppliedAtInfo) Or(d ProtectionPolicyAppliedAtInfo) ProtectionPolicyAppliedAtInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionPolicyAppliedAtInfoType returns new OptProtectionPolicyAppliedAtInfoType with value set to v.
func NewOptProtectionPolicyAppliedAtInfoType(v ProtectionPolicyAppliedAtInfoType) OptProtectionPolicyAppliedAtInfoType {
	return OptProtectionPolicyAppliedAtInfoType{
		Value: v,
		Set:   true,
	}
}

// OptProtectionPolicyAppliedAtInfoType is optional ProtectionPolicyAppliedAtInfoType.
type OptProtectionPolicyAppliedAtInfoType struct {
	Value ProtectionPolicyAppliedAtInfoType
	Set   bool
}

// IsSet returns true if OptProtectionPolicyAppliedAtInfoType was set.
func (o OptProtectionPolicyAppliedAtInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionPolicyAppliedAtInfoType) Reset() {
	var v ProtectionPolicyAppliedAtInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionPolicyAppliedAtInfoType) SetTo(v ProtectionPolicyAppliedAtInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionPolicyAppliedAtInfoType) Get() (v ProtectionPolicyAppliedAtInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionPolicyAppliedAtInfoType) Or(d ProtectionPolicyAppliedAtInfoType) ProtectionPolicyAppliedAtInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionStatus returns new OptProtectionStatus with value set to v.
func NewOptProtectionStatus(v ProtectionStatus) OptProtectionStatus {
	return OptProtectionStatus{
		Value: v,
		Set:   true,
	}
}

// OptProtectionStatus is optional ProtectionStatus.
type OptProtectionStatus struct {
	Value ProtectionStatus
	Set   bool
}

// IsSet returns true if OptProtectionStatus was set.
func (o OptProtectionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionStatus) Reset() {
	var v ProtectionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionStatus) SetTo(v ProtectionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionStatus) Get() (v ProtectionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionStatus) Or(d ProtectionStatus) ProtectionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecoveryPointsExist returns new OptRecoveryPointsExist with value set to v.
func NewOptRecoveryPointsExist(v RecoveryPointsExist) OptRecoveryPointsExist {
	return OptRecoveryPointsExist{
		Value: v,
		Set:   true,
	}
}

// OptRecoveryPointsExist is optional RecoveryPointsExist.
type OptRecoveryPointsExist struct {
	Value RecoveryPointsExist
	Set   bool
}

// IsSet returns true if OptRecoveryPointsExist was set.
func (o OptRecoveryPointsExist) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecoveryPointsExist) Reset() {
	var v RecoveryPointsExist
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecoveryPointsExist) SetTo(v RecoveryPointsExist) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecoveryPointsExist) Get() (v RecoveryPointsExist, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecoveryPointsExist) Or(d RecoveryPointsExist) RecoveryPointsExist {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageFolderInfo returns new OptStorageFolderInfo with value set to v.
func NewOptStorageFolderInfo(v StorageFolderInfo) OptStorageFolderInfo {
	return OptStorageFolderInfo{
		Value: v,
		Set:   true,
	}
}

// OptStorageFolderInfo is optional StorageFolderInfo.
type OptStorageFolderInfo struct {
	Value StorageFolderInfo
	Set   bool
}

// IsSet returns true if OptStorageFolderInfo was set.
func (o OptStorageFolderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageFolderInfo) Reset() {
	var v StorageFolderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageFolderInfo) SetTo(v StorageFolderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageFolderInfo) Get() (v StorageFolderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageFolderInfo) Or(d StorageFolderInfo) StorageFolderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStoragePoolInfo returns new OptStoragePoolInfo with value set to v.
func NewOptStoragePoolInfo(v StoragePoolInfo) OptStoragePoolInfo {
	return OptStoragePoolInfo{
		Value: v,
		Set:   true,
	}
}

// OptStoragePoolInfo is optional StoragePoolInfo.
type OptStoragePoolInfo struct {
	Value StoragePoolInfo
	Set   bool
}

// IsSet returns true if OptStoragePoolInfo was set.
func (o OptStoragePoolInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStoragePoolInfo) Reset() {
	var v StoragePoolInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStoragePoolInfo) SetTo(v StoragePoolInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStoragePoolInfo) Get() (v StoragePoolInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStoragePoolInfo) Or(d StoragePoolInfo) StoragePoolInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageSystemInfo returns new OptStorageSystemInfo with value set to v.
func NewOptStorageSystemInfo(v StorageSystemInfo) OptStorageSystemInfo {
	return OptStorageSystemInfo{
		Value: v,
		Set:   true,
	}
}

// OptStorageSystemInfo is optional StorageSystemInfo.
type OptStorageSystemInfo struct {
	Value StorageSystemInfo
	Set   bool
}

// IsSet returns true if OptStorageSystemInfo was set.
func (o OptStorageSystemInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageSystemInfo) Reset() {
	var v StorageSystemInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageSystemInfo) SetTo(v StorageSystemInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageSystemInfo) Get() (v StorageSystemInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageSystemInfo) Or(d StorageSystemInfo) StorageSystemInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageSystemInfoType returns new OptStorageSystemInfoType with value set to v.
func NewOptStorageSystemInfoType(v StorageSystemInfoType) OptStorageSystemInfoType {
	return OptStorageSystemInfoType{
		Value: v,
		Set:   true,
	}
}

// OptStorageSystemInfoType is optional StorageSystemInfoType.
type OptStorageSystemInfoType struct {
	Value StorageSystemInfoType
	Set   bool
}

// IsSet returns true if OptStorageSystemInfoType was set.
func (o OptStorageSystemInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageSystemInfoType) Reset() {
	var v StorageSystemInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageSystemInfoType) SetTo(v StorageSystemInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageSystemInfoType) Get() (v StorageSystemInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageSystemInfoType) Or(d StorageSystemInfoType) StorageSystemInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptType returns new OptType with value set to v.
func NewOptType(v Type) OptType {
	return OptType{
		Value: v,
		Set:   true,
	}
}

// OptType is optional Type.
type OptType struct {
	Value Type
	Set   bool
}

// IsSet returns true if OptType was set.
func (o OptType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptType) Reset() {
	var v Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptType) SetTo(v Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptType) Get() (v Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptType) Or(d Type) Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfo returns new OptVirtualMachineAppInfo with value set to v.
func NewOptVirtualMachineAppInfo(v VirtualMachineAppInfo) OptVirtualMachineAppInfo {
	return OptVirtualMachineAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfo is optional VirtualMachineAppInfo.
type OptVirtualMachineAppInfo struct {
	Value VirtualMachineAppInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfo was set.
func (o OptVirtualMachineAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfo) Reset() {
	var v VirtualMachineAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfo) SetTo(v VirtualMachineAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfo) Get() (v VirtualMachineAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfo) Or(d VirtualMachineAppInfo) VirtualMachineAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfoVmware returns new OptVirtualMachineAppInfoVmware with value set to v.
func NewOptVirtualMachineAppInfoVmware(v VirtualMachineAppInfoVmware) OptVirtualMachineAppInfoVmware {
	return OptVirtualMachineAppInfoVmware{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfoVmware is optional VirtualMachineAppInfoVmware.
type OptVirtualMachineAppInfoVmware struct {
	Value VirtualMachineAppInfoVmware
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfoVmware was set.
func (o OptVirtualMachineAppInfoVmware) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfoVmware) Reset() {
	var v VirtualMachineAppInfoVmware
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfoVmware) SetTo(v VirtualMachineAppInfoVmware) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfoVmware) Get() (v VirtualMachineAppInfoVmware, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfoVmware) Or(d VirtualMachineAppInfoVmware) VirtualMachineAppInfoVmware {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfoVmwareResourcePoolInfo returns new OptVirtualMachineAppInfoVmwareResourcePoolInfo with value set to v.
func NewOptVirtualMachineAppInfoVmwareResourcePoolInfo(v VirtualMachineAppInfoVmwareResourcePoolInfo) OptVirtualMachineAppInfoVmwareResourcePoolInfo {
	return OptVirtualMachineAppInfoVmwareResourcePoolInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfoVmwareResourcePoolInfo is optional VirtualMachineAppInfoVmwareResourcePoolInfo.
type OptVirtualMachineAppInfoVmwareResourcePoolInfo struct {
	Value VirtualMachineAppInfoVmwareResourcePoolInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfoVmwareResourcePoolInfo was set.
func (o OptVirtualMachineAppInfoVmwareResourcePoolInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfoVmwareResourcePoolInfo) Reset() {
	var v VirtualMachineAppInfoVmwareResourcePoolInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfoVmwareResourcePoolInfo) SetTo(v VirtualMachineAppInfoVmwareResourcePoolInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfoVmwareResourcePoolInfo) Get() (v VirtualMachineAppInfoVmwareResourcePoolInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfoVmwareResourcePoolInfo) Or(d VirtualMachineAppInfoVmwareResourcePoolInfo) VirtualMachineAppInfoVmwareResourcePoolInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfoVmwareToolsInfo returns new OptVirtualMachineAppInfoVmwareToolsInfo with value set to v.
func NewOptVirtualMachineAppInfoVmwareToolsInfo(v VirtualMachineAppInfoVmwareToolsInfo) OptVirtualMachineAppInfoVmwareToolsInfo {
	return OptVirtualMachineAppInfoVmwareToolsInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfoVmwareToolsInfo is optional VirtualMachineAppInfoVmwareToolsInfo.
type OptVirtualMachineAppInfoVmwareToolsInfo struct {
	Value VirtualMachineAppInfoVmwareToolsInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfoVmwareToolsInfo was set.
func (o OptVirtualMachineAppInfoVmwareToolsInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfoVmwareToolsInfo) Reset() {
	var v VirtualMachineAppInfoVmwareToolsInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfoVmwareToolsInfo) SetTo(v VirtualMachineAppInfoVmwareToolsInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfoVmwareToolsInfo) Get() (v VirtualMachineAppInfoVmwareToolsInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfoVmwareToolsInfo) Or(d VirtualMachineAppInfoVmwareToolsInfo) VirtualMachineAppInfoVmwareToolsInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfoVmwareToolsInfoStatus returns new OptVirtualMachineAppInfoVmwareToolsInfoStatus with value set to v.
func NewOptVirtualMachineAppInfoVmwareToolsInfoStatus(v VirtualMachineAppInfoVmwareToolsInfoStatus) OptVirtualMachineAppInfoVmwareToolsInfoStatus {
	return OptVirtualMachineAppInfoVmwareToolsInfoStatus{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfoVmwareToolsInfoStatus is optional VirtualMachineAppInfoVmwareToolsInfoStatus.
type OptVirtualMachineAppInfoVmwareToolsInfoStatus struct {
	Value VirtualMachineAppInfoVmwareToolsInfoStatus
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfoVmwareToolsInfoStatus was set.
func (o OptVirtualMachineAppInfoVmwareToolsInfoStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfoVmwareToolsInfoStatus) Reset() {
	var v VirtualMachineAppInfoVmwareToolsInfoStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfoVmwareToolsInfoStatus) SetTo(v VirtualMachineAppInfoVmwareToolsInfoStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfoVmwareToolsInfoStatus) Get() (v VirtualMachineAppInfoVmwareToolsInfoStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfoVmwareToolsInfoStatus) Or(d VirtualMachineAppInfoVmwareToolsInfoStatus) VirtualMachineAppInfoVmwareToolsInfoStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppInfoVmwareType returns new OptVirtualMachineAppInfoVmwareType with value set to v.
func NewOptVirtualMachineAppInfoVmwareType(v VirtualMachineAppInfoVmwareType) OptVirtualMachineAppInfoVmwareType {
	return OptVirtualMachineAppInfoVmwareType{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppInfoVmwareType is optional VirtualMachineAppInfoVmwareType.
type OptVirtualMachineAppInfoVmwareType struct {
	Value VirtualMachineAppInfoVmwareType
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppInfoVmwareType was set.
func (o OptVirtualMachineAppInfoVmwareType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppInfoVmwareType) Reset() {
	var v VirtualMachineAppInfoVmwareType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppInfoVmwareType) SetTo(v VirtualMachineAppInfoVmwareType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppInfoVmwareType) Get() (v VirtualMachineAppInfoVmwareType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppInfoVmwareType) Or(d VirtualMachineAppInfoVmwareType) VirtualMachineAppInfoVmwareType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineAppType returns new OptVirtualMachineAppType with value set to v.
func NewOptVirtualMachineAppType(v VirtualMachineAppType) OptVirtualMachineAppType {
	return OptVirtualMachineAppType{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineAppType is optional VirtualMachineAppType.
type OptVirtualMachineAppType struct {
	Value VirtualMachineAppType
	Set   bool
}

// IsSet returns true if OptVirtualMachineAppType was set.
func (o OptVirtualMachineAppType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineAppType) Reset() {
	var v VirtualMachineAppType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineAppType) SetTo(v VirtualMachineAppType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineAppType) Get() (v VirtualMachineAppType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineAppType) Or(d VirtualMachineAppType) VirtualMachineAppType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineClusterInfo returns new OptVirtualMachineClusterInfo with value set to v.
func NewOptVirtualMachineClusterInfo(v VirtualMachineClusterInfo) OptVirtualMachineClusterInfo {
	return OptVirtualMachineClusterInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineClusterInfo is optional VirtualMachineClusterInfo.
type OptVirtualMachineClusterInfo struct {
	Value VirtualMachineClusterInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineClusterInfo was set.
func (o OptVirtualMachineClusterInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineClusterInfo) Reset() {
	var v VirtualMachineClusterInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineClusterInfo) SetTo(v VirtualMachineClusterInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineClusterInfo) Get() (v VirtualMachineClusterInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineClusterInfo) Or(d VirtualMachineClusterInfo) VirtualMachineClusterInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineComputeInfo returns new OptVirtualMachineComputeInfo with value set to v.
func NewOptVirtualMachineComputeInfo(v VirtualMachineComputeInfo) OptVirtualMachineComputeInfo {
	return OptVirtualMachineComputeInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineComputeInfo is optional VirtualMachineComputeInfo.
type OptVirtualMachineComputeInfo struct {
	Value VirtualMachineComputeInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineComputeInfo was set.
func (o OptVirtualMachineComputeInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineComputeInfo) Reset() {
	var v VirtualMachineComputeInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineComputeInfo) SetTo(v VirtualMachineComputeInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineComputeInfo) Get() (v VirtualMachineComputeInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineComputeInfo) Or(d VirtualMachineComputeInfo) VirtualMachineComputeInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineFolderInfo returns new OptVirtualMachineFolderInfo with value set to v.
func NewOptVirtualMachineFolderInfo(v VirtualMachineFolderInfo) OptVirtualMachineFolderInfo {
	return OptVirtualMachineFolderInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineFolderInfo is optional VirtualMachineFolderInfo.
type OptVirtualMachineFolderInfo struct {
	Value VirtualMachineFolderInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineFolderInfo was set.
func (o OptVirtualMachineFolderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineFolderInfo) Reset() {
	var v VirtualMachineFolderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineFolderInfo) SetTo(v VirtualMachineFolderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineFolderInfo) Get() (v VirtualMachineFolderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineFolderInfo) Or(d VirtualMachineFolderInfo) VirtualMachineFolderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineGuestInfo returns new OptVirtualMachineGuestInfo with value set to v.
func NewOptVirtualMachineGuestInfo(v VirtualMachineGuestInfo) OptVirtualMachineGuestInfo {
	return OptVirtualMachineGuestInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineGuestInfo is optional VirtualMachineGuestInfo.
type OptVirtualMachineGuestInfo struct {
	Value VirtualMachineGuestInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineGuestInfo was set.
func (o OptVirtualMachineGuestInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineGuestInfo) Reset() {
	var v VirtualMachineGuestInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineGuestInfo) SetTo(v VirtualMachineGuestInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineGuestInfo) Get() (v VirtualMachineGuestInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineGuestInfo) Or(d VirtualMachineGuestInfo) VirtualMachineGuestInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineGuestInfoType returns new OptVirtualMachineGuestInfoType with value set to v.
func NewOptVirtualMachineGuestInfoType(v VirtualMachineGuestInfoType) OptVirtualMachineGuestInfoType {
	return OptVirtualMachineGuestInfoType{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineGuestInfoType is optional VirtualMachineGuestInfoType.
type OptVirtualMachineGuestInfoType struct {
	Value VirtualMachineGuestInfoType
	Set   bool
}

// IsSet returns true if OptVirtualMachineGuestInfoType was set.
func (o OptVirtualMachineGuestInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineGuestInfoType) Reset() {
	var v VirtualMachineGuestInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineGuestInfoType) SetTo(v VirtualMachineGuestInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineGuestInfoType) Get() (v VirtualMachineGuestInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineGuestInfoType) Or(d VirtualMachineGuestInfoType) VirtualMachineGuestInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineHostInfo returns new OptVirtualMachineHostInfo with value set to v.
func NewOptVirtualMachineHostInfo(v VirtualMachineHostInfo) OptVirtualMachineHostInfo {
	return OptVirtualMachineHostInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineHostInfo is optional VirtualMachineHostInfo.
type OptVirtualMachineHostInfo struct {
	Value VirtualMachineHostInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineHostInfo was set.
func (o OptVirtualMachineHostInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineHostInfo) Reset() {
	var v VirtualMachineHostInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineHostInfo) SetTo(v VirtualMachineHostInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineHostInfo) Get() (v VirtualMachineHostInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineHostInfo) Or(d VirtualMachineHostInfo) VirtualMachineHostInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineHypervisorManagerInfo returns new OptVirtualMachineHypervisorManagerInfo with value set to v.
func NewOptVirtualMachineHypervisorManagerInfo(v VirtualMachineHypervisorManagerInfo) OptVirtualMachineHypervisorManagerInfo {
	return OptVirtualMachineHypervisorManagerInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineHypervisorManagerInfo is optional VirtualMachineHypervisorManagerInfo.
type OptVirtualMachineHypervisorManagerInfo struct {
	Value VirtualMachineHypervisorManagerInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineHypervisorManagerInfo was set.
func (o OptVirtualMachineHypervisorManagerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineHypervisorManagerInfo) Reset() {
	var v VirtualMachineHypervisorManagerInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineHypervisorManagerInfo) SetTo(v VirtualMachineHypervisorManagerInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineHypervisorManagerInfo) Get() (v VirtualMachineHypervisorManagerInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineHypervisorManagerInfo) Or(d VirtualMachineHypervisorManagerInfo) VirtualMachineHypervisorManagerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineNetworkAdaptersItemMacAddressType returns new OptVirtualMachineNetworkAdaptersItemMacAddressType with value set to v.
func NewOptVirtualMachineNetworkAdaptersItemMacAddressType(v VirtualMachineNetworkAdaptersItemMacAddressType) OptVirtualMachineNetworkAdaptersItemMacAddressType {
	return OptVirtualMachineNetworkAdaptersItemMacAddressType{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineNetworkAdaptersItemMacAddressType is optional VirtualMachineNetworkAdaptersItemMacAddressType.
type OptVirtualMachineNetworkAdaptersItemMacAddressType struct {
	Value VirtualMachineNetworkAdaptersItemMacAddressType
	Set   bool
}

// IsSet returns true if OptVirtualMachineNetworkAdaptersItemMacAddressType was set.
func (o OptVirtualMachineNetworkAdaptersItemMacAddressType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineNetworkAdaptersItemMacAddressType) Reset() {
	var v VirtualMachineNetworkAdaptersItemMacAddressType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineNetworkAdaptersItemMacAddressType) SetTo(v VirtualMachineNetworkAdaptersItemMacAddressType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineNetworkAdaptersItemMacAddressType) Get() (v VirtualMachineNetworkAdaptersItemMacAddressType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineNetworkAdaptersItemMacAddressType) Or(d VirtualMachineNetworkAdaptersItemMacAddressType) VirtualMachineNetworkAdaptersItemMacAddressType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineNetworkAdaptersItemNetworkDetails returns new OptVirtualMachineNetworkAdaptersItemNetworkDetails with value set to v.
func NewOptVirtualMachineNetworkAdaptersItemNetworkDetails(v VirtualMachineNetworkAdaptersItemNetworkDetails) OptVirtualMachineNetworkAdaptersItemNetworkDetails {
	return OptVirtualMachineNetworkAdaptersItemNetworkDetails{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineNetworkAdaptersItemNetworkDetails is optional VirtualMachineNetworkAdaptersItemNetworkDetails.
type OptVirtualMachineNetworkAdaptersItemNetworkDetails struct {
	Value VirtualMachineNetworkAdaptersItemNetworkDetails
	Set   bool
}

// IsSet returns true if OptVirtualMachineNetworkAdaptersItemNetworkDetails was set.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetails) Reset() {
	var v VirtualMachineNetworkAdaptersItemNetworkDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetails) SetTo(v VirtualMachineNetworkAdaptersItemNetworkDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetails) Get() (v VirtualMachineNetworkAdaptersItemNetworkDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetails) Or(d VirtualMachineNetworkAdaptersItemNetworkDetails) VirtualMachineNetworkAdaptersItemNetworkDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineNetworkAdaptersItemNetworkDetailsState returns new OptVirtualMachineNetworkAdaptersItemNetworkDetailsState with value set to v.
func NewOptVirtualMachineNetworkAdaptersItemNetworkDetailsState(v VirtualMachineNetworkAdaptersItemNetworkDetailsState) OptVirtualMachineNetworkAdaptersItemNetworkDetailsState {
	return OptVirtualMachineNetworkAdaptersItemNetworkDetailsState{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineNetworkAdaptersItemNetworkDetailsState is optional VirtualMachineNetworkAdaptersItemNetworkDetailsState.
type OptVirtualMachineNetworkAdaptersItemNetworkDetailsState struct {
	Value VirtualMachineNetworkAdaptersItemNetworkDetailsState
	Set   bool
}

// IsSet returns true if OptVirtualMachineNetworkAdaptersItemNetworkDetailsState was set.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) Reset() {
	var v VirtualMachineNetworkAdaptersItemNetworkDetailsState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) SetTo(v VirtualMachineNetworkAdaptersItemNetworkDetailsState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) Get() (v VirtualMachineNetworkAdaptersItemNetworkDetailsState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) Or(d VirtualMachineNetworkAdaptersItemNetworkDetailsState) VirtualMachineNetworkAdaptersItemNetworkDetailsState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachinePowerState returns new OptVirtualMachinePowerState with value set to v.
func NewOptVirtualMachinePowerState(v VirtualMachinePowerState) OptVirtualMachinePowerState {
	return OptVirtualMachinePowerState{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachinePowerState is optional VirtualMachinePowerState.
type OptVirtualMachinePowerState struct {
	Value VirtualMachinePowerState
	Set   bool
}

// IsSet returns true if OptVirtualMachinePowerState was set.
func (o OptVirtualMachinePowerState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachinePowerState) Reset() {
	var v VirtualMachinePowerState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachinePowerState) SetTo(v VirtualMachinePowerState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachinePowerState) Get() (v VirtualMachinePowerState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachinePowerState) Or(d VirtualMachinePowerState) VirtualMachinePowerState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineState returns new OptVirtualMachineState with value set to v.
func NewOptVirtualMachineState(v VirtualMachineState) OptVirtualMachineState {
	return OptVirtualMachineState{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineState is optional VirtualMachineState.
type OptVirtualMachineState struct {
	Value VirtualMachineState
	Set   bool
}

// IsSet returns true if OptVirtualMachineState was set.
func (o OptVirtualMachineState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineState) Reset() {
	var v VirtualMachineState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineState) SetTo(v VirtualMachineState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineState) Get() (v VirtualMachineState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineState) Or(d VirtualMachineState) VirtualMachineState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineStatus returns new OptVirtualMachineStatus with value set to v.
func NewOptVirtualMachineStatus(v VirtualMachineStatus) OptVirtualMachineStatus {
	return OptVirtualMachineStatus{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineStatus is optional VirtualMachineStatus.
type OptVirtualMachineStatus struct {
	Value VirtualMachineStatus
	Set   bool
}

// IsSet returns true if OptVirtualMachineStatus was set.
func (o OptVirtualMachineStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineStatus) Reset() {
	var v VirtualMachineStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineStatus) SetTo(v VirtualMachineStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineStatus) Get() (v VirtualMachineStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineStatus) Or(d VirtualMachineStatus) VirtualMachineStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVirtualDisksItemAppInfo returns new OptVirtualMachineVirtualDisksItemAppInfo with value set to v.
func NewOptVirtualMachineVirtualDisksItemAppInfo(v VirtualMachineVirtualDisksItemAppInfo) OptVirtualMachineVirtualDisksItemAppInfo {
	return OptVirtualMachineVirtualDisksItemAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVirtualDisksItemAppInfo is optional VirtualMachineVirtualDisksItemAppInfo.
type OptVirtualMachineVirtualDisksItemAppInfo struct {
	Value VirtualMachineVirtualDisksItemAppInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineVirtualDisksItemAppInfo was set.
func (o OptVirtualMachineVirtualDisksItemAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVirtualDisksItemAppInfo) Reset() {
	var v VirtualMachineVirtualDisksItemAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVirtualDisksItemAppInfo) SetTo(v VirtualMachineVirtualDisksItemAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVirtualDisksItemAppInfo) Get() (v VirtualMachineVirtualDisksItemAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVirtualDisksItemAppInfo) Or(d VirtualMachineVirtualDisksItemAppInfo) VirtualMachineVirtualDisksItemAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVirtualDisksItemAppInfoVmware returns new OptVirtualMachineVirtualDisksItemAppInfoVmware with value set to v.
func NewOptVirtualMachineVirtualDisksItemAppInfoVmware(v VirtualMachineVirtualDisksItemAppInfoVmware) OptVirtualMachineVirtualDisksItemAppInfoVmware {
	return OptVirtualMachineVirtualDisksItemAppInfoVmware{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVirtualDisksItemAppInfoVmware is optional VirtualMachineVirtualDisksItemAppInfoVmware.
type OptVirtualMachineVirtualDisksItemAppInfoVmware struct {
	Value VirtualMachineVirtualDisksItemAppInfoVmware
	Set   bool
}

// IsSet returns true if OptVirtualMachineVirtualDisksItemAppInfoVmware was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmware) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmware) Reset() {
	var v VirtualMachineVirtualDisksItemAppInfoVmware
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmware) SetTo(v VirtualMachineVirtualDisksItemAppInfoVmware) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmware) Get() (v VirtualMachineVirtualDisksItemAppInfoVmware, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmware) Or(d VirtualMachineVirtualDisksItemAppInfoVmware) VirtualMachineVirtualDisksItemAppInfoVmware {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo returns new OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo with value set to v.
func NewOptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo(v VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo {
	return OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo is optional VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo.
type OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo struct {
	Value VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Reset() {
	var v VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetTo(v VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Get() (v VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) Or(d VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVirtualDisksItemAppInfoVmwareType returns new OptVirtualMachineVirtualDisksItemAppInfoVmwareType with value set to v.
func NewOptVirtualMachineVirtualDisksItemAppInfoVmwareType(v VirtualMachineVirtualDisksItemAppInfoVmwareType) OptVirtualMachineVirtualDisksItemAppInfoVmwareType {
	return OptVirtualMachineVirtualDisksItemAppInfoVmwareType{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVirtualDisksItemAppInfoVmwareType is optional VirtualMachineVirtualDisksItemAppInfoVmwareType.
type OptVirtualMachineVirtualDisksItemAppInfoVmwareType struct {
	Value VirtualMachineVirtualDisksItemAppInfoVmwareType
	Set   bool
}

// IsSet returns true if OptVirtualMachineVirtualDisksItemAppInfoVmwareType was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareType) Reset() {
	var v VirtualMachineVirtualDisksItemAppInfoVmwareType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVirtualDisksItemAppInfoVmwareType) SetTo(v VirtualMachineVirtualDisksItemAppInfoVmwareType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareType) Get() (v VirtualMachineVirtualDisksItemAppInfoVmwareType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVirtualDisksItemAppInfoVmwareType) Or(d VirtualMachineVirtualDisksItemAppInfoVmwareType) VirtualMachineVirtualDisksItemAppInfoVmwareType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVmClassification returns new OptVirtualMachineVmClassification with value set to v.
func NewOptVirtualMachineVmClassification(v VirtualMachineVmClassification) OptVirtualMachineVmClassification {
	return OptVirtualMachineVmClassification{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVmClassification is optional VirtualMachineVmClassification.
type OptVirtualMachineVmClassification struct {
	Value VirtualMachineVmClassification
	Set   bool
}

// IsSet returns true if OptVirtualMachineVmClassification was set.
func (o OptVirtualMachineVmClassification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVmClassification) Reset() {
	var v VirtualMachineVmClassification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVmClassification) SetTo(v VirtualMachineVmClassification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVmClassification) Get() (v VirtualMachineVmClassification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVmClassification) Or(d VirtualMachineVmClassification) VirtualMachineVmClassification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVirtualMachineVmPerfMetricInfo returns new OptVirtualMachineVmPerfMetricInfo with value set to v.
func NewOptVirtualMachineVmPerfMetricInfo(v VirtualMachineVmPerfMetricInfo) OptVirtualMachineVmPerfMetricInfo {
	return OptVirtualMachineVmPerfMetricInfo{
		Value: v,
		Set:   true,
	}
}

// OptVirtualMachineVmPerfMetricInfo is optional VirtualMachineVmPerfMetricInfo.
type OptVirtualMachineVmPerfMetricInfo struct {
	Value VirtualMachineVmPerfMetricInfo
	Set   bool
}

// IsSet returns true if OptVirtualMachineVmPerfMetricInfo was set.
func (o OptVirtualMachineVmPerfMetricInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVirtualMachineVmPerfMetricInfo) Reset() {
	var v VirtualMachineVmPerfMetricInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVirtualMachineVmPerfMetricInfo) SetTo(v VirtualMachineVmPerfMetricInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVirtualMachineVmPerfMetricInfo) Get() (v VirtualMachineVmPerfMetricInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVirtualMachineVmPerfMetricInfo) Or(d VirtualMachineVmPerfMetricInfo) VirtualMachineVmPerfMetricInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVolumeSetInfo returns new OptVolumeSetInfo with value set to v.
func NewOptVolumeSetInfo(v VolumeSetInfo) OptVolumeSetInfo {
	return OptVolumeSetInfo{
		Value: v,
		Set:   true,
	}
}

// OptVolumeSetInfo is optional VolumeSetInfo.
type OptVolumeSetInfo struct {
	Value VolumeSetInfo
	Set   bool
}

// IsSet returns true if OptVolumeSetInfo was set.
func (o OptVolumeSetInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVolumeSetInfo) Reset() {
	var v VolumeSetInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVolumeSetInfo) SetTo(v VolumeSetInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVolumeSetInfo) Get() (v VolumeSetInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVolumeSetInfo) Or(d VolumeSetInfo) VolumeSetInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Describes applied protection policy information.
// Ref: #/components/schemas/ProtectionPolicyAppliedAtInfo
type ProtectionPolicyAppliedAtInfo struct {
	// UUID string uniquely identifying the protection policy.
	ID OptString `json:"id"`
	// Name of the protection policy.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of the protection policy.
	Type OptProtectionPolicyAppliedAtInfoType `json:"type"`
}

// GetID returns the value of ID.
func (s *ProtectionPolicyAppliedAtInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProtectionPolicyAppliedAtInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *ProtectionPolicyAppliedAtInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *ProtectionPolicyAppliedAtInfo) GetType() OptProtectionPolicyAppliedAtInfoType {
	return s.Type
}

// SetID sets the value of ID.
func (s *ProtectionPolicyAppliedAtInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProtectionPolicyAppliedAtInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *ProtectionPolicyAppliedAtInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *ProtectionPolicyAppliedAtInfo) SetType(val OptProtectionPolicyAppliedAtInfoType) {
	s.Type = val
}

// Type of the protection policy.
type ProtectionPolicyAppliedAtInfoType string

const (
	ProtectionPolicyAppliedAtInfoTypeDATASTORE         ProtectionPolicyAppliedAtInfoType = "DATASTORE"
	ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE    ProtectionPolicyAppliedAtInfoType = "VIRTUAL_MACHINE"
	ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP ProtectionPolicyAppliedAtInfoType = "VM_PROTECTION_GROUP"
)

// AllValues returns all ProtectionPolicyAppliedAtInfoType values.
func (ProtectionPolicyAppliedAtInfoType) AllValues() []ProtectionPolicyAppliedAtInfoType {
	return []ProtectionPolicyAppliedAtInfoType{
		ProtectionPolicyAppliedAtInfoTypeDATASTORE,
		ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE,
		ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProtectionPolicyAppliedAtInfoType) MarshalText() ([]byte, error) {
	switch s {
	case ProtectionPolicyAppliedAtInfoTypeDATASTORE:
		return []byte(s), nil
	case ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE:
		return []byte(s), nil
	case ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProtectionPolicyAppliedAtInfoType) UnmarshalText(data []byte) error {
	switch ProtectionPolicyAppliedAtInfoType(data) {
	case ProtectionPolicyAppliedAtInfoTypeDATASTORE:
		*s = ProtectionPolicyAppliedAtInfoTypeDATASTORE
		return nil
	case ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE:
		*s = ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE
		return nil
	case ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP:
		*s = ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Provides the current protection status of this resource. - UNPROTECTED - No policy assigned, No
// recovery points exists - LAPSED      - No policy assigned, at least one recovery points exists -
// PENDING     - Policy assigned, No recovery points exists - PARTIAL     - Policy assigned, At least
// one recovery point exists - PROTECTED   - Policy assigned, most recent run of every configured
// schedule is successful - PAUSED      - Policy assigned, one or more of the schedules are paused -
// UNSUPPORTED - No policy can be assigned.
// Ref: #/components/schemas/protectionStatus
type ProtectionStatus string

const (
	ProtectionStatusUNPROTECTED ProtectionStatus = "UNPROTECTED"
	ProtectionStatusLAPSED      ProtectionStatus = "LAPSED"
	ProtectionStatusPENDING     ProtectionStatus = "PENDING"
	ProtectionStatusPARTIAL     ProtectionStatus = "PARTIAL"
	ProtectionStatusPROTECTED   ProtectionStatus = "PROTECTED"
	ProtectionStatusPAUSED      ProtectionStatus = "PAUSED"
	ProtectionStatusUNSUPPORTED ProtectionStatus = "UNSUPPORTED"
)

// AllValues returns all ProtectionStatus values.
func (ProtectionStatus) AllValues() []ProtectionStatus {
	return []ProtectionStatus{
		ProtectionStatusUNPROTECTED,
		ProtectionStatusLAPSED,
		ProtectionStatusPENDING,
		ProtectionStatusPARTIAL,
		ProtectionStatusPROTECTED,
		ProtectionStatusPAUSED,
		ProtectionStatusUNSUPPORTED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProtectionStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProtectionStatusUNPROTECTED:
		return []byte(s), nil
	case ProtectionStatusLAPSED:
		return []byte(s), nil
	case ProtectionStatusPENDING:
		return []byte(s), nil
	case ProtectionStatusPARTIAL:
		return []byte(s), nil
	case ProtectionStatusPROTECTED:
		return []byte(s), nil
	case ProtectionStatusPAUSED:
		return []byte(s), nil
	case ProtectionStatusUNSUPPORTED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProtectionStatus) UnmarshalText(data []byte) error {
	switch ProtectionStatus(data) {
	case ProtectionStatusUNPROTECTED:
		*s = ProtectionStatusUNPROTECTED
		return nil
	case ProtectionStatusLAPSED:
		*s = ProtectionStatusLAPSED
		return nil
	case ProtectionStatusPENDING:
		*s = ProtectionStatusPENDING
		return nil
	case ProtectionStatusPARTIAL:
		*s = ProtectionStatusPARTIAL
		return nil
	case ProtectionStatusPROTECTED:
		*s = ProtectionStatusPROTECTED
		return nil
	case ProtectionStatusPAUSED:
		*s = ProtectionStatusPAUSED
		return nil
	case ProtectionStatusUNSUPPORTED:
		*s = ProtectionStatusUNSUPPORTED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RecoveryPointsExist bool

type Services []string

// Information of storage folder.
// Ref: #/components/schemas/StorageFolderInfo
type StorageFolderInfo struct {
	// A user-friendly name that identifies the storage folder.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage folder.
	ID OptString `json:"id"`
	// Name of the storage folder.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of storage folder.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StorageFolderInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StorageFolderInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *StorageFolderInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StorageFolderInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *StorageFolderInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *StorageFolderInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StorageFolderInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *StorageFolderInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StorageFolderInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *StorageFolderInfo) SetType(val OptString) {
	s.Type = val
}

// Describes a storage pool.
// Ref: #/components/schemas/StoragePoolInfo
type StoragePoolInfo struct {
	// A user-friendly name that identifies the storage pool.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage pool.
	ID OptString `json:"id"`
	// Name of the storage pool.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of storage pool.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StoragePoolInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StoragePoolInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *StoragePoolInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StoragePoolInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *StoragePoolInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *StoragePoolInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StoragePoolInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *StoragePoolInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StoragePoolInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *StoragePoolInfo) SetType(val OptString) {
	s.Type = val
}

// Describes a storage system.
// Ref: #/components/schemas/StorageSystemInfo
type StorageSystemInfo struct {
	// A user-friendly name that identifies the storage system.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage system.
	ID OptString `json:"id"`
	// Specify if the storage system is registered.
	Managed OptBool `json:"managed"`
	// Name of the storage system.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Serial number of the storage system.
	SerialNumber OptString `json:"serialNumber"`
	// Type of storage system.
	Type OptStorageSystemInfoType `json:"type"`
	// Storage system provider name.
	VendorName OptString `json:"vendorName"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StorageSystemInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StorageSystemInfo) GetID() OptString {
	return s.ID
}

// GetManaged returns the value of Managed.
func (s *StorageSystemInfo) GetManaged() OptBool {
	return s.Managed
}

// GetName returns the value of Name.
func (s *StorageSystemInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StorageSystemInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetSerialNumber returns the value of SerialNumber.
func (s *StorageSystemInfo) GetSerialNumber() OptString {
	return s.SerialNumber
}

// GetType returns the value of Type.
func (s *StorageSystemInfo) GetType() OptStorageSystemInfoType {
	return s.Type
}

// GetVendorName returns the value of VendorName.
func (s *StorageSystemInfo) GetVendorName() OptString {
	return s.VendorName
}

// SetDisplayName sets the value of DisplayName.
func (s *StorageSystemInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StorageSystemInfo) SetID(val OptString) {
	s.ID = val
}

// SetManaged sets the value of Managed.
func (s *StorageSystemInfo) SetManaged(val OptBool) {
	s.Managed = val
}

// SetName sets the value of Name.
func (s *StorageSystemInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StorageSystemInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetSerialNumber sets the value of SerialNumber.
func (s *StorageSystemInfo) SetSerialNumber(val OptString) {
	s.SerialNumber = val
}

// SetType sets the value of Type.
func (s *StorageSystemInfo) SetType(val OptStorageSystemInfoType) {
	s.Type = val
}

// SetVendorName sets the value of VendorName.
func (s *StorageSystemInfo) SetVendorName(val OptString) {
	s.VendorName = val
}

// Type of storage system.
type StorageSystemInfoType string

const (
	StorageSystemInfoTypeNIMBLE      StorageSystemInfoType = "NIMBLE"
	StorageSystemInfoTypeTHREEPAR    StorageSystemInfoType = "THREEPAR"
	StorageSystemInfoTypePRIMERA     StorageSystemInfoType = "PRIMERA"
	StorageSystemInfoTypeALLETRA6000 StorageSystemInfoType = "ALLETRA_6000"
	StorageSystemInfoTypeALLETRA9000 StorageSystemInfoType = "ALLETRA_9000"
)

// AllValues returns all StorageSystemInfoType values.
func (StorageSystemInfoType) AllValues() []StorageSystemInfoType {
	return []StorageSystemInfoType{
		StorageSystemInfoTypeNIMBLE,
		StorageSystemInfoTypeTHREEPAR,
		StorageSystemInfoTypePRIMERA,
		StorageSystemInfoTypeALLETRA6000,
		StorageSystemInfoTypeALLETRA9000,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StorageSystemInfoType) MarshalText() ([]byte, error) {
	switch s {
	case StorageSystemInfoTypeNIMBLE:
		return []byte(s), nil
	case StorageSystemInfoTypeTHREEPAR:
		return []byte(s), nil
	case StorageSystemInfoTypePRIMERA:
		return []byte(s), nil
	case StorageSystemInfoTypeALLETRA6000:
		return []byte(s), nil
	case StorageSystemInfoTypeALLETRA9000:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StorageSystemInfoType) UnmarshalText(data []byte) error {
	switch StorageSystemInfoType(data) {
	case StorageSystemInfoTypeNIMBLE:
		*s = StorageSystemInfoTypeNIMBLE
		return nil
	case StorageSystemInfoTypeTHREEPAR:
		*s = StorageSystemInfoTypeTHREEPAR
		return nil
	case StorageSystemInfoTypePRIMERA:
		*s = StorageSystemInfoTypePRIMERA
		return nil
	case StorageSystemInfoTypeALLETRA6000:
		*s = StorageSystemInfoTypeALLETRA6000
		return nil
	case StorageSystemInfoTypeALLETRA9000:
		*s = StorageSystemInfoTypeALLETRA9000
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Type string

// Represents a single instance of a Virtual Machine.
// Ref: #/components/schemas/VirtualMachine
type VirtualMachine struct {
	// List of allowed operation on the virtual machine.
	AllowedOperations []VirtualMachineAllowedOperationsItem `json:"allowedOperations"`
	// Application specific information for this virtual machine.
	AppInfo OptVirtualMachineAppInfo `json:"appInfo"`
	// Type of the application to which the VM belongs.
	AppType OptVirtualMachineAppType `json:"appType"`
	// Size of the virtual machine in bytes.
	CapacityInBytes OptInt64                     `json:"capacityInBytes"`
	ClusterInfo     OptVirtualMachineClusterInfo `json:"clusterInfo"`
	// Compute information of the virtual machine.
	ComputeInfo OptVirtualMachineComputeInfo `json:"computeInfo"`
	// Time in UTC at which the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// The customer application identifier.
	CustomerId OptString `json:"customerId"`
	// A user-friendly name that identifies the virtual machine.
	DisplayName OptString `json:"displayName"`
	// The immediate parent folder on which this resource is hosted in the inventory of
	// hypervisor-manager.
	FolderInfo OptVirtualMachineFolderInfo `json:"folderInfo"`
	Generation Generation                  `json:"generation"`
	// Information of this guest OS running on the virtual machine.
	GuestInfo OptVirtualMachineGuestInfo `json:"guestInfo"`
	// UUID string uniquely identifying the HCI cluster.
	HciClusterUuid        OptString                              `json:"hciClusterUuid"`
	HostInfo              OptVirtualMachineHostInfo              `json:"hostInfo"`
	HypervisorManagerInfo OptVirtualMachineHypervisorManagerInfo `json:"hypervisorManagerInfo"`
	// UUID string uniquely identifying the virtual machine.
	ID string `json:"id"`
	// Name of the virtual machine as configured in the hypervisor manager.
	Name            OptString                           `json:"name"`
	NetworkAdapters []VirtualMachineNetworkAdaptersItem `json:"networkAdapters"`
	// IP address of the virtual machine.
	NetworkAddress OptString `json:"networkAddress"`
	// This provides the information power state of the virtual machine.
	PowerState                    OptVirtualMachinePowerState      `json:"powerState"`
	ProtectionJobInfo             OptDataManagementJobInfo         `json:"protectionJobInfo"`
	ProtectionPolicyAppliedAtInfo OptProtectionPolicyAppliedAtInfo `json:"protectionPolicyAppliedAtInfo"`
	ProtectionStatus              OptProtectionStatus              `json:"protectionStatus"`
	RecoveryPointsExist           OptRecoveryPointsExist           `json:"recoveryPointsExist"`
	// The 'self' reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Services    Services  `json:"services"`
	// The current state of the virtual machine.
	State OptVirtualMachineState `json:"state"`
	// Brief reason for the current state of the virtual machine.
	StateReason OptString `json:"stateReason"`
	// The current status of the virtual machine.
	Status OptVirtualMachineStatus `json:"status"`
	Type   Type                    `json:"type"`
	// Unique identifier of the virtual machine as reported by the hypervisor.
	UID OptUUID `json:"uid"`
	// Time in UTC at which the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// Indicates it is a vCLS virtual machine or not.
	VclsVm OptBool `json:"vclsVm"`
	// A list of objects encapsulating information about the storage disks provisioned to a virtual
	// machine.
	VirtualDisks []VirtualMachineVirtualDisksItem `json:"virtualDisks"`
	// Classification of different system/control VM types.
	VmClassification OptVirtualMachineVmClassification `json:"vmClassification"`
	// VM configuration path of the virtual machine.
	VmConfigPath OptString `json:"vmConfigPath"`
	// Virtual machine performance metrics.
	VmPerfMetricInfo OptVirtualMachineVmPerfMetricInfo `json:"vmPerfMetricInfo"`
	// Protection groups related to the virtual machine.
	VmProtectionGroupsInfo []VmProtectionGroupInfo `json:"vmProtectionGroupsInfo"`
	// Volumes associated with this virtual machine.
	VolumesInfo []VolumeInfo `json:"volumesInfo"`
}

// GetAllowedOperations returns the value of AllowedOperations.
func (s *VirtualMachine) GetAllowedOperations() []VirtualMachineAllowedOperationsItem {
	return s.AllowedOperations
}

// GetAppInfo returns the value of AppInfo.
func (s *VirtualMachine) GetAppInfo() OptVirtualMachineAppInfo {
	return s.AppInfo
}

// GetAppType returns the value of AppType.
func (s *VirtualMachine) GetAppType() OptVirtualMachineAppType {
	return s.AppType
}

// GetCapacityInBytes returns the value of CapacityInBytes.
func (s *VirtualMachine) GetCapacityInBytes() OptInt64 {
	return s.CapacityInBytes
}

// GetClusterInfo returns the value of ClusterInfo.
func (s *VirtualMachine) GetClusterInfo() OptVirtualMachineClusterInfo {
	return s.ClusterInfo
}

// GetComputeInfo returns the value of ComputeInfo.
func (s *VirtualMachine) GetComputeInfo() OptVirtualMachineComputeInfo {
	return s.ComputeInfo
}

// GetCreatedAt returns the value of CreatedAt.
func (s *VirtualMachine) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCustomerId returns the value of CustomerId.
func (s *VirtualMachine) GetCustomerId() OptString {
	return s.CustomerId
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachine) GetDisplayName() OptString {
	return s.DisplayName
}

// GetFolderInfo returns the value of FolderInfo.
func (s *VirtualMachine) GetFolderInfo() OptVirtualMachineFolderInfo {
	return s.FolderInfo
}

// GetGeneration returns the value of Generation.
func (s *VirtualMachine) GetGeneration() Generation {
	return s.Generation
}

// GetGuestInfo returns the value of GuestInfo.
func (s *VirtualMachine) GetGuestInfo() OptVirtualMachineGuestInfo {
	return s.GuestInfo
}

// GetHciClusterUuid returns the value of HciClusterUuid.
func (s *VirtualMachine) GetHciClusterUuid() OptString {
	return s.HciClusterUuid
}

// GetHostInfo returns the value of HostInfo.
func (s *VirtualMachine) GetHostInfo() OptVirtualMachineHostInfo {
	return s.HostInfo
}

// GetHypervisorManagerInfo returns the value of HypervisorManagerInfo.
func (s *VirtualMachine) GetHypervisorManagerInfo() OptVirtualMachineHypervisorManagerInfo {
	return s.HypervisorManagerInfo
}

// GetID returns the value of ID.
func (s *VirtualMachine) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachine) GetName() OptString {
	return s.Name
}

// GetNetworkAdapters returns the value of NetworkAdapters.
func (s *VirtualMachine) GetNetworkAdapters() []VirtualMachineNetworkAdaptersItem {
	return s.NetworkAdapters
}

// GetNetworkAddress returns the value of NetworkAddress.
func (s *VirtualMachine) GetNetworkAddress() OptString {
	return s.NetworkAddress
}

// GetPowerState returns the value of PowerState.
func (s *VirtualMachine) GetPowerState() OptVirtualMachinePowerState {
	return s.PowerState
}

// GetProtectionJobInfo returns the value of ProtectionJobInfo.
func (s *VirtualMachine) GetProtectionJobInfo() OptDataManagementJobInfo {
	return s.ProtectionJobInfo
}

// GetProtectionPolicyAppliedAtInfo returns the value of ProtectionPolicyAppliedAtInfo.
func (s *VirtualMachine) GetProtectionPolicyAppliedAtInfo() OptProtectionPolicyAppliedAtInfo {
	return s.ProtectionPolicyAppliedAtInfo
}

// GetProtectionStatus returns the value of ProtectionStatus.
func (s *VirtualMachine) GetProtectionStatus() OptProtectionStatus {
	return s.ProtectionStatus
}

// GetRecoveryPointsExist returns the value of RecoveryPointsExist.
func (s *VirtualMachine) GetRecoveryPointsExist() OptRecoveryPointsExist {
	return s.RecoveryPointsExist
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachine) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetServices returns the value of Services.
func (s *VirtualMachine) GetServices() Services {
	return s.Services
}

// GetState returns the value of State.
func (s *VirtualMachine) GetState() OptVirtualMachineState {
	return s.State
}

// GetStateReason returns the value of StateReason.
func (s *VirtualMachine) GetStateReason() OptString {
	return s.StateReason
}

// GetStatus returns the value of Status.
func (s *VirtualMachine) GetStatus() OptVirtualMachineStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *VirtualMachine) GetType() Type {
	return s.Type
}

// GetUID returns the value of UID.
func (s *VirtualMachine) GetUID() OptUUID {
	return s.UID
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *VirtualMachine) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetVclsVm returns the value of VclsVm.
func (s *VirtualMachine) GetVclsVm() OptBool {
	return s.VclsVm
}

// GetVirtualDisks returns the value of VirtualDisks.
func (s *VirtualMachine) GetVirtualDisks() []VirtualMachineVirtualDisksItem {
	return s.VirtualDisks
}

// GetVmClassification returns the value of VmClassification.
func (s *VirtualMachine) GetVmClassification() OptVirtualMachineVmClassification {
	return s.VmClassification
}

// GetVmConfigPath returns the value of VmConfigPath.
func (s *VirtualMachine) GetVmConfigPath() OptString {
	return s.VmConfigPath
}

// GetVmPerfMetricInfo returns the value of VmPerfMetricInfo.
func (s *VirtualMachine) GetVmPerfMetricInfo() OptVirtualMachineVmPerfMetricInfo {
	return s.VmPerfMetricInfo
}

// GetVmProtectionGroupsInfo returns the value of VmProtectionGroupsInfo.
func (s *VirtualMachine) GetVmProtectionGroupsInfo() []VmProtectionGroupInfo {
	return s.VmProtectionGroupsInfo
}

// GetVolumesInfo returns the value of VolumesInfo.
func (s *VirtualMachine) GetVolumesInfo() []VolumeInfo {
	return s.VolumesInfo
}

// SetAllowedOperations sets the value of AllowedOperations.
func (s *VirtualMachine) SetAllowedOperations(val []VirtualMachineAllowedOperationsItem) {
	s.AllowedOperations = val
}

// SetAppInfo sets the value of AppInfo.
func (s *VirtualMachine) SetAppInfo(val OptVirtualMachineAppInfo) {
	s.AppInfo = val
}

// SetAppType sets the value of AppType.
func (s *VirtualMachine) SetAppType(val OptVirtualMachineAppType) {
	s.AppType = val
}

// SetCapacityInBytes sets the value of CapacityInBytes.
func (s *VirtualMachine) SetCapacityInBytes(val OptInt64) {
	s.CapacityInBytes = val
}

// SetClusterInfo sets the value of ClusterInfo.
func (s *VirtualMachine) SetClusterInfo(val OptVirtualMachineClusterInfo) {
	s.ClusterInfo = val
}

// SetComputeInfo sets the value of ComputeInfo.
func (s *VirtualMachine) SetComputeInfo(val OptVirtualMachineComputeInfo) {
	s.ComputeInfo = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *VirtualMachine) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCustomerId sets the value of CustomerId.
func (s *VirtualMachine) SetCustomerId(val OptString) {
	s.CustomerId = val
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachine) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetFolderInfo sets the value of FolderInfo.
func (s *VirtualMachine) SetFolderInfo(val OptVirtualMachineFolderInfo) {
	s.FolderInfo = val
}

// SetGeneration sets the value of Generation.
func (s *VirtualMachine) SetGeneration(val Generation) {
	s.Generation = val
}

// SetGuestInfo sets the value of GuestInfo.
func (s *VirtualMachine) SetGuestInfo(val OptVirtualMachineGuestInfo) {
	s.GuestInfo = val
}

// SetHciClusterUuid sets the value of HciClusterUuid.
func (s *VirtualMachine) SetHciClusterUuid(val OptString) {
	s.HciClusterUuid = val
}

// SetHostInfo sets the value of HostInfo.
func (s *VirtualMachine) SetHostInfo(val OptVirtualMachineHostInfo) {
	s.HostInfo = val
}

// SetHypervisorManagerInfo sets the value of HypervisorManagerInfo.
func (s *VirtualMachine) SetHypervisorManagerInfo(val OptVirtualMachineHypervisorManagerInfo) {
	s.HypervisorManagerInfo = val
}

// SetID sets the value of ID.
func (s *VirtualMachine) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachine) SetName(val OptString) {
	s.Name = val
}

// SetNetworkAdapters sets the value of NetworkAdapters.
func (s *VirtualMachine) SetNetworkAdapters(val []VirtualMachineNetworkAdaptersItem) {
	s.NetworkAdapters = val
}

// SetNetworkAddress sets the value of NetworkAddress.
func (s *VirtualMachine) SetNetworkAddress(val OptString) {
	s.NetworkAddress = val
}

// SetPowerState sets the value of PowerState.
func (s *VirtualMachine) SetPowerState(val OptVirtualMachinePowerState) {
	s.PowerState = val
}

// SetProtectionJobInfo sets the value of ProtectionJobInfo.
func (s *VirtualMachine) SetProtectionJobInfo(val OptDataManagementJobInfo) {
	s.ProtectionJobInfo = val
}

// SetProtectionPolicyAppliedAtInfo sets the value of ProtectionPolicyAppliedAtInfo.
func (s *VirtualMachine) SetProtectionPolicyAppliedAtInfo(val OptProtectionPolicyAppliedAtInfo) {
	s.ProtectionPolicyAppliedAtInfo = val
}

// SetProtectionStatus sets the value of ProtectionStatus.
func (s *VirtualMachine) SetProtectionStatus(val OptProtectionStatus) {
	s.ProtectionStatus = val
}

// SetRecoveryPointsExist sets the value of RecoveryPointsExist.
func (s *VirtualMachine) SetRecoveryPointsExist(val OptRecoveryPointsExist) {
	s.RecoveryPointsExist = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachine) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetServices sets the value of Services.
func (s *VirtualMachine) SetServices(val Services) {
	s.Services = val
}

// SetState sets the value of State.
func (s *VirtualMachine) SetState(val OptVirtualMachineState) {
	s.State = val
}

// SetStateReason sets the value of StateReason.
func (s *VirtualMachine) SetStateReason(val OptString) {
	s.StateReason = val
}

// SetStatus sets the value of Status.
func (s *VirtualMachine) SetStatus(val OptVirtualMachineStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *VirtualMachine) SetType(val Type) {
	s.Type = val
}

// SetUID sets the value of UID.
func (s *VirtualMachine) SetUID(val OptUUID) {
	s.UID = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *VirtualMachine) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetVclsVm sets the value of VclsVm.
func (s *VirtualMachine) SetVclsVm(val OptBool) {
	s.VclsVm = val
}

// SetVirtualDisks sets the value of VirtualDisks.
func (s *VirtualMachine) SetVirtualDisks(val []VirtualMachineVirtualDisksItem) {
	s.VirtualDisks = val
}

// SetVmClassification sets the value of VmClassification.
func (s *VirtualMachine) SetVmClassification(val OptVirtualMachineVmClassification) {
	s.VmClassification = val
}

// SetVmConfigPath sets the value of VmConfigPath.
func (s *VirtualMachine) SetVmConfigPath(val OptString) {
	s.VmConfigPath = val
}

// SetVmPerfMetricInfo sets the value of VmPerfMetricInfo.
func (s *VirtualMachine) SetVmPerfMetricInfo(val OptVirtualMachineVmPerfMetricInfo) {
	s.VmPerfMetricInfo = val
}

// SetVmProtectionGroupsInfo sets the value of VmProtectionGroupsInfo.
func (s *VirtualMachine) SetVmProtectionGroupsInfo(val []VmProtectionGroupInfo) {
	s.VmProtectionGroupsInfo = val
}

// SetVolumesInfo sets the value of VolumesInfo.
func (s *VirtualMachine) SetVolumesInfo(val []VolumeInfo) {
	s.VolumesInfo = val
}

func (*VirtualMachine) getVmRes() {}

type VirtualMachineAllowedOperationsItem string

const (
	VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON         VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_POWER_ON"
	VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF        VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_POWER_OFF"
	VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET           VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_RESET"
	VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_SHUTDOWN_GUEST_OS"
	VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS  VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_RESTART_GUEST_OS"
	VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE          VirtualMachineAllowedOperationsItem = "VIRTUAL_MACHINE_DELETE"
)

// AllValues returns all VirtualMachineAllowedOperationsItem values.
func (VirtualMachineAllowedOperationsItem) AllValues() []VirtualMachineAllowedOperationsItem {
	return []VirtualMachineAllowedOperationsItem{
		VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON,
		VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF,
		VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET,
		VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS,
		VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS,
		VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineAllowedOperationsItem) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON:
		return []byte(s), nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF:
		return []byte(s), nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET:
		return []byte(s), nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS:
		return []byte(s), nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS:
		return []byte(s), nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineAllowedOperationsItem) UnmarshalText(data []byte) error {
	switch VirtualMachineAllowedOperationsItem(data) {
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWERON
		return nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEPOWEROFF
		return nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINERESET
		return nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINESHUTDOWNGUESTOS
		return nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINERESTARTGUESTOS
		return nil
	case VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE:
		*s = VirtualMachineAllowedOperationsItemVIRTUALMACHINEDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Application specific information for this virtual machine.
type VirtualMachineAppInfo struct {
	Vmware OptVirtualMachineAppInfoVmware `json:"vmware"`
}

// GetVmware returns the value of Vmware.
func (s *VirtualMachineAppInfo) GetVmware() OptVirtualMachineAppInfoVmware {
	return s.Vmware
}

// SetVmware sets the value of Vmware.
func (s *VirtualMachineAppInfo) SetVmware(val OptVirtualMachineAppInfoVmware) {
	s.Vmware = val
}

type VirtualMachineAppInfoVmware struct {
	DatacenterInfo OptDatacenterInfo `json:"datacenterInfo"`
	// References to all datastores that house virtual disks of this virtual machine.
	DatastoresInfo []VirtualMachineAppInfoVmwareDatastoresInfoItem `json:"datastoresInfo"`
	// VMware provided moref for this virtual machine.
	Moref OptString `json:"moref"`
	// Information about the VMware's resource pool to which the VM belongs to.
	ResourcePoolInfo OptVirtualMachineAppInfoVmwareResourcePoolInfo `json:"resourcePoolInfo"`
	// Information about the VMware tools installed in this virtual machine.
	ToolsInfo OptVirtualMachineAppInfoVmwareToolsInfo `json:"toolsInfo"`
	// Type of the virtual machine. - VMFS - virtual machine which is created from one or more VMFS
	// datastores. - VVOL - virtual machine which is created from a VVOL datastores. - NFS  - virtual
	// machine which is created from a NFS datastores. - VSAN - virtual machine which is created from a
	// VSAN datastores.
	Type OptVirtualMachineAppInfoVmwareType `json:"type"`
}

// GetDatacenterInfo returns the value of DatacenterInfo.
func (s *VirtualMachineAppInfoVmware) GetDatacenterInfo() OptDatacenterInfo {
	return s.DatacenterInfo
}

// GetDatastoresInfo returns the value of DatastoresInfo.
func (s *VirtualMachineAppInfoVmware) GetDatastoresInfo() []VirtualMachineAppInfoVmwareDatastoresInfoItem {
	return s.DatastoresInfo
}

// GetMoref returns the value of Moref.
func (s *VirtualMachineAppInfoVmware) GetMoref() OptString {
	return s.Moref
}

// GetResourcePoolInfo returns the value of ResourcePoolInfo.
func (s *VirtualMachineAppInfoVmware) GetResourcePoolInfo() OptVirtualMachineAppInfoVmwareResourcePoolInfo {
	return s.ResourcePoolInfo
}

// GetToolsInfo returns the value of ToolsInfo.
func (s *VirtualMachineAppInfoVmware) GetToolsInfo() OptVirtualMachineAppInfoVmwareToolsInfo {
	return s.ToolsInfo
}

// GetType returns the value of Type.
func (s *VirtualMachineAppInfoVmware) GetType() OptVirtualMachineAppInfoVmwareType {
	return s.Type
}

// SetDatacenterInfo sets the value of DatacenterInfo.
func (s *VirtualMachineAppInfoVmware) SetDatacenterInfo(val OptDatacenterInfo) {
	s.DatacenterInfo = val
}

// SetDatastoresInfo sets the value of DatastoresInfo.
func (s *VirtualMachineAppInfoVmware) SetDatastoresInfo(val []VirtualMachineAppInfoVmwareDatastoresInfoItem) {
	s.DatastoresInfo = val
}

// SetMoref sets the value of Moref.
func (s *VirtualMachineAppInfoVmware) SetMoref(val OptString) {
	s.Moref = val
}

// SetResourcePoolInfo sets the value of ResourcePoolInfo.
func (s *VirtualMachineAppInfoVmware) SetResourcePoolInfo(val OptVirtualMachineAppInfoVmwareResourcePoolInfo) {
	s.ResourcePoolInfo = val
}

// SetToolsInfo sets the value of ToolsInfo.
func (s *VirtualMachineAppInfoVmware) SetToolsInfo(val OptVirtualMachineAppInfoVmwareToolsInfo) {
	s.ToolsInfo = val
}

// SetType sets the value of Type.
func (s *VirtualMachineAppInfoVmware) SetType(val OptVirtualMachineAppInfoVmwareType) {
	s.Type = val
}

type VirtualMachineAppInfoVmwareDatastoresInfoItem struct {
	// A user-friendly name that identifies the datastore.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the datastore.
	ID OptString `json:"id"`
	// Name of the datastore as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineAppInfoVmwareDatastoresInfoItem) SetType(val OptType) {
	s.Type = val
}

// Information about the VMware's resource pool to which the VM belongs to.
type VirtualMachineAppInfoVmwareResourcePoolInfo struct {
	// A user-friendly name that identifies the hypervisor resource pool. This will always be same as
	// name since adding or updating hypervisor resource pools is not supported when managed from a
	// manager, such as the vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor resource pool resource.
	ID OptString `json:"id"`
	// VMware provided moref for this resource pool.
	Moref OptString `json:"moref"`
	// Name of the resource pool as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetID() OptString {
	return s.ID
}

// GetMoref returns the value of Moref.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetMoref() OptString {
	return s.Moref
}

// GetName returns the value of Name.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetID(val OptString) {
	s.ID = val
}

// SetMoref sets the value of Moref.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetMoref(val OptString) {
	s.Moref = val
}

// SetName sets the value of Name.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineAppInfoVmwareResourcePoolInfo) SetType(val OptType) {
	s.Type = val
}

// Information about the VMware tools installed in this virtual machine.
type VirtualMachineAppInfoVmwareToolsInfo struct {
	// Status of VMware Tools running in the guest operating system. Values are inline with the vCenter
	// provided values.
	Status OptVirtualMachineAppInfoVmwareToolsInfoStatus `json:"status"`
	// Type of the VMware tool installed in this virtual machine.
	Type OptString `json:"type"`
	// Version of the VMware tool installed in this virtual machine.
	Version OptString `json:"version"`
}

// GetStatus returns the value of Status.
func (s *VirtualMachineAppInfoVmwareToolsInfo) GetStatus() OptVirtualMachineAppInfoVmwareToolsInfoStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *VirtualMachineAppInfoVmwareToolsInfo) GetType() OptString {
	return s.Type
}

// GetVersion returns the value of Version.
func (s *VirtualMachineAppInfoVmwareToolsInfo) GetVersion() OptString {
	return s.Version
}

// SetStatus sets the value of Status.
func (s *VirtualMachineAppInfoVmwareToolsInfo) SetStatus(val OptVirtualMachineAppInfoVmwareToolsInfoStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *VirtualMachineAppInfoVmwareToolsInfo) SetType(val OptString) {
	s.Type = val
}

// SetVersion sets the value of Version.
func (s *VirtualMachineAppInfoVmwareToolsInfo) SetVersion(val OptString) {
	s.Version = val
}

// Status of VMware Tools running in the guest operating system. Values are inline with the vCenter
// provided values.
type VirtualMachineAppInfoVmwareToolsInfoStatus string

const (
	VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED VirtualMachineAppInfoVmwareToolsInfoStatus = "NOT_INSTALLED"
	VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING   VirtualMachineAppInfoVmwareToolsInfoStatus = "NOT_RUNNING"
	VirtualMachineAppInfoVmwareToolsInfoStatusOK           VirtualMachineAppInfoVmwareToolsInfoStatus = "OK"
	VirtualMachineAppInfoVmwareToolsInfoStatusOLD          VirtualMachineAppInfoVmwareToolsInfoStatus = "OLD"
)

// AllValues returns all VirtualMachineAppInfoVmwareToolsInfoStatus values.
func (VirtualMachineAppInfoVmwareToolsInfoStatus) AllValues() []VirtualMachineAppInfoVmwareToolsInfoStatus {
	return []VirtualMachineAppInfoVmwareToolsInfoStatus{
		VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED,
		VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING,
		VirtualMachineAppInfoVmwareToolsInfoStatusOK,
		VirtualMachineAppInfoVmwareToolsInfoStatusOLD,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineAppInfoVmwareToolsInfoStatus) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusOK:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusOLD:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineAppInfoVmwareToolsInfoStatus) UnmarshalText(data []byte) error {
	switch VirtualMachineAppInfoVmwareToolsInfoStatus(data) {
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusNOTINSTALLED
		return nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusNOTRUNNING
		return nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusOK:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusOK
		return nil
	case VirtualMachineAppInfoVmwareToolsInfoStatusOLD:
		*s = VirtualMachineAppInfoVmwareToolsInfoStatusOLD
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the virtual machine. - VMFS - virtual machine which is created from one or more VMFS
// datastores. - VVOL - virtual machine which is created from a VVOL datastores. - NFS  - virtual
// machine which is created from a NFS datastores. - VSAN - virtual machine which is created from a
// VSAN datastores.
type VirtualMachineAppInfoVmwareType string

const (
	VirtualMachineAppInfoVmwareTypeVMFS VirtualMachineAppInfoVmwareType = "VMFS"
	VirtualMachineAppInfoVmwareTypeVVOL VirtualMachineAppInfoVmwareType = "VVOL"
	VirtualMachineAppInfoVmwareTypeNFS  VirtualMachineAppInfoVmwareType = "NFS"
	VirtualMachineAppInfoVmwareTypeVSAN VirtualMachineAppInfoVmwareType = "VSAN"
)

// AllValues returns all VirtualMachineAppInfoVmwareType values.
func (VirtualMachineAppInfoVmwareType) AllValues() []VirtualMachineAppInfoVmwareType {
	return []VirtualMachineAppInfoVmwareType{
		VirtualMachineAppInfoVmwareTypeVMFS,
		VirtualMachineAppInfoVmwareTypeVVOL,
		VirtualMachineAppInfoVmwareTypeNFS,
		VirtualMachineAppInfoVmwareTypeVSAN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineAppInfoVmwareType) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineAppInfoVmwareTypeVMFS:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareTypeVVOL:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareTypeNFS:
		return []byte(s), nil
	case VirtualMachineAppInfoVmwareTypeVSAN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineAppInfoVmwareType) UnmarshalText(data []byte) error {
	switch VirtualMachineAppInfoVmwareType(data) {
	case VirtualMachineAppInfoVmwareTypeVMFS:
		*s = VirtualMachineAppInfoVmwareTypeVMFS
		return nil
	case VirtualMachineAppInfoVmwareTypeVVOL:
		*s = VirtualMachineAppInfoVmwareTypeVVOL
		return nil
	case VirtualMachineAppInfoVmwareTypeNFS:
		*s = VirtualMachineAppInfoVmwareTypeNFS
		return nil
	case VirtualMachineAppInfoVmwareTypeVSAN:
		*s = VirtualMachineAppInfoVmwareTypeVSAN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the application to which the VM belongs.
type VirtualMachineAppType string

const (
	VirtualMachineAppTypeVMWARE VirtualMachineAppType = "VMWARE"
)

// AllValues returns all VirtualMachineAppType values.
func (VirtualMachineAppType) AllValues() []VirtualMachineAppType {
	return []VirtualMachineAppType{
		VirtualMachineAppTypeVMWARE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineAppType) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineAppTypeVMWARE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineAppType) UnmarshalText(data []byte) error {
	switch VirtualMachineAppType(data) {
	case VirtualMachineAppTypeVMWARE:
		*s = VirtualMachineAppTypeVMWARE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VirtualMachineClusterInfo struct {
	// A user-friendly name that identifies the hypervisor cluster. This will always be same as name
	// since adding or updating hypervisor clusters is not supported when managed from a manager, such as
	// the vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor cluster.
	ID OptString `json:"id"`
	// Name of the cluster as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineClusterInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineClusterInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineClusterInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineClusterInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineClusterInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineClusterInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineClusterInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineClusterInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineClusterInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineClusterInfo) SetType(val OptType) {
	s.Type = val
}

// Compute information of the virtual machine.
type VirtualMachineComputeInfo struct {
	// Total memory provisioned.
	MemorySizeInMib OptString `json:"memorySizeInMib"`
	// Number of CPU cores provisioned.
	NumCpuCores OptInt `json:"numCpuCores"`
	// Number of CPU threads provisioned.
	NumCpuThreads OptInt `json:"numCpuThreads"`
}

// GetMemorySizeInMib returns the value of MemorySizeInMib.
func (s *VirtualMachineComputeInfo) GetMemorySizeInMib() OptString {
	return s.MemorySizeInMib
}

// GetNumCpuCores returns the value of NumCpuCores.
func (s *VirtualMachineComputeInfo) GetNumCpuCores() OptInt {
	return s.NumCpuCores
}

// GetNumCpuThreads returns the value of NumCpuThreads.
func (s *VirtualMachineComputeInfo) GetNumCpuThreads() OptInt {
	return s.NumCpuThreads
}

// SetMemorySizeInMib sets the value of MemorySizeInMib.
func (s *VirtualMachineComputeInfo) SetMemorySizeInMib(val OptString) {
	s.MemorySizeInMib = val
}

// SetNumCpuCores sets the value of NumCpuCores.
func (s *VirtualMachineComputeInfo) SetNumCpuCores(val OptInt) {
	s.NumCpuCores = val
}

// SetNumCpuThreads sets the value of NumCpuThreads.
func (s *VirtualMachineComputeInfo) SetNumCpuThreads(val OptInt) {
	s.NumCpuThreads = val
}

// The immediate parent folder on which this resource is hosted in the inventory of
// hypervisor-manager.
type VirtualMachineFolderInfo struct {
	// A user-friendly name that identifies the hypervisor folder. This will always be same as name since
	// adding or updating hypervisor folders is not supported when managed from a manager, such as the
	// vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor folder.
	ID OptString `json:"id"`
	// Name of the folder as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineFolderInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineFolderInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineFolderInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineFolderInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineFolderInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineFolderInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineFolderInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineFolderInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineFolderInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineFolderInfo) SetType(val OptType) {
	s.Type = val
}

// Information of this guest OS running on the virtual machine.
type VirtualMachineGuestInfo struct {
	// Build version of the guest operating system on this virtual machine.
	BuildVersion OptString `json:"buildVersion"`
	// Name of the guest operating system on this virtual machine.
	Name OptString `json:"name"`
	// Release version of the guest operating system on this virtual machine.
	ReleaseVersion OptString `json:"releaseVersion"`
	// Operating system on this virtual machine.
	Type OptVirtualMachineGuestInfoType `json:"type"`
}

// GetBuildVersion returns the value of BuildVersion.
func (s *VirtualMachineGuestInfo) GetBuildVersion() OptString {
	return s.BuildVersion
}

// GetName returns the value of Name.
func (s *VirtualMachineGuestInfo) GetName() OptString {
	return s.Name
}

// GetReleaseVersion returns the value of ReleaseVersion.
func (s *VirtualMachineGuestInfo) GetReleaseVersion() OptString {
	return s.ReleaseVersion
}

// GetType returns the value of Type.
func (s *VirtualMachineGuestInfo) GetType() OptVirtualMachineGuestInfoType {
	return s.Type
}

// SetBuildVersion sets the value of BuildVersion.
func (s *VirtualMachineGuestInfo) SetBuildVersion(val OptString) {
	s.BuildVersion = val
}

// SetName sets the value of Name.
func (s *VirtualMachineGuestInfo) SetName(val OptString) {
	s.Name = val
}

// SetReleaseVersion sets the value of ReleaseVersion.
func (s *VirtualMachineGuestInfo) SetReleaseVersion(val OptString) {
	s.ReleaseVersion = val
}

// SetType sets the value of Type.
func (s *VirtualMachineGuestInfo) SetType(val OptVirtualMachineGuestInfoType) {
	s.Type = val
}

// Operating system on this virtual machine.
type VirtualMachineGuestInfoType string

const (
	VirtualMachineGuestInfoTypeWINDOWS VirtualMachineGuestInfoType = "WINDOWS"
	VirtualMachineGuestInfoTypeLINUX   VirtualMachineGuestInfoType = "LINUX"
	VirtualMachineGuestInfoTypeOTHERS  VirtualMachineGuestInfoType = "OTHERS"
)

// AllValues returns all VirtualMachineGuestInfoType values.
func (VirtualMachineGuestInfoType) AllValues() []VirtualMachineGuestInfoType {
	return []VirtualMachineGuestInfoType{
		VirtualMachineGuestInfoTypeWINDOWS,
		VirtualMachineGuestInfoTypeLINUX,
		VirtualMachineGuestInfoTypeOTHERS,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineGuestInfoType) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineGuestInfoTypeWINDOWS:
		return []byte(s), nil
	case VirtualMachineGuestInfoTypeLINUX:
		return []byte(s), nil
	case VirtualMachineGuestInfoTypeOTHERS:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineGuestInfoType) UnmarshalText(data []byte) error {
	switch VirtualMachineGuestInfoType(data) {
	case VirtualMachineGuestInfoTypeWINDOWS:
		*s = VirtualMachineGuestInfoTypeWINDOWS
		return nil
	case VirtualMachineGuestInfoTypeLINUX:
		*s = VirtualMachineGuestInfoTypeLINUX
		return nil
	case VirtualMachineGuestInfoTypeOTHERS:
		*s = VirtualMachineGuestInfoTypeOTHERS
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VirtualMachineHostInfo struct {
	// A user-friendly name that identifies the hypervisor host. This will always be same as name since
	// adding or updating hypervisor hosts is not supported when managed from a manager, such as the
	// vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor host.
	ID OptString `json:"id"`
	// Name of the host as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineHostInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineHostInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineHostInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineHostInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineHostInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineHostInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineHostInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineHostInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineHostInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineHostInfo) SetType(val OptType) {
	s.Type = val
}

type VirtualMachineHypervisorManagerInfo struct {
	// User defined name for the hypervisor manager.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor manager.
	ID OptString `json:"id"`
	// Name as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineHypervisorManagerInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineHypervisorManagerInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineHypervisorManagerInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineHypervisorManagerInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineHypervisorManagerInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineHypervisorManagerInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineHypervisorManagerInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineHypervisorManagerInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineHypervisorManagerInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineHypervisorManagerInfo) SetType(val OptType) {
	s.Type = val
}

type VirtualMachineNetworkAdaptersItem struct {
	// MAC address of the network adapter.
	MacAddress OptString `json:"macAddress"`
	// Specifies how the MAC address is provided for the adapter.
	MacAddressType OptVirtualMachineNetworkAdaptersItemMacAddressType `json:"macAddressType"`
	// Name of the network adapter.
	Name           OptString                                          `json:"name"`
	NetworkDetails OptVirtualMachineNetworkAdaptersItemNetworkDetails `json:"networkDetails"`
}

// GetMacAddress returns the value of MacAddress.
func (s *VirtualMachineNetworkAdaptersItem) GetMacAddress() OptString {
	return s.MacAddress
}

// GetMacAddressType returns the value of MacAddressType.
func (s *VirtualMachineNetworkAdaptersItem) GetMacAddressType() OptVirtualMachineNetworkAdaptersItemMacAddressType {
	return s.MacAddressType
}

// GetName returns the value of Name.
func (s *VirtualMachineNetworkAdaptersItem) GetName() OptString {
	return s.Name
}

// GetNetworkDetails returns the value of NetworkDetails.
func (s *VirtualMachineNetworkAdaptersItem) GetNetworkDetails() OptVirtualMachineNetworkAdaptersItemNetworkDetails {
	return s.NetworkDetails
}

// SetMacAddress sets the value of MacAddress.
func (s *VirtualMachineNetworkAdaptersItem) SetMacAddress(val OptString) {
	s.MacAddress = val
}

// SetMacAddressType sets the value of MacAddressType.
func (s *VirtualMachineNetworkAdaptersItem) SetMacAddressType(val OptVirtualMachineNetworkAdaptersItemMacAddressType) {
	s.MacAddressType = val
}

// SetName sets the value of Name.
func (s *VirtualMachineNetworkAdaptersItem) SetName(val OptString) {
	s.Name = val
}

// SetNetworkDetails sets the value of NetworkDetails.
func (s *VirtualMachineNetworkAdaptersItem) SetNetworkDetails(val OptVirtualMachineNetworkAdaptersItemNetworkDetails) {
	s.NetworkDetails = val
}

// Specifies how the MAC address is provided for the adapter.
type VirtualMachineNetworkAdaptersItemMacAddressType string

const (
	VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL    VirtualMachineNetworkAdaptersItemMacAddressType = "MANUAL"
	VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC VirtualMachineNetworkAdaptersItemMacAddressType = "AUTOMATIC"
)

// AllValues returns all VirtualMachineNetworkAdaptersItemMacAddressType values.
func (VirtualMachineNetworkAdaptersItemMacAddressType) AllValues() []VirtualMachineNetworkAdaptersItemMacAddressType {
	return []VirtualMachineNetworkAdaptersItemMacAddressType{
		VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL,
		VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineNetworkAdaptersItemMacAddressType) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL:
		return []byte(s), nil
	case VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineNetworkAdaptersItemMacAddressType) UnmarshalText(data []byte) error {
	switch VirtualMachineNetworkAdaptersItemMacAddressType(data) {
	case VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL:
		*s = VirtualMachineNetworkAdaptersItemMacAddressTypeMANUAL
		return nil
	case VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC:
		*s = VirtualMachineNetworkAdaptersItemMacAddressTypeAUTOMATIC
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VirtualMachineNetworkAdaptersItemNetworkDetails struct {
	// Specifies if the network has to be connected at power on.
	ConnectAtPowerOn OptBool `json:"connectAtPowerOn"`
	// A user-friendly name that identifies the hypervisor network. This will always be same as name
	// since adding or updating hypervisor networks is not supported when managed from a manager, such as
	// the vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor network resource.
	ID OptString `json:"id"`
	// Name of the network as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Reflects if network is available or deleted from vCenter.
	State OptVirtualMachineNetworkAdaptersItemNetworkDetailsState `json:"state"`
	Type  OptType                                                 `json:"type"`
}

// GetConnectAtPowerOn returns the value of ConnectAtPowerOn.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetConnectAtPowerOn() OptBool {
	return s.ConnectAtPowerOn
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetState returns the value of State.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetState() OptVirtualMachineNetworkAdaptersItemNetworkDetailsState {
	return s.State
}

// GetType returns the value of Type.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) GetType() OptType {
	return s.Type
}

// SetConnectAtPowerOn sets the value of ConnectAtPowerOn.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetConnectAtPowerOn(val OptBool) {
	s.ConnectAtPowerOn = val
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetState sets the value of State.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetState(val OptVirtualMachineNetworkAdaptersItemNetworkDetailsState) {
	s.State = val
}

// SetType sets the value of Type.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetails) SetType(val OptType) {
	s.Type = val
}

// Reflects if network is available or deleted from vCenter.
type VirtualMachineNetworkAdaptersItemNetworkDetailsState string

const (
	VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE VirtualMachineNetworkAdaptersItemNetworkDetailsState = "AVAILABLE"
	VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED   VirtualMachineNetworkAdaptersItemNetworkDetailsState = "DELETED"
)

// AllValues returns all VirtualMachineNetworkAdaptersItemNetworkDetailsState values.
func (VirtualMachineNetworkAdaptersItemNetworkDetailsState) AllValues() []VirtualMachineNetworkAdaptersItemNetworkDetailsState {
	return []VirtualMachineNetworkAdaptersItemNetworkDetailsState{
		VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE,
		VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineNetworkAdaptersItemNetworkDetailsState) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE:
		return []byte(s), nil
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineNetworkAdaptersItemNetworkDetailsState) UnmarshalText(data []byte) error {
	switch VirtualMachineNetworkAdaptersItemNetworkDetailsState(data) {
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE:
		*s = VirtualMachineNetworkAdaptersItemNetworkDetailsStateAVAILABLE
		return nil
	case VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED:
		*s = VirtualMachineNetworkAdaptersItemNetworkDetailsStateDELETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This provides the information power state of the virtual machine.
type VirtualMachinePowerState string

const (
	VirtualMachinePowerStatePOWEREDON  VirtualMachinePowerState = "POWERED_ON"
	VirtualMachinePowerStatePOWEREDOFF VirtualMachinePowerState = "POWERED_OFF"
	VirtualMachinePowerStateSUSPENDED  VirtualMachinePowerState = "SUSPENDED"
	VirtualMachinePowerStateUNKNOWN    VirtualMachinePowerState = "UNKNOWN"
)

// AllValues returns all VirtualMachinePowerState values.
func (VirtualMachinePowerState) AllValues() []VirtualMachinePowerState {
	return []VirtualMachinePowerState{
		VirtualMachinePowerStatePOWEREDON,
		VirtualMachinePowerStatePOWEREDOFF,
		VirtualMachinePowerStateSUSPENDED,
		VirtualMachinePowerStateUNKNOWN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachinePowerState) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachinePowerStatePOWEREDON:
		return []byte(s), nil
	case VirtualMachinePowerStatePOWEREDOFF:
		return []byte(s), nil
	case VirtualMachinePowerStateSUSPENDED:
		return []byte(s), nil
	case VirtualMachinePowerStateUNKNOWN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachinePowerState) UnmarshalText(data []byte) error {
	switch VirtualMachinePowerState(data) {
	case VirtualMachinePowerStatePOWEREDON:
		*s = VirtualMachinePowerStatePOWEREDON
		return nil
	case VirtualMachinePowerStatePOWEREDOFF:
		*s = VirtualMachinePowerStatePOWEREDOFF
		return nil
	case VirtualMachinePowerStateSUSPENDED:
		*s = VirtualMachinePowerStateSUSPENDED
		return nil
	case VirtualMachinePowerStateUNKNOWN:
		*s = VirtualMachinePowerStateUNKNOWN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current state of the virtual machine.
type VirtualMachineState string

const (
	VirtualMachineStateOK            VirtualMachineState = "OK"
	VirtualMachineStateUNAVAILABLE   VirtualMachineState = "UNAVAILABLE"
	VirtualMachineStateERROR         VirtualMachineState = "ERROR"
	VirtualMachineStateCREATING      VirtualMachineState = "CREATING"
	VirtualMachineStateDELETING      VirtualMachineState = "DELETING"
	VirtualMachineStateUPDATING      VirtualMachineState = "UPDATING"
	VirtualMachineStateREFRESHING    VirtualMachineState = "REFRESHING"
	VirtualMachineStateRESTORING     VirtualMachineState = "RESTORING"
	VirtualMachineStateRESTOREFAILED VirtualMachineState = "RESTORE_FAILED"
	VirtualMachineStateDELETED       VirtualMachineState = "DELETED"
)

// AllValues returns all VirtualMachineState values.
func (VirtualMachineState) AllValues() []VirtualMachineState {
	return []VirtualMachineState{
		VirtualMachineStateOK,
		VirtualMachineStateUNAVAILABLE,
		VirtualMachineStateERROR,
		VirtualMachineStateCREATING,
		VirtualMachineStateDELETING,
		VirtualMachineStateUPDATING,
		VirtualMachineStateREFRESHING,
		VirtualMachineStateRESTORING,
		VirtualMachineStateRESTOREFAILED,
		VirtualMachineStateDELETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineState) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineStateOK:
		return []byte(s), nil
	case VirtualMachineStateUNAVAILABLE:
		return []byte(s), nil
	case VirtualMachineStateERROR:
		return []byte(s), nil
	case VirtualMachineStateCREATING:
		return []byte(s), nil
	case VirtualMachineStateDELETING:
		return []byte(s), nil
	case VirtualMachineStateUPDATING:
		return []byte(s), nil
	case VirtualMachineStateREFRESHING:
		return []byte(s), nil
	case VirtualMachineStateRESTORING:
		return []byte(s), nil
	case VirtualMachineStateRESTOREFAILED:
		return []byte(s), nil
	case VirtualMachineStateDELETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineState) UnmarshalText(data []byte) error {
	switch VirtualMachineState(data) {
	case VirtualMachineStateOK:
		*s = VirtualMachineStateOK
		return nil
	case VirtualMachineStateUNAVAILABLE:
		*s = VirtualMachineStateUNAVAILABLE
		return nil
	case VirtualMachineStateERROR:
		*s = VirtualMachineStateERROR
		return nil
	case VirtualMachineStateCREATING:
		*s = VirtualMachineStateCREATING
		return nil
	case VirtualMachineStateDELETING:
		*s = VirtualMachineStateDELETING
		return nil
	case VirtualMachineStateUPDATING:
		*s = VirtualMachineStateUPDATING
		return nil
	case VirtualMachineStateREFRESHING:
		*s = VirtualMachineStateREFRESHING
		return nil
	case VirtualMachineStateRESTORING:
		*s = VirtualMachineStateRESTORING
		return nil
	case VirtualMachineStateRESTOREFAILED:
		*s = VirtualMachineStateRESTOREFAILED
		return nil
	case VirtualMachineStateDELETED:
		*s = VirtualMachineStateDELETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the virtual machine.
type VirtualMachineStatus string

const (
	VirtualMachineStatusOK      VirtualMachineStatus = "OK"
	VirtualMachineStatusERROR   VirtualMachineStatus = "ERROR"
	VirtualMachineStatusWARNING VirtualMachineStatus = "WARNING"
)

// AllValues returns all VirtualMachineStatus values.
func (VirtualMachineStatus) AllValues() []VirtualMachineStatus {
	return []VirtualMachineStatus{
		VirtualMachineStatusOK,
		VirtualMachineStatusERROR,
		VirtualMachineStatusWARNING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineStatus) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineStatusOK:
		return []byte(s), nil
	case VirtualMachineStatusERROR:
		return []byte(s), nil
	case VirtualMachineStatusWARNING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineStatus) UnmarshalText(data []byte) error {
	switch VirtualMachineStatus(data) {
	case VirtualMachineStatusOK:
		*s = VirtualMachineStatusOK
		return nil
	case VirtualMachineStatusERROR:
		*s = VirtualMachineStatusERROR
		return nil
	case VirtualMachineStatusWARNING:
		*s = VirtualMachineStatusWARNING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type VirtualMachineVirtualDisksItem struct {
	// Hypervisor specific information.
	AppInfo OptVirtualMachineVirtualDisksItemAppInfo `json:"appInfo"`
	// Last known size of the virtual disk File path of the virtual disk.
	CapacityInBytes OptInt64 `json:"capacityInBytes"`
	// File path of the virtual disk.
	FilePath OptString `json:"filePath"`
	// UUID for the virtual disk.
	ID OptUUID `json:"id"`
	// Name of the virtual disk.
	Name OptString `json:"name"`
	// Unique identifier of the virtual disk as reported by the hypervisor.
	UID OptUUID `json:"uid"`
}

// GetAppInfo returns the value of AppInfo.
func (s *VirtualMachineVirtualDisksItem) GetAppInfo() OptVirtualMachineVirtualDisksItemAppInfo {
	return s.AppInfo
}

// GetCapacityInBytes returns the value of CapacityInBytes.
func (s *VirtualMachineVirtualDisksItem) GetCapacityInBytes() OptInt64 {
	return s.CapacityInBytes
}

// GetFilePath returns the value of FilePath.
func (s *VirtualMachineVirtualDisksItem) GetFilePath() OptString {
	return s.FilePath
}

// GetID returns the value of ID.
func (s *VirtualMachineVirtualDisksItem) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineVirtualDisksItem) GetName() OptString {
	return s.Name
}

// GetUID returns the value of UID.
func (s *VirtualMachineVirtualDisksItem) GetUID() OptUUID {
	return s.UID
}

// SetAppInfo sets the value of AppInfo.
func (s *VirtualMachineVirtualDisksItem) SetAppInfo(val OptVirtualMachineVirtualDisksItemAppInfo) {
	s.AppInfo = val
}

// SetCapacityInBytes sets the value of CapacityInBytes.
func (s *VirtualMachineVirtualDisksItem) SetCapacityInBytes(val OptInt64) {
	s.CapacityInBytes = val
}

// SetFilePath sets the value of FilePath.
func (s *VirtualMachineVirtualDisksItem) SetFilePath(val OptString) {
	s.FilePath = val
}

// SetID sets the value of ID.
func (s *VirtualMachineVirtualDisksItem) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineVirtualDisksItem) SetName(val OptString) {
	s.Name = val
}

// SetUID sets the value of UID.
func (s *VirtualMachineVirtualDisksItem) SetUID(val OptUUID) {
	s.UID = val
}

// Hypervisor specific information.
type VirtualMachineVirtualDisksItemAppInfo struct {
	// VMware specific app info.
	Vmware OptVirtualMachineVirtualDisksItemAppInfoVmware `json:"vmware"`
}

// GetVmware returns the value of Vmware.
func (s *VirtualMachineVirtualDisksItemAppInfo) GetVmware() OptVirtualMachineVirtualDisksItemAppInfoVmware {
	return s.Vmware
}

// SetVmware sets the value of Vmware.
func (s *VirtualMachineVirtualDisksItemAppInfo) SetVmware(val OptVirtualMachineVirtualDisksItemAppInfoVmware) {
	s.Vmware = val
}

// VMware specific app info.
type VirtualMachineVirtualDisksItemAppInfoVmware struct {
	// Information of the datastore where the virtual disk is residing.
	DatastoreInfo OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo `json:"datastoreInfo"`
	// True if the disk UUID is enabled for the virtual machine.
	DiskUuidEnabled OptBool `json:"diskUuidEnabled"`
	// This gives information this virtual disk type. - VMFS - virtual machine flat disks. - VVOL -
	// virtual volume - PRDM - physical raw disk mapping - VRDM - virtual raw disk mapping.
	Type OptVirtualMachineVirtualDisksItemAppInfoVmwareType `json:"type"`
}

// GetDatastoreInfo returns the value of DatastoreInfo.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) GetDatastoreInfo() OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo {
	return s.DatastoreInfo
}

// GetDiskUuidEnabled returns the value of DiskUuidEnabled.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) GetDiskUuidEnabled() OptBool {
	return s.DiskUuidEnabled
}

// GetType returns the value of Type.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) GetType() OptVirtualMachineVirtualDisksItemAppInfoVmwareType {
	return s.Type
}

// SetDatastoreInfo sets the value of DatastoreInfo.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) SetDatastoreInfo(val OptVirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) {
	s.DatastoreInfo = val
}

// SetDiskUuidEnabled sets the value of DiskUuidEnabled.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) SetDiskUuidEnabled(val OptBool) {
	s.DiskUuidEnabled = val
}

// SetType sets the value of Type.
func (s *VirtualMachineVirtualDisksItemAppInfoVmware) SetType(val OptVirtualMachineVirtualDisksItemAppInfoVmwareType) {
	s.Type = val
}

// Information of the datastore where the virtual disk is residing.
type VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo struct {
	// A user-friendly name that identifies the datastore.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the datastore.
	ID OptString `json:"id"`
	// Name of the datastore as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareDatastoreInfo) SetType(val OptType) {
	s.Type = val
}

// This gives information this virtual disk type. - VMFS - virtual machine flat disks. - VVOL -
// virtual volume - PRDM - physical raw disk mapping - VRDM - virtual raw disk mapping.
type VirtualMachineVirtualDisksItemAppInfoVmwareType string

const (
	VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS VirtualMachineVirtualDisksItemAppInfoVmwareType = "VMFS"
	VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL VirtualMachineVirtualDisksItemAppInfoVmwareType = "VVOL"
	VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM VirtualMachineVirtualDisksItemAppInfoVmwareType = "PRDM"
	VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM VirtualMachineVirtualDisksItemAppInfoVmwareType = "VRDM"
)

// AllValues returns all VirtualMachineVirtualDisksItemAppInfoVmwareType values.
func (VirtualMachineVirtualDisksItemAppInfoVmwareType) AllValues() []VirtualMachineVirtualDisksItemAppInfoVmwareType {
	return []VirtualMachineVirtualDisksItemAppInfoVmwareType{
		VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS,
		VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL,
		VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM,
		VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineVirtualDisksItemAppInfoVmwareType) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS:
		return []byte(s), nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL:
		return []byte(s), nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM:
		return []byte(s), nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineVirtualDisksItemAppInfoVmwareType) UnmarshalText(data []byte) error {
	switch VirtualMachineVirtualDisksItemAppInfoVmwareType(data) {
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVMFS
		return nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVVOL
		return nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypePRDM
		return nil
	case VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM:
		*s = VirtualMachineVirtualDisksItemAppInfoVmwareTypeVRDM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Classification of different system/control VM types.
type VirtualMachineVmClassification string

const (
	VirtualMachineVmClassificationDATAORCHESTRATOR       VirtualMachineVmClassification = "DATA_ORCHESTRATOR"
	VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY VirtualMachineVmClassification = "PROTECTION_STORE_GATEWAY"
	VirtualMachineVmClassificationVCLSVM                 VirtualMachineVmClassification = "VCLS_VM"
	VirtualMachineVmClassificationTEMPLATEVM             VirtualMachineVmClassification = "TEMPLATE_VM"
	VirtualMachineVmClassificationOMNICUBEVM             VirtualMachineVmClassification = "OMNICUBE_VM"
	VirtualMachineVmClassificationDSCVM                  VirtualMachineVmClassification = "DSC_VM"
)

// AllValues returns all VirtualMachineVmClassification values.
func (VirtualMachineVmClassification) AllValues() []VirtualMachineVmClassification {
	return []VirtualMachineVmClassification{
		VirtualMachineVmClassificationDATAORCHESTRATOR,
		VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY,
		VirtualMachineVmClassificationVCLSVM,
		VirtualMachineVmClassificationTEMPLATEVM,
		VirtualMachineVmClassificationOMNICUBEVM,
		VirtualMachineVmClassificationDSCVM,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s VirtualMachineVmClassification) MarshalText() ([]byte, error) {
	switch s {
	case VirtualMachineVmClassificationDATAORCHESTRATOR:
		return []byte(s), nil
	case VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY:
		return []byte(s), nil
	case VirtualMachineVmClassificationVCLSVM:
		return []byte(s), nil
	case VirtualMachineVmClassificationTEMPLATEVM:
		return []byte(s), nil
	case VirtualMachineVmClassificationOMNICUBEVM:
		return []byte(s), nil
	case VirtualMachineVmClassificationDSCVM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *VirtualMachineVmClassification) UnmarshalText(data []byte) error {
	switch VirtualMachineVmClassification(data) {
	case VirtualMachineVmClassificationDATAORCHESTRATOR:
		*s = VirtualMachineVmClassificationDATAORCHESTRATOR
		return nil
	case VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY:
		*s = VirtualMachineVmClassificationPROTECTIONSTOREGATEWAY
		return nil
	case VirtualMachineVmClassificationVCLSVM:
		*s = VirtualMachineVmClassificationVCLSVM
		return nil
	case VirtualMachineVmClassificationTEMPLATEVM:
		*s = VirtualMachineVmClassificationTEMPLATEVM
		return nil
	case VirtualMachineVmClassificationOMNICUBEVM:
		*s = VirtualMachineVmClassificationOMNICUBEVM
		return nil
	case VirtualMachineVmClassificationDSCVM:
		*s = VirtualMachineVmClassificationDSCVM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Virtual machine performance metrics.
type VirtualMachineVmPerfMetricInfo struct {
	// Average read latency.
	AverageReadLatency OptInt64 `json:"averageReadLatency"`
	// Average write latency.
	AverageWriteLatency OptInt64 `json:"averageWriteLatency"`
	// CPU allocated in mega hertz.
	CpuAllocatedInMhz OptInt64 `json:"cpuAllocatedInMhz"`
	// CPU used in mega hertz.
	CpuUsedInMhz OptInt64 `json:"cpuUsedInMhz"`
	// Memory allocated in mega bytes.
	MemoryAllocatedInMb OptInt64 `json:"memoryAllocatedInMb"`
	// Memory used in mega bytes.
	MemoryUsedInMb OptInt64 `json:"memoryUsedInMb"`
	// Storage allocated in kilo bytes.
	StorageAllocatedInKb OptInt64 `json:"storageAllocatedInKb"`
	// Storage used in bytes.
	StorageUsedInBytes OptInt64 `json:"storageUsedInBytes"`
	// Total read IOPS.
	TotalReadIops OptInt64 `json:"totalReadIops"`
	// Total write IOPS.
	TotalWriteIops OptInt64 `json:"totalWriteIops"`
}

// GetAverageReadLatency returns the value of AverageReadLatency.
func (s *VirtualMachineVmPerfMetricInfo) GetAverageReadLatency() OptInt64 {
	return s.AverageReadLatency
}

// GetAverageWriteLatency returns the value of AverageWriteLatency.
func (s *VirtualMachineVmPerfMetricInfo) GetAverageWriteLatency() OptInt64 {
	return s.AverageWriteLatency
}

// GetCpuAllocatedInMhz returns the value of CpuAllocatedInMhz.
func (s *VirtualMachineVmPerfMetricInfo) GetCpuAllocatedInMhz() OptInt64 {
	return s.CpuAllocatedInMhz
}

// GetCpuUsedInMhz returns the value of CpuUsedInMhz.
func (s *VirtualMachineVmPerfMetricInfo) GetCpuUsedInMhz() OptInt64 {
	return s.CpuUsedInMhz
}

// GetMemoryAllocatedInMb returns the value of MemoryAllocatedInMb.
func (s *VirtualMachineVmPerfMetricInfo) GetMemoryAllocatedInMb() OptInt64 {
	return s.MemoryAllocatedInMb
}

// GetMemoryUsedInMb returns the value of MemoryUsedInMb.
func (s *VirtualMachineVmPerfMetricInfo) GetMemoryUsedInMb() OptInt64 {
	return s.MemoryUsedInMb
}

// GetStorageAllocatedInKb returns the value of StorageAllocatedInKb.
func (s *VirtualMachineVmPerfMetricInfo) GetStorageAllocatedInKb() OptInt64 {
	return s.StorageAllocatedInKb
}

// GetStorageUsedInBytes returns the value of StorageUsedInBytes.
func (s *VirtualMachineVmPerfMetricInfo) GetStorageUsedInBytes() OptInt64 {
	return s.StorageUsedInBytes
}

// GetTotalReadIops returns the value of TotalReadIops.
func (s *VirtualMachineVmPerfMetricInfo) GetTotalReadIops() OptInt64 {
	return s.TotalReadIops
}

// GetTotalWriteIops returns the value of TotalWriteIops.
func (s *VirtualMachineVmPerfMetricInfo) GetTotalWriteIops() OptInt64 {
	return s.TotalWriteIops
}

// SetAverageReadLatency sets the value of AverageReadLatency.
func (s *VirtualMachineVmPerfMetricInfo) SetAverageReadLatency(val OptInt64) {
	s.AverageReadLatency = val
}

// SetAverageWriteLatency sets the value of AverageWriteLatency.
func (s *VirtualMachineVmPerfMetricInfo) SetAverageWriteLatency(val OptInt64) {
	s.AverageWriteLatency = val
}

// SetCpuAllocatedInMhz sets the value of CpuAllocatedInMhz.
func (s *VirtualMachineVmPerfMetricInfo) SetCpuAllocatedInMhz(val OptInt64) {
	s.CpuAllocatedInMhz = val
}

// SetCpuUsedInMhz sets the value of CpuUsedInMhz.
func (s *VirtualMachineVmPerfMetricInfo) SetCpuUsedInMhz(val OptInt64) {
	s.CpuUsedInMhz = val
}

// SetMemoryAllocatedInMb sets the value of MemoryAllocatedInMb.
func (s *VirtualMachineVmPerfMetricInfo) SetMemoryAllocatedInMb(val OptInt64) {
	s.MemoryAllocatedInMb = val
}

// SetMemoryUsedInMb sets the value of MemoryUsedInMb.
func (s *VirtualMachineVmPerfMetricInfo) SetMemoryUsedInMb(val OptInt64) {
	s.MemoryUsedInMb = val
}

// SetStorageAllocatedInKb sets the value of StorageAllocatedInKb.
func (s *VirtualMachineVmPerfMetricInfo) SetStorageAllocatedInKb(val OptInt64) {
	s.StorageAllocatedInKb = val
}

// SetStorageUsedInBytes sets the value of StorageUsedInBytes.
func (s *VirtualMachineVmPerfMetricInfo) SetStorageUsedInBytes(val OptInt64) {
	s.StorageUsedInBytes = val
}

// SetTotalReadIops sets the value of TotalReadIops.
func (s *VirtualMachineVmPerfMetricInfo) SetTotalReadIops(val OptInt64) {
	s.TotalReadIops = val
}

// SetTotalWriteIops sets the value of TotalWriteIops.
func (s *VirtualMachineVmPerfMetricInfo) SetTotalWriteIops(val OptInt64) {
	s.TotalWriteIops = val
}

// Information of the Virtual Machine Protection Group.
// Ref: #/components/schemas/VmProtectionGroupInfo
type VmProtectionGroupInfo struct {
	// Unique identifier for the Protection Group.
	ID OptString `json:"id"`
	// Name of the Protection Group.
	Name OptString `json:"name"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *VmProtectionGroupInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VmProtectionGroupInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VmProtectionGroupInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VmProtectionGroupInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *VmProtectionGroupInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VmProtectionGroupInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VmProtectionGroupInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VmProtectionGroupInfo) SetType(val OptType) {
	s.Type = val
}

// Information of volume or snapshot.
// Ref: #/components/schemas/VolumeInfo
type VolumeInfo struct {
	// A user-friendly name that identifies the volume.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the volume.
	ID OptString `json:"id"`
	// Name of the volume.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// SCSI identifier of the volume or snapshot .
	ScsiIdentifier OptString `json:"scsiIdentifier"`
	// Size of the volume or snapshot in bytes.
	SizeInBytes       OptInt64             `json:"sizeInBytes"`
	StorageFolderInfo OptStorageFolderInfo `json:"storageFolderInfo"`
	StoragePoolInfo   OptStoragePoolInfo   `json:"storagePoolInfo"`
	StorageSystemInfo OptStorageSystemInfo `json:"storageSystemInfo"`
	// Type of volume.
	Type          OptString        `json:"type"`
	VolumeSetInfo OptVolumeSetInfo `json:"volumeSetInfo"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VolumeInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VolumeInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VolumeInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VolumeInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetScsiIdentifier returns the value of ScsiIdentifier.
func (s *VolumeInfo) GetScsiIdentifier() OptString {
	return s.ScsiIdentifier
}

// GetSizeInBytes returns the value of SizeInBytes.
func (s *VolumeInfo) GetSizeInBytes() OptInt64 {
	return s.SizeInBytes
}

// GetStorageFolderInfo returns the value of StorageFolderInfo.
func (s *VolumeInfo) GetStorageFolderInfo() OptStorageFolderInfo {
	return s.StorageFolderInfo
}

// GetStoragePoolInfo returns the value of StoragePoolInfo.
func (s *VolumeInfo) GetStoragePoolInfo() OptStoragePoolInfo {
	return s.StoragePoolInfo
}

// GetStorageSystemInfo returns the value of StorageSystemInfo.
func (s *VolumeInfo) GetStorageSystemInfo() OptStorageSystemInfo {
	return s.StorageSystemInfo
}

// GetType returns the value of Type.
func (s *VolumeInfo) GetType() OptString {
	return s.Type
}

// GetVolumeSetInfo returns the value of VolumeSetInfo.
func (s *VolumeInfo) GetVolumeSetInfo() OptVolumeSetInfo {
	return s.VolumeSetInfo
}

// SetDisplayName sets the value of DisplayName.
func (s *VolumeInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VolumeInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VolumeInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VolumeInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetScsiIdentifier sets the value of ScsiIdentifier.
func (s *VolumeInfo) SetScsiIdentifier(val OptString) {
	s.ScsiIdentifier = val
}

// SetSizeInBytes sets the value of SizeInBytes.
func (s *VolumeInfo) SetSizeInBytes(val OptInt64) {
	s.SizeInBytes = val
}

// SetStorageFolderInfo sets the value of StorageFolderInfo.
func (s *VolumeInfo) SetStorageFolderInfo(val OptStorageFolderInfo) {
	s.StorageFolderInfo = val
}

// SetStoragePoolInfo sets the value of StoragePoolInfo.
func (s *VolumeInfo) SetStoragePoolInfo(val OptStoragePoolInfo) {
	s.StoragePoolInfo = val
}

// SetStorageSystemInfo sets the value of StorageSystemInfo.
func (s *VolumeInfo) SetStorageSystemInfo(val OptStorageSystemInfo) {
	s.StorageSystemInfo = val
}

// SetType sets the value of Type.
func (s *VolumeInfo) SetType(val OptString) {
	s.Type = val
}

// SetVolumeSetInfo sets the value of VolumeSetInfo.
func (s *VolumeInfo) SetVolumeSetInfo(val OptVolumeSetInfo) {
	s.VolumeSetInfo = val
}

// Describes a volume set.
// Ref: #/components/schemas/VolumeSetInfo
type VolumeSetInfo struct {
	// A user-friendly name that identifies the volume set.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the volume set.
	ID OptString `json:"id"`
	// Name of the volume set.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of the volume set.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VolumeSetInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VolumeSetInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VolumeSetInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VolumeSetInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VolumeSetInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VolumeSetInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VolumeSetInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VolumeSetInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VolumeSetInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VolumeSetInfo) SetType(val OptString) {
	s.Type = val
}
