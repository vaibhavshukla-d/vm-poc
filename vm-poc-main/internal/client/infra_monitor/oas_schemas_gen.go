// Code generated by ogen, DO NOT EDIT.

package client

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

type Bearer struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *Bearer) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *Bearer) SetRoles(val []string) {
	s.Roles = val
}

// CPU information.
// Ref: #/components/schemas/CpuInfo
type CpuInfo struct {
	// Indicate whether hyperthreading is active or not.
	HyperthreadingActive OptBool `json:"hyperthreadingActive"`
	// Number of logical processors.
	LogicalProcessors OptInt32 `json:"logicalProcessors"`
	// Number of processor cores.
	ProcessorCores OptInt32 `json:"processorCores"`
	// Number of processor sockets.
	ProcessorSockets OptInt32 `json:"processorSockets"`
	// Processor speed in Hz.
	ProcessorSpeedHz OptInt64 `json:"processorSpeedHz"`
}

// GetHyperthreadingActive returns the value of HyperthreadingActive.
func (s *CpuInfo) GetHyperthreadingActive() OptBool {
	return s.HyperthreadingActive
}

// GetLogicalProcessors returns the value of LogicalProcessors.
func (s *CpuInfo) GetLogicalProcessors() OptInt32 {
	return s.LogicalProcessors
}

// GetProcessorCores returns the value of ProcessorCores.
func (s *CpuInfo) GetProcessorCores() OptInt32 {
	return s.ProcessorCores
}

// GetProcessorSockets returns the value of ProcessorSockets.
func (s *CpuInfo) GetProcessorSockets() OptInt32 {
	return s.ProcessorSockets
}

// GetProcessorSpeedHz returns the value of ProcessorSpeedHz.
func (s *CpuInfo) GetProcessorSpeedHz() OptInt64 {
	return s.ProcessorSpeedHz
}

// SetHyperthreadingActive sets the value of HyperthreadingActive.
func (s *CpuInfo) SetHyperthreadingActive(val OptBool) {
	s.HyperthreadingActive = val
}

// SetLogicalProcessors sets the value of LogicalProcessors.
func (s *CpuInfo) SetLogicalProcessors(val OptInt32) {
	s.LogicalProcessors = val
}

// SetProcessorCores sets the value of ProcessorCores.
func (s *CpuInfo) SetProcessorCores(val OptInt32) {
	s.ProcessorCores = val
}

// SetProcessorSockets sets the value of ProcessorSockets.
func (s *CpuInfo) SetProcessorSockets(val OptInt32) {
	s.ProcessorSockets = val
}

// SetProcessorSpeedHz sets the value of ProcessorSpeedHz.
func (s *CpuInfo) SetProcessorSpeedHz(val OptInt64) {
	s.ProcessorSpeedHz = val
}

// CPU socket information.
// Ref: #/components/schemas/CpuSocket
type CpuSocket struct {
	// CPU bus speed in Hz.
	CpuBusSpeedHz OptInt64 `json:"cpuBusSpeedHz"`
	// CPU core speed in Hz.
	CpuCoreSpeedHz OptInt64 `json:"cpuCoreSpeedHz"`
	// Description of CPU socket.
	Description OptString `json:"description"`
	// Vendor of CPU socket.
	Vendor OptString `json:"vendor"`
}

// GetCpuBusSpeedHz returns the value of CpuBusSpeedHz.
func (s *CpuSocket) GetCpuBusSpeedHz() OptInt64 {
	return s.CpuBusSpeedHz
}

// GetCpuCoreSpeedHz returns the value of CpuCoreSpeedHz.
func (s *CpuSocket) GetCpuCoreSpeedHz() OptInt64 {
	return s.CpuCoreSpeedHz
}

// GetDescription returns the value of Description.
func (s *CpuSocket) GetDescription() OptString {
	return s.Description
}

// GetVendor returns the value of Vendor.
func (s *CpuSocket) GetVendor() OptString {
	return s.Vendor
}

// SetCpuBusSpeedHz sets the value of CpuBusSpeedHz.
func (s *CpuSocket) SetCpuBusSpeedHz(val OptInt64) {
	s.CpuBusSpeedHz = val
}

// SetCpuCoreSpeedHz sets the value of CpuCoreSpeedHz.
func (s *CpuSocket) SetCpuCoreSpeedHz(val OptInt64) {
	s.CpuCoreSpeedHz = val
}

// SetDescription sets the value of Description.
func (s *CpuSocket) SetDescription(val OptString) {
	s.Description = val
}

// SetVendor sets the value of Vendor.
func (s *CpuSocket) SetVendor(val OptString) {
	s.Vendor = val
}

// Information about the assigned Protection Policy and the Protection Job.
// Ref: #/components/schemas/DataManagementJobInfo
type DataManagementJobInfo struct {
	// UUID string uniquely identifying the Protection Job.
	ID OptUUID `json:"id"`
	// Name of the Protection Job.
	Name                 OptString                     `json:"name"`
	ProtectionPolicyInfo OptDataManagementTemplateInfo `json:"protectionPolicyInfo"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *DataManagementJobInfo) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataManagementJobInfo) GetName() OptString {
	return s.Name
}

// GetProtectionPolicyInfo returns the value of ProtectionPolicyInfo.
func (s *DataManagementJobInfo) GetProtectionPolicyInfo() OptDataManagementTemplateInfo {
	return s.ProtectionPolicyInfo
}

// GetResourceUri returns the value of ResourceUri.
func (s *DataManagementJobInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DataManagementJobInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *DataManagementJobInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataManagementJobInfo) SetName(val OptString) {
	s.Name = val
}

// SetProtectionPolicyInfo sets the value of ProtectionPolicyInfo.
func (s *DataManagementJobInfo) SetProtectionPolicyInfo(val OptDataManagementTemplateInfo) {
	s.ProtectionPolicyInfo = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DataManagementJobInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DataManagementJobInfo) SetType(val OptType) {
	s.Type = val
}

// Information about the Protection Policy that was used to create the job.
// Ref: #/components/schemas/DataManagementTemplateInfo
type DataManagementTemplateInfo struct {
	// UUID string uniquely identifying the Protection Policy.
	ID OptUUID `json:"id"`
	// User defined name of the Protection Policy.
	Name OptString `json:"name"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *DataManagementTemplateInfo) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DataManagementTemplateInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DataManagementTemplateInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DataManagementTemplateInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *DataManagementTemplateInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DataManagementTemplateInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DataManagementTemplateInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DataManagementTemplateInfo) SetType(val OptType) {
	s.Type = val
}

// References to the datacenter that house this virtual machine.
// Ref: #/components/schemas/DatacenterInfo
type DatacenterInfo struct {
	// UUID string uniquely identifier of the datacenter.
	ID OptString `json:"id"`
	// VMware provided moref for the datacenter.
	Moref OptString `json:"moref"`
	// VMware provided name for the datacenter.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *DatacenterInfo) GetID() OptString {
	return s.ID
}

// GetMoref returns the value of Moref.
func (s *DatacenterInfo) GetMoref() OptString {
	return s.Moref
}

// GetName returns the value of Name.
func (s *DatacenterInfo) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *DatacenterInfo) SetID(val OptString) {
	s.ID = val
}

// SetMoref sets the value of Moref.
func (s *DatacenterInfo) SetMoref(val OptString) {
	s.Moref = val
}

// SetName sets the value of Name.
func (s *DatacenterInfo) SetName(val OptString) {
	s.Name = val
}

// Represents a single instance of a Datastore.
// Ref: #/components/schemas/Datastore
type Datastore struct {
	// List of allowed operation on the datastore.
	AllowedOperations []DatastoreAllowedOperationsItem `json:"allowedOperations"`
	// Application type of this asset.
	AppType OptDatastoreAppType `json:"appType"`
	// Unused storage of the datastore in bytes.
	CapacityFree OptInt64 `json:"capacityFree"`
	// Size of the datastore in bytes.
	CapacityInBytes OptInt64 `json:"capacityInBytes"`
	// Uncommitted storage of the datastore in bytes.
	CapacityUncommitted OptInt64                `json:"capacityUncommitted"`
	ClusterInfo         OptDatastoreClusterInfo `json:"clusterInfo"`
	// Time in UTC at which the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// The customer application identifier.
	CustomerId OptString `json:"customerId"`
	// List of datacenters to which the datastore is presented to.
	DatacentersInfo []DatacenterInfo `json:"datacentersInfo"`
	// Classification of datastore types for which protection will be disabled.
	DatastoreClassification OptDatastoreDatastoreClassification `json:"datastoreClassification"`
	// Type of the datastore.
	DatastoreType OptDatastoreDatastoreType `json:"datastoreType"`
	// A user-friendly name that identifies the datastore.
	DisplayName OptString `json:"displayName"`
	// The immediate parent folder on which this resource is hosted in the inventory of
	// hypervisor-manager.
	FolderInfo OptDatastoreFolderInfo `json:"folderInfo"`
	Generation Generation             `json:"generation"`
	// UUID string uniquely identifying the HCI cluster.
	HciClusterUuid OptString `json:"hciClusterUuid"`
	// List of hypervisor hosts to which the datastore is presented to.
	HostsInfo             []DatastoreHostsInfoItem          `json:"hostsInfo"`
	HypervisorManagerInfo OptDatastoreHypervisorManagerInfo `json:"hypervisorManagerInfo"`
	// UUID string uniquely identifying the datastore.
	ID string `json:"id"`
	// VMware provided moref of the data store.
	Moref OptString `json:"moref"`
	// Name of the datastore as reported by the hypervisor manager.
	Name                          OptString                        `json:"name"`
	ProtectionJobInfo             OptDataManagementJobInfo         `json:"protectionJobInfo"`
	ProtectionPolicyAppliedAtInfo OptProtectionPolicyAppliedAtInfo `json:"protectionPolicyAppliedAtInfo"`
	ProtectionStatus              OptProtectionStatus              `json:"protectionStatus"`
	ProvisioningPolicyInfo        OptProvisioningPolicyInfo        `json:"provisioningPolicyInfo"`
	RecoveryPointsExist           OptRecoveryPointsExist           `json:"recoveryPointsExist"`
	ReplicationInfo               OptReplicationInfo               `json:"replicationInfo"`
	// The 'self' reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Services    Services  `json:"services"`
	// The current state of the datastore.
	State OptDatastoreState `json:"state"`
	// Brief reason for the current state of the datastore.
	StateReason OptString `json:"stateReason"`
	// The current status of the datastore.
	Status OptDatastoreStatus `json:"status"`
	Type   Type               `json:"type"`
	// VMware provided uuid of the datastore.
	UID OptUUID `json:"uid"`
	// Time in UTC at which the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// Number of virtual machines associated with the datastore.
	VmCount OptInt64 `json:"vmCount"`
	// List of virtual machine protection groups.
	VmProtectionGroupsInfo []VmProtectionGroupInfo `json:"vmProtectionGroupsInfo"`
	// Volumes associated with datastore.
	VolumesInfo []VolumeInfo `json:"volumesInfo"`
}

// GetAllowedOperations returns the value of AllowedOperations.
func (s *Datastore) GetAllowedOperations() []DatastoreAllowedOperationsItem {
	return s.AllowedOperations
}

// GetAppType returns the value of AppType.
func (s *Datastore) GetAppType() OptDatastoreAppType {
	return s.AppType
}

// GetCapacityFree returns the value of CapacityFree.
func (s *Datastore) GetCapacityFree() OptInt64 {
	return s.CapacityFree
}

// GetCapacityInBytes returns the value of CapacityInBytes.
func (s *Datastore) GetCapacityInBytes() OptInt64 {
	return s.CapacityInBytes
}

// GetCapacityUncommitted returns the value of CapacityUncommitted.
func (s *Datastore) GetCapacityUncommitted() OptInt64 {
	return s.CapacityUncommitted
}

// GetClusterInfo returns the value of ClusterInfo.
func (s *Datastore) GetClusterInfo() OptDatastoreClusterInfo {
	return s.ClusterInfo
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Datastore) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCustomerId returns the value of CustomerId.
func (s *Datastore) GetCustomerId() OptString {
	return s.CustomerId
}

// GetDatacentersInfo returns the value of DatacentersInfo.
func (s *Datastore) GetDatacentersInfo() []DatacenterInfo {
	return s.DatacentersInfo
}

// GetDatastoreClassification returns the value of DatastoreClassification.
func (s *Datastore) GetDatastoreClassification() OptDatastoreDatastoreClassification {
	return s.DatastoreClassification
}

// GetDatastoreType returns the value of DatastoreType.
func (s *Datastore) GetDatastoreType() OptDatastoreDatastoreType {
	return s.DatastoreType
}

// GetDisplayName returns the value of DisplayName.
func (s *Datastore) GetDisplayName() OptString {
	return s.DisplayName
}

// GetFolderInfo returns the value of FolderInfo.
func (s *Datastore) GetFolderInfo() OptDatastoreFolderInfo {
	return s.FolderInfo
}

// GetGeneration returns the value of Generation.
func (s *Datastore) GetGeneration() Generation {
	return s.Generation
}

// GetHciClusterUuid returns the value of HciClusterUuid.
func (s *Datastore) GetHciClusterUuid() OptString {
	return s.HciClusterUuid
}

// GetHostsInfo returns the value of HostsInfo.
func (s *Datastore) GetHostsInfo() []DatastoreHostsInfoItem {
	return s.HostsInfo
}

// GetHypervisorManagerInfo returns the value of HypervisorManagerInfo.
func (s *Datastore) GetHypervisorManagerInfo() OptDatastoreHypervisorManagerInfo {
	return s.HypervisorManagerInfo
}

// GetID returns the value of ID.
func (s *Datastore) GetID() string {
	return s.ID
}

// GetMoref returns the value of Moref.
func (s *Datastore) GetMoref() OptString {
	return s.Moref
}

// GetName returns the value of Name.
func (s *Datastore) GetName() OptString {
	return s.Name
}

// GetProtectionJobInfo returns the value of ProtectionJobInfo.
func (s *Datastore) GetProtectionJobInfo() OptDataManagementJobInfo {
	return s.ProtectionJobInfo
}

// GetProtectionPolicyAppliedAtInfo returns the value of ProtectionPolicyAppliedAtInfo.
func (s *Datastore) GetProtectionPolicyAppliedAtInfo() OptProtectionPolicyAppliedAtInfo {
	return s.ProtectionPolicyAppliedAtInfo
}

// GetProtectionStatus returns the value of ProtectionStatus.
func (s *Datastore) GetProtectionStatus() OptProtectionStatus {
	return s.ProtectionStatus
}

// GetProvisioningPolicyInfo returns the value of ProvisioningPolicyInfo.
func (s *Datastore) GetProvisioningPolicyInfo() OptProvisioningPolicyInfo {
	return s.ProvisioningPolicyInfo
}

// GetRecoveryPointsExist returns the value of RecoveryPointsExist.
func (s *Datastore) GetRecoveryPointsExist() OptRecoveryPointsExist {
	return s.RecoveryPointsExist
}

// GetReplicationInfo returns the value of ReplicationInfo.
func (s *Datastore) GetReplicationInfo() OptReplicationInfo {
	return s.ReplicationInfo
}

// GetResourceUri returns the value of ResourceUri.
func (s *Datastore) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetServices returns the value of Services.
func (s *Datastore) GetServices() Services {
	return s.Services
}

// GetState returns the value of State.
func (s *Datastore) GetState() OptDatastoreState {
	return s.State
}

// GetStateReason returns the value of StateReason.
func (s *Datastore) GetStateReason() OptString {
	return s.StateReason
}

// GetStatus returns the value of Status.
func (s *Datastore) GetStatus() OptDatastoreStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *Datastore) GetType() Type {
	return s.Type
}

// GetUID returns the value of UID.
func (s *Datastore) GetUID() OptUUID {
	return s.UID
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Datastore) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetVmCount returns the value of VmCount.
func (s *Datastore) GetVmCount() OptInt64 {
	return s.VmCount
}

// GetVmProtectionGroupsInfo returns the value of VmProtectionGroupsInfo.
func (s *Datastore) GetVmProtectionGroupsInfo() []VmProtectionGroupInfo {
	return s.VmProtectionGroupsInfo
}

// GetVolumesInfo returns the value of VolumesInfo.
func (s *Datastore) GetVolumesInfo() []VolumeInfo {
	return s.VolumesInfo
}

// SetAllowedOperations sets the value of AllowedOperations.
func (s *Datastore) SetAllowedOperations(val []DatastoreAllowedOperationsItem) {
	s.AllowedOperations = val
}

// SetAppType sets the value of AppType.
func (s *Datastore) SetAppType(val OptDatastoreAppType) {
	s.AppType = val
}

// SetCapacityFree sets the value of CapacityFree.
func (s *Datastore) SetCapacityFree(val OptInt64) {
	s.CapacityFree = val
}

// SetCapacityInBytes sets the value of CapacityInBytes.
func (s *Datastore) SetCapacityInBytes(val OptInt64) {
	s.CapacityInBytes = val
}

// SetCapacityUncommitted sets the value of CapacityUncommitted.
func (s *Datastore) SetCapacityUncommitted(val OptInt64) {
	s.CapacityUncommitted = val
}

// SetClusterInfo sets the value of ClusterInfo.
func (s *Datastore) SetClusterInfo(val OptDatastoreClusterInfo) {
	s.ClusterInfo = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Datastore) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCustomerId sets the value of CustomerId.
func (s *Datastore) SetCustomerId(val OptString) {
	s.CustomerId = val
}

// SetDatacentersInfo sets the value of DatacentersInfo.
func (s *Datastore) SetDatacentersInfo(val []DatacenterInfo) {
	s.DatacentersInfo = val
}

// SetDatastoreClassification sets the value of DatastoreClassification.
func (s *Datastore) SetDatastoreClassification(val OptDatastoreDatastoreClassification) {
	s.DatastoreClassification = val
}

// SetDatastoreType sets the value of DatastoreType.
func (s *Datastore) SetDatastoreType(val OptDatastoreDatastoreType) {
	s.DatastoreType = val
}

// SetDisplayName sets the value of DisplayName.
func (s *Datastore) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetFolderInfo sets the value of FolderInfo.
func (s *Datastore) SetFolderInfo(val OptDatastoreFolderInfo) {
	s.FolderInfo = val
}

// SetGeneration sets the value of Generation.
func (s *Datastore) SetGeneration(val Generation) {
	s.Generation = val
}

// SetHciClusterUuid sets the value of HciClusterUuid.
func (s *Datastore) SetHciClusterUuid(val OptString) {
	s.HciClusterUuid = val
}

// SetHostsInfo sets the value of HostsInfo.
func (s *Datastore) SetHostsInfo(val []DatastoreHostsInfoItem) {
	s.HostsInfo = val
}

// SetHypervisorManagerInfo sets the value of HypervisorManagerInfo.
func (s *Datastore) SetHypervisorManagerInfo(val OptDatastoreHypervisorManagerInfo) {
	s.HypervisorManagerInfo = val
}

// SetID sets the value of ID.
func (s *Datastore) SetID(val string) {
	s.ID = val
}

// SetMoref sets the value of Moref.
func (s *Datastore) SetMoref(val OptString) {
	s.Moref = val
}

// SetName sets the value of Name.
func (s *Datastore) SetName(val OptString) {
	s.Name = val
}

// SetProtectionJobInfo sets the value of ProtectionJobInfo.
func (s *Datastore) SetProtectionJobInfo(val OptDataManagementJobInfo) {
	s.ProtectionJobInfo = val
}

// SetProtectionPolicyAppliedAtInfo sets the value of ProtectionPolicyAppliedAtInfo.
func (s *Datastore) SetProtectionPolicyAppliedAtInfo(val OptProtectionPolicyAppliedAtInfo) {
	s.ProtectionPolicyAppliedAtInfo = val
}

// SetProtectionStatus sets the value of ProtectionStatus.
func (s *Datastore) SetProtectionStatus(val OptProtectionStatus) {
	s.ProtectionStatus = val
}

// SetProvisioningPolicyInfo sets the value of ProvisioningPolicyInfo.
func (s *Datastore) SetProvisioningPolicyInfo(val OptProvisioningPolicyInfo) {
	s.ProvisioningPolicyInfo = val
}

// SetRecoveryPointsExist sets the value of RecoveryPointsExist.
func (s *Datastore) SetRecoveryPointsExist(val OptRecoveryPointsExist) {
	s.RecoveryPointsExist = val
}

// SetReplicationInfo sets the value of ReplicationInfo.
func (s *Datastore) SetReplicationInfo(val OptReplicationInfo) {
	s.ReplicationInfo = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *Datastore) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetServices sets the value of Services.
func (s *Datastore) SetServices(val Services) {
	s.Services = val
}

// SetState sets the value of State.
func (s *Datastore) SetState(val OptDatastoreState) {
	s.State = val
}

// SetStateReason sets the value of StateReason.
func (s *Datastore) SetStateReason(val OptString) {
	s.StateReason = val
}

// SetStatus sets the value of Status.
func (s *Datastore) SetStatus(val OptDatastoreStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *Datastore) SetType(val Type) {
	s.Type = val
}

// SetUID sets the value of UID.
func (s *Datastore) SetUID(val OptUUID) {
	s.UID = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Datastore) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetVmCount sets the value of VmCount.
func (s *Datastore) SetVmCount(val OptInt64) {
	s.VmCount = val
}

// SetVmProtectionGroupsInfo sets the value of VmProtectionGroupsInfo.
func (s *Datastore) SetVmProtectionGroupsInfo(val []VmProtectionGroupInfo) {
	s.VmProtectionGroupsInfo = val
}

// SetVolumesInfo sets the value of VolumesInfo.
func (s *Datastore) SetVolumesInfo(val []VolumeInfo) {
	s.VolumesInfo = val
}

func (*Datastore) datastoreRes() {}

type DatastoreAllowedOperationsItem string

const (
	DatastoreAllowedOperationsItemDATASTORECREATE         DatastoreAllowedOperationsItem = "DATASTORE_CREATE"
	DatastoreAllowedOperationsItemDATASTOREDELETE         DatastoreAllowedOperationsItem = "DATASTORE_DELETE"
	DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE   DatastoreAllowedOperationsItem = "DATASTORE_BACKUP_CREATE"
	DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE   DatastoreAllowedOperationsItem = "DATASTORE_BACKUP_UPDATE"
	DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE   DatastoreAllowedOperationsItem = "DATASTORE_BACKUP_DELETE"
	DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE DatastoreAllowedOperationsItem = "DATASTORE_SNAPSHOT_CREATE"
	DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE DatastoreAllowedOperationsItem = "DATASTORE_SNAPSHOT_UPDATE"
	DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE DatastoreAllowedOperationsItem = "DATASTORE_SNAPSHOT_DELETE"
	DatastoreAllowedOperationsItemDATASTORERESTORE        DatastoreAllowedOperationsItem = "DATASTORE_RESTORE"
)

// AllValues returns all DatastoreAllowedOperationsItem values.
func (DatastoreAllowedOperationsItem) AllValues() []DatastoreAllowedOperationsItem {
	return []DatastoreAllowedOperationsItem{
		DatastoreAllowedOperationsItemDATASTORECREATE,
		DatastoreAllowedOperationsItemDATASTOREDELETE,
		DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE,
		DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE,
		DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE,
		DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE,
		DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE,
		DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE,
		DatastoreAllowedOperationsItemDATASTORERESTORE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreAllowedOperationsItem) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreAllowedOperationsItemDATASTORECREATE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTOREDELETE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE:
		return []byte(s), nil
	case DatastoreAllowedOperationsItemDATASTORERESTORE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreAllowedOperationsItem) UnmarshalText(data []byte) error {
	switch DatastoreAllowedOperationsItem(data) {
	case DatastoreAllowedOperationsItemDATASTORECREATE:
		*s = DatastoreAllowedOperationsItemDATASTORECREATE
		return nil
	case DatastoreAllowedOperationsItemDATASTOREDELETE:
		*s = DatastoreAllowedOperationsItemDATASTOREDELETE
		return nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPCREATE
		return nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPUPDATE
		return nil
	case DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE:
		*s = DatastoreAllowedOperationsItemDATASTOREBACKUPDELETE
		return nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTCREATE
		return nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTUPDATE
		return nil
	case DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE:
		*s = DatastoreAllowedOperationsItemDATASTORESNAPSHOTDELETE
		return nil
	case DatastoreAllowedOperationsItemDATASTORERESTORE:
		*s = DatastoreAllowedOperationsItemDATASTORERESTORE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Application type of this asset.
type DatastoreAppType string

const (
	DatastoreAppTypeVMWARE DatastoreAppType = "VMWARE"
)

// AllValues returns all DatastoreAppType values.
func (DatastoreAppType) AllValues() []DatastoreAppType {
	return []DatastoreAppType{
		DatastoreAppTypeVMWARE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreAppType) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreAppTypeVMWARE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreAppType) UnmarshalText(data []byte) error {
	switch DatastoreAppType(data) {
	case DatastoreAppTypeVMWARE:
		*s = DatastoreAppTypeVMWARE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DatastoreClusterInfo struct {
	// A user-friendly name that identifies the hypervisor cluster.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor cluster.
	ID OptString `json:"id"`
	// Name of the cluster as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *DatastoreClusterInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *DatastoreClusterInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *DatastoreClusterInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DatastoreClusterInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DatastoreClusterInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *DatastoreClusterInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *DatastoreClusterInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DatastoreClusterInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DatastoreClusterInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DatastoreClusterInfo) SetType(val OptString) {
	s.Type = val
}

// Classification of datastore types for which protection will be disabled.
type DatastoreDatastoreClassification string

const (
	DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY DatastoreDatastoreClassification = "PROTECTION_STORE_GATEWAY"
)

// AllValues returns all DatastoreDatastoreClassification values.
func (DatastoreDatastoreClassification) AllValues() []DatastoreDatastoreClassification {
	return []DatastoreDatastoreClassification{
		DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreDatastoreClassification) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreDatastoreClassification) UnmarshalText(data []byte) error {
	switch DatastoreDatastoreClassification(data) {
	case DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY:
		*s = DatastoreDatastoreClassificationPROTECTIONSTOREGATEWAY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of the datastore.
type DatastoreDatastoreType string

const (
	DatastoreDatastoreTypeVMFS DatastoreDatastoreType = "VMFS"
	DatastoreDatastoreTypeVVOL DatastoreDatastoreType = "VVOL"
	DatastoreDatastoreTypeNFS  DatastoreDatastoreType = "NFS"
	DatastoreDatastoreTypeVSAN DatastoreDatastoreType = "VSAN"
)

// AllValues returns all DatastoreDatastoreType values.
func (DatastoreDatastoreType) AllValues() []DatastoreDatastoreType {
	return []DatastoreDatastoreType{
		DatastoreDatastoreTypeVMFS,
		DatastoreDatastoreTypeVVOL,
		DatastoreDatastoreTypeNFS,
		DatastoreDatastoreTypeVSAN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreDatastoreType) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreDatastoreTypeVMFS:
		return []byte(s), nil
	case DatastoreDatastoreTypeVVOL:
		return []byte(s), nil
	case DatastoreDatastoreTypeNFS:
		return []byte(s), nil
	case DatastoreDatastoreTypeVSAN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreDatastoreType) UnmarshalText(data []byte) error {
	switch DatastoreDatastoreType(data) {
	case DatastoreDatastoreTypeVMFS:
		*s = DatastoreDatastoreTypeVMFS
		return nil
	case DatastoreDatastoreTypeVVOL:
		*s = DatastoreDatastoreTypeVVOL
		return nil
	case DatastoreDatastoreTypeNFS:
		*s = DatastoreDatastoreTypeNFS
		return nil
	case DatastoreDatastoreTypeVSAN:
		*s = DatastoreDatastoreTypeVSAN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The immediate parent folder on which this resource is hosted in the inventory of
// hypervisor-manager.
type DatastoreFolderInfo struct {
	// A user-friendly name that identifies the hypervisor folder.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor folder.
	ID OptString `json:"id"`
	// Name of the folder as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *DatastoreFolderInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *DatastoreFolderInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *DatastoreFolderInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DatastoreFolderInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DatastoreFolderInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *DatastoreFolderInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *DatastoreFolderInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DatastoreFolderInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DatastoreFolderInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DatastoreFolderInfo) SetType(val OptString) {
	s.Type = val
}

type DatastoreForbidden ErrorResponse

func (*DatastoreForbidden) datastoreRes() {}

type DatastoreHostsInfoItem struct {
	// A user-friendly name that identifies the hypervisor host.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor host.
	ID OptString `json:"id"`
	// Name of the host as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *DatastoreHostsInfoItem) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *DatastoreHostsInfoItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *DatastoreHostsInfoItem) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DatastoreHostsInfoItem) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DatastoreHostsInfoItem) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *DatastoreHostsInfoItem) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *DatastoreHostsInfoItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DatastoreHostsInfoItem) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DatastoreHostsInfoItem) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DatastoreHostsInfoItem) SetType(val OptString) {
	s.Type = val
}

type DatastoreHypervisorManagerInfo struct {
	// User defined name for the hypervisor manager.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor manager.
	ID OptString `json:"id"`
	// Name as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *DatastoreHypervisorManagerInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *DatastoreHypervisorManagerInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *DatastoreHypervisorManagerInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *DatastoreHypervisorManagerInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *DatastoreHypervisorManagerInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *DatastoreHypervisorManagerInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *DatastoreHypervisorManagerInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DatastoreHypervisorManagerInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *DatastoreHypervisorManagerInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *DatastoreHypervisorManagerInfo) SetType(val OptString) {
	s.Type = val
}

type DatastoreInternalServerError ErrorResponse

func (*DatastoreInternalServerError) datastoreRes() {}

type DatastoreNotFound ErrorResponse

func (*DatastoreNotFound) datastoreRes() {}

// The current state of the datastore.
type DatastoreState string

const (
	DatastoreStateOK         DatastoreState = "OK"
	DatastoreStateERROR      DatastoreState = "ERROR"
	DatastoreStateCREATING   DatastoreState = "CREATING"
	DatastoreStateDELETING   DatastoreState = "DELETING"
	DatastoreStateUPDATING   DatastoreState = "UPDATING"
	DatastoreStateREFRESHING DatastoreState = "REFRESHING"
	DatastoreStateRESTORING  DatastoreState = "RESTORING"
	DatastoreStateMOUNTED    DatastoreState = "MOUNTED"
	DatastoreStateDELETED    DatastoreState = "DELETED"
)

// AllValues returns all DatastoreState values.
func (DatastoreState) AllValues() []DatastoreState {
	return []DatastoreState{
		DatastoreStateOK,
		DatastoreStateERROR,
		DatastoreStateCREATING,
		DatastoreStateDELETING,
		DatastoreStateUPDATING,
		DatastoreStateREFRESHING,
		DatastoreStateRESTORING,
		DatastoreStateMOUNTED,
		DatastoreStateDELETED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreState) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreStateOK:
		return []byte(s), nil
	case DatastoreStateERROR:
		return []byte(s), nil
	case DatastoreStateCREATING:
		return []byte(s), nil
	case DatastoreStateDELETING:
		return []byte(s), nil
	case DatastoreStateUPDATING:
		return []byte(s), nil
	case DatastoreStateREFRESHING:
		return []byte(s), nil
	case DatastoreStateRESTORING:
		return []byte(s), nil
	case DatastoreStateMOUNTED:
		return []byte(s), nil
	case DatastoreStateDELETED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreState) UnmarshalText(data []byte) error {
	switch DatastoreState(data) {
	case DatastoreStateOK:
		*s = DatastoreStateOK
		return nil
	case DatastoreStateERROR:
		*s = DatastoreStateERROR
		return nil
	case DatastoreStateCREATING:
		*s = DatastoreStateCREATING
		return nil
	case DatastoreStateDELETING:
		*s = DatastoreStateDELETING
		return nil
	case DatastoreStateUPDATING:
		*s = DatastoreStateUPDATING
		return nil
	case DatastoreStateREFRESHING:
		*s = DatastoreStateREFRESHING
		return nil
	case DatastoreStateRESTORING:
		*s = DatastoreStateRESTORING
		return nil
	case DatastoreStateMOUNTED:
		*s = DatastoreStateMOUNTED
		return nil
	case DatastoreStateDELETED:
		*s = DatastoreStateDELETED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the datastore.
type DatastoreStatus string

const (
	DatastoreStatusOK      DatastoreStatus = "OK"
	DatastoreStatusERROR   DatastoreStatus = "ERROR"
	DatastoreStatusWARNING DatastoreStatus = "WARNING"
)

// AllValues returns all DatastoreStatus values.
func (DatastoreStatus) AllValues() []DatastoreStatus {
	return []DatastoreStatus{
		DatastoreStatusOK,
		DatastoreStatusERROR,
		DatastoreStatusWARNING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DatastoreStatus) MarshalText() ([]byte, error) {
	switch s {
	case DatastoreStatusOK:
		return []byte(s), nil
	case DatastoreStatusERROR:
		return []byte(s), nil
	case DatastoreStatusWARNING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DatastoreStatus) UnmarshalText(data []byte) error {
	switch DatastoreStatus(data) {
	case DatastoreStatusOK:
		*s = DatastoreStatusOK
		return nil
	case DatastoreStatusERROR:
		*s = DatastoreStatusERROR
		return nil
	case DatastoreStatusWARNING:
		*s = DatastoreStatusWARNING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DatastoreUnauthorized ErrorResponse

func (*DatastoreUnauthorized) datastoreRes() {}

type DisplayName string

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// A unique identifier for the request.
	DebugId string `json:"debugId"`
	// A machine friendly identifier for the error response.
	ErrorCode string `json:"errorCode"`
	// The HTTP status code of the response.
	HttpStatusCode int `json:"httpStatusCode"`
	// A user-friendly error message.
	Message string `json:"message"`
}

// GetDebugId returns the value of DebugId.
func (s *ErrorResponse) GetDebugId() string {
	return s.DebugId
}

// GetErrorCode returns the value of ErrorCode.
func (s *ErrorResponse) GetErrorCode() string {
	return s.ErrorCode
}

// GetHttpStatusCode returns the value of HttpStatusCode.
func (s *ErrorResponse) GetHttpStatusCode() int {
	return s.HttpStatusCode
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() string {
	return s.Message
}

// SetDebugId sets the value of DebugId.
func (s *ErrorResponse) SetDebugId(val string) {
	s.DebugId = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ErrorResponse) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetHttpStatusCode sets the value of HttpStatusCode.
func (s *ErrorResponse) SetHttpStatusCode(val int) {
	s.HttpStatusCode = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val string) {
	s.Message = val
}

type Generation int64

// Host network system information.
// Ref: #/components/schemas/HostNetworkSystem
type HostNetworkSystem struct {
	// List of port group information.
	PortGroups []PortGroup `json:"portGroups"`
}

// GetPortGroups returns the value of PortGroups.
func (s *HostNetworkSystem) GetPortGroups() []PortGroup {
	return s.PortGroups
}

// SetPortGroups sets the value of PortGroups.
func (s *HostNetworkSystem) SetPortGroups(val []PortGroup) {
	s.PortGroups = val
}

// Represents a single instance of a hypervisor cluster (Vmware ESXi Cluster).
// Ref: #/components/schemas/HypervisorCluster
type HypervisorCluster struct {
	// Application specific information for this cluster.
	AppInfo OptHypervisorClusterAppInfo `json:"appInfo"`
	// Hypervisor cluster performance metrics.
	ClusterPerfMetricInfo OptHypervisorClusterClusterPerfMetricInfo `json:"clusterPerfMetricInfo"`
	// The type of the hypervisor cluster.
	ClusterType OptHypervisorClusterClusterType `json:"clusterType"`
	// Time in UTC at which the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// The customer application identifier.
	CustomerId OptString `json:"customerId"`
	// A user-friendly name that identifies the hypervisor cluster. This will always be same as name
	// since adding or updating hypervisor clusters is not supported when managed from a manager, such as
	// the vCenter.
	DisplayName OptString  `json:"displayName"`
	Generation  Generation `json:"generation"`
	// UUID string uniquely identifying the HCI cluster.
	HciClusterUuid OptString `json:"hciClusterUuid"`
	// Captures the list of all hosts of this cluster. In a VMWare cluster, this entity maps to ESXi
	// hosts.
	HypervisorHosts       []HypervisorClusterHypervisorHostsItem    `json:"hypervisorHosts"`
	HypervisorManagerInfo OptHypervisorClusterHypervisorManagerInfo `json:"hypervisorManagerInfo"`
	// UUID string uniquely identifying the hypervisor cluster.
	ID string `json:"id"`
	// Name of the cluster as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// All the network names associated with this cluster.
	NetworksInfo []string `json:"networksInfo"`
	// The 'self' reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Services    Services  `json:"services"`
	// The current state of the hypervisor cluster object.
	State OptHypervisorClusterState `json:"state"`
	// Brief reason for the current state of the hypervisor cluster.
	StateReason OptString `json:"stateReason"`
	// The current status of the hypervisor cluster. Status is derived and abstracted to a 'standard
	// status' based on the status reported by the hypervisor manager.
	Status OptHypervisorClusterStatus `json:"status"`
	Type   Type                       `json:"type"`
	// Time in UTC at which the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetAppInfo returns the value of AppInfo.
func (s *HypervisorCluster) GetAppInfo() OptHypervisorClusterAppInfo {
	return s.AppInfo
}

// GetClusterPerfMetricInfo returns the value of ClusterPerfMetricInfo.
func (s *HypervisorCluster) GetClusterPerfMetricInfo() OptHypervisorClusterClusterPerfMetricInfo {
	return s.ClusterPerfMetricInfo
}

// GetClusterType returns the value of ClusterType.
func (s *HypervisorCluster) GetClusterType() OptHypervisorClusterClusterType {
	return s.ClusterType
}

// GetCreatedAt returns the value of CreatedAt.
func (s *HypervisorCluster) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCustomerId returns the value of CustomerId.
func (s *HypervisorCluster) GetCustomerId() OptString {
	return s.CustomerId
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorCluster) GetDisplayName() OptString {
	return s.DisplayName
}

// GetGeneration returns the value of Generation.
func (s *HypervisorCluster) GetGeneration() Generation {
	return s.Generation
}

// GetHciClusterUuid returns the value of HciClusterUuid.
func (s *HypervisorCluster) GetHciClusterUuid() OptString {
	return s.HciClusterUuid
}

// GetHypervisorHosts returns the value of HypervisorHosts.
func (s *HypervisorCluster) GetHypervisorHosts() []HypervisorClusterHypervisorHostsItem {
	return s.HypervisorHosts
}

// GetHypervisorManagerInfo returns the value of HypervisorManagerInfo.
func (s *HypervisorCluster) GetHypervisorManagerInfo() OptHypervisorClusterHypervisorManagerInfo {
	return s.HypervisorManagerInfo
}

// GetID returns the value of ID.
func (s *HypervisorCluster) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorCluster) GetName() OptString {
	return s.Name
}

// GetNetworksInfo returns the value of NetworksInfo.
func (s *HypervisorCluster) GetNetworksInfo() []string {
	return s.NetworksInfo
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorCluster) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetServices returns the value of Services.
func (s *HypervisorCluster) GetServices() Services {
	return s.Services
}

// GetState returns the value of State.
func (s *HypervisorCluster) GetState() OptHypervisorClusterState {
	return s.State
}

// GetStateReason returns the value of StateReason.
func (s *HypervisorCluster) GetStateReason() OptString {
	return s.StateReason
}

// GetStatus returns the value of Status.
func (s *HypervisorCluster) GetStatus() OptHypervisorClusterStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *HypervisorCluster) GetType() Type {
	return s.Type
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *HypervisorCluster) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetAppInfo sets the value of AppInfo.
func (s *HypervisorCluster) SetAppInfo(val OptHypervisorClusterAppInfo) {
	s.AppInfo = val
}

// SetClusterPerfMetricInfo sets the value of ClusterPerfMetricInfo.
func (s *HypervisorCluster) SetClusterPerfMetricInfo(val OptHypervisorClusterClusterPerfMetricInfo) {
	s.ClusterPerfMetricInfo = val
}

// SetClusterType sets the value of ClusterType.
func (s *HypervisorCluster) SetClusterType(val OptHypervisorClusterClusterType) {
	s.ClusterType = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *HypervisorCluster) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCustomerId sets the value of CustomerId.
func (s *HypervisorCluster) SetCustomerId(val OptString) {
	s.CustomerId = val
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorCluster) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetGeneration sets the value of Generation.
func (s *HypervisorCluster) SetGeneration(val Generation) {
	s.Generation = val
}

// SetHciClusterUuid sets the value of HciClusterUuid.
func (s *HypervisorCluster) SetHciClusterUuid(val OptString) {
	s.HciClusterUuid = val
}

// SetHypervisorHosts sets the value of HypervisorHosts.
func (s *HypervisorCluster) SetHypervisorHosts(val []HypervisorClusterHypervisorHostsItem) {
	s.HypervisorHosts = val
}

// SetHypervisorManagerInfo sets the value of HypervisorManagerInfo.
func (s *HypervisorCluster) SetHypervisorManagerInfo(val OptHypervisorClusterHypervisorManagerInfo) {
	s.HypervisorManagerInfo = val
}

// SetID sets the value of ID.
func (s *HypervisorCluster) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorCluster) SetName(val OptString) {
	s.Name = val
}

// SetNetworksInfo sets the value of NetworksInfo.
func (s *HypervisorCluster) SetNetworksInfo(val []string) {
	s.NetworksInfo = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorCluster) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetServices sets the value of Services.
func (s *HypervisorCluster) SetServices(val Services) {
	s.Services = val
}

// SetState sets the value of State.
func (s *HypervisorCluster) SetState(val OptHypervisorClusterState) {
	s.State = val
}

// SetStateReason sets the value of StateReason.
func (s *HypervisorCluster) SetStateReason(val OptString) {
	s.StateReason = val
}

// SetStatus sets the value of Status.
func (s *HypervisorCluster) SetStatus(val OptHypervisorClusterStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *HypervisorCluster) SetType(val Type) {
	s.Type = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *HypervisorCluster) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*HypervisorCluster) hypervisorClusterRes() {}

// Application specific information for this cluster.
type HypervisorClusterAppInfo struct {
	Vmware OptHypervisorClusterAppInfoVmware `json:"vmware"`
}

// GetVmware returns the value of Vmware.
func (s *HypervisorClusterAppInfo) GetVmware() OptHypervisorClusterAppInfoVmware {
	return s.Vmware
}

// SetVmware sets the value of Vmware.
func (s *HypervisorClusterAppInfo) SetVmware(val OptHypervisorClusterAppInfoVmware) {
	s.Vmware = val
}

type HypervisorClusterAppInfoVmware struct {
	DatacenterInfo OptDatacenterInfo `json:"datacenterInfo"`
	// VMware provided moref for this cluster.
	Moref OptString `json:"moref"`
}

// GetDatacenterInfo returns the value of DatacenterInfo.
func (s *HypervisorClusterAppInfoVmware) GetDatacenterInfo() OptDatacenterInfo {
	return s.DatacenterInfo
}

// GetMoref returns the value of Moref.
func (s *HypervisorClusterAppInfoVmware) GetMoref() OptString {
	return s.Moref
}

// SetDatacenterInfo sets the value of DatacenterInfo.
func (s *HypervisorClusterAppInfoVmware) SetDatacenterInfo(val OptDatacenterInfo) {
	s.DatacenterInfo = val
}

// SetMoref sets the value of Moref.
func (s *HypervisorClusterAppInfoVmware) SetMoref(val OptString) {
	s.Moref = val
}

// Hypervisor cluster performance metrics.
type HypervisorClusterClusterPerfMetricInfo struct {
	// CPU allocated in mega hertz.
	CpuCapacityInMhz OptInt64 `json:"cpuCapacityInMhz"`
	// CPU used in mega hertz.
	CpuUsageInMhz OptInt64 `json:"cpuUsageInMhz"`
	// Memory allocated in bytes.
	MemorySizeInBytes OptInt64 `json:"memorySizeInBytes"`
	// Memory used in mega bytes.
	MemoryUsageInMb OptInt64 `json:"memoryUsageInMb"`
	// Storage allocated in bytes.
	TotalStorageInBytes OptInt64 `json:"totalStorageInBytes"`
	// Storage used in bytes.
	UsedStorageInBytes OptInt64 `json:"usedStorageInBytes"`
}

// GetCpuCapacityInMhz returns the value of CpuCapacityInMhz.
func (s *HypervisorClusterClusterPerfMetricInfo) GetCpuCapacityInMhz() OptInt64 {
	return s.CpuCapacityInMhz
}

// GetCpuUsageInMhz returns the value of CpuUsageInMhz.
func (s *HypervisorClusterClusterPerfMetricInfo) GetCpuUsageInMhz() OptInt64 {
	return s.CpuUsageInMhz
}

// GetMemorySizeInBytes returns the value of MemorySizeInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) GetMemorySizeInBytes() OptInt64 {
	return s.MemorySizeInBytes
}

// GetMemoryUsageInMb returns the value of MemoryUsageInMb.
func (s *HypervisorClusterClusterPerfMetricInfo) GetMemoryUsageInMb() OptInt64 {
	return s.MemoryUsageInMb
}

// GetTotalStorageInBytes returns the value of TotalStorageInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) GetTotalStorageInBytes() OptInt64 {
	return s.TotalStorageInBytes
}

// GetUsedStorageInBytes returns the value of UsedStorageInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) GetUsedStorageInBytes() OptInt64 {
	return s.UsedStorageInBytes
}

// SetCpuCapacityInMhz sets the value of CpuCapacityInMhz.
func (s *HypervisorClusterClusterPerfMetricInfo) SetCpuCapacityInMhz(val OptInt64) {
	s.CpuCapacityInMhz = val
}

// SetCpuUsageInMhz sets the value of CpuUsageInMhz.
func (s *HypervisorClusterClusterPerfMetricInfo) SetCpuUsageInMhz(val OptInt64) {
	s.CpuUsageInMhz = val
}

// SetMemorySizeInBytes sets the value of MemorySizeInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) SetMemorySizeInBytes(val OptInt64) {
	s.MemorySizeInBytes = val
}

// SetMemoryUsageInMb sets the value of MemoryUsageInMb.
func (s *HypervisorClusterClusterPerfMetricInfo) SetMemoryUsageInMb(val OptInt64) {
	s.MemoryUsageInMb = val
}

// SetTotalStorageInBytes sets the value of TotalStorageInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) SetTotalStorageInBytes(val OptInt64) {
	s.TotalStorageInBytes = val
}

// SetUsedStorageInBytes sets the value of UsedStorageInBytes.
func (s *HypervisorClusterClusterPerfMetricInfo) SetUsedStorageInBytes(val OptInt64) {
	s.UsedStorageInBytes = val
}

// The type of the hypervisor cluster.
type HypervisorClusterClusterType string

const (
	HypervisorClusterClusterTypeESXCLUSTER HypervisorClusterClusterType = "ESX_CLUSTER"
)

// AllValues returns all HypervisorClusterClusterType values.
func (HypervisorClusterClusterType) AllValues() []HypervisorClusterClusterType {
	return []HypervisorClusterClusterType{
		HypervisorClusterClusterTypeESXCLUSTER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorClusterClusterType) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorClusterClusterTypeESXCLUSTER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorClusterClusterType) UnmarshalText(data []byte) error {
	switch HypervisorClusterClusterType(data) {
	case HypervisorClusterClusterTypeESXCLUSTER:
		*s = HypervisorClusterClusterTypeESXCLUSTER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HypervisorClusterForbidden ErrorResponse

func (*HypervisorClusterForbidden) hypervisorClusterRes() {}

type HypervisorClusterHypervisorHostsItem struct {
	// A user-friendly name that identifies the hypervisor host. This will always be same as name since
	// adding or updating hypervisor hosts is not supported when managed from a manager, such as the
	// vCenter.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor host.
	ID OptString `json:"id"`
	// Name of the host as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorClusterHypervisorHostsItem) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *HypervisorClusterHypervisorHostsItem) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorClusterHypervisorHostsItem) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorClusterHypervisorHostsItem) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *HypervisorClusterHypervisorHostsItem) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorClusterHypervisorHostsItem) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *HypervisorClusterHypervisorHostsItem) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorClusterHypervisorHostsItem) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorClusterHypervisorHostsItem) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *HypervisorClusterHypervisorHostsItem) SetType(val OptString) {
	s.Type = val
}

type HypervisorClusterHypervisorManagerInfo struct {
	// User defined name for the hypervisor manager.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the hypervisor manager.
	ID OptString `json:"id"`
	// Name as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of resource.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorClusterHypervisorManagerInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *HypervisorClusterHypervisorManagerInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorClusterHypervisorManagerInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorClusterHypervisorManagerInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *HypervisorClusterHypervisorManagerInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorClusterHypervisorManagerInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *HypervisorClusterHypervisorManagerInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorClusterHypervisorManagerInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorClusterHypervisorManagerInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *HypervisorClusterHypervisorManagerInfo) SetType(val OptString) {
	s.Type = val
}

type HypervisorClusterInternalServerError ErrorResponse

func (*HypervisorClusterInternalServerError) hypervisorClusterRes() {}

type HypervisorClusterNotFound ErrorResponse

func (*HypervisorClusterNotFound) hypervisorClusterRes() {}

// The current state of the hypervisor cluster object.
type HypervisorClusterState string

const (
	HypervisorClusterStateOK         HypervisorClusterState = "OK"
	HypervisorClusterStateERROR      HypervisorClusterState = "ERROR"
	HypervisorClusterStateREFRESHING HypervisorClusterState = "REFRESHING"
)

// AllValues returns all HypervisorClusterState values.
func (HypervisorClusterState) AllValues() []HypervisorClusterState {
	return []HypervisorClusterState{
		HypervisorClusterStateOK,
		HypervisorClusterStateERROR,
		HypervisorClusterStateREFRESHING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorClusterState) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorClusterStateOK:
		return []byte(s), nil
	case HypervisorClusterStateERROR:
		return []byte(s), nil
	case HypervisorClusterStateREFRESHING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorClusterState) UnmarshalText(data []byte) error {
	switch HypervisorClusterState(data) {
	case HypervisorClusterStateOK:
		*s = HypervisorClusterStateOK
		return nil
	case HypervisorClusterStateERROR:
		*s = HypervisorClusterStateERROR
		return nil
	case HypervisorClusterStateREFRESHING:
		*s = HypervisorClusterStateREFRESHING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the hypervisor cluster. Status is derived and abstracted to a 'standard
// status' based on the status reported by the hypervisor manager.
type HypervisorClusterStatus string

const (
	HypervisorClusterStatusOK      HypervisorClusterStatus = "OK"
	HypervisorClusterStatusERROR   HypervisorClusterStatus = "ERROR"
	HypervisorClusterStatusWARNING HypervisorClusterStatus = "WARNING"
)

// AllValues returns all HypervisorClusterStatus values.
func (HypervisorClusterStatus) AllValues() []HypervisorClusterStatus {
	return []HypervisorClusterStatus{
		HypervisorClusterStatusOK,
		HypervisorClusterStatusERROR,
		HypervisorClusterStatusWARNING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorClusterStatus) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorClusterStatusOK:
		return []byte(s), nil
	case HypervisorClusterStatusERROR:
		return []byte(s), nil
	case HypervisorClusterStatusWARNING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorClusterStatus) UnmarshalText(data []byte) error {
	switch HypervisorClusterStatus(data) {
	case HypervisorClusterStatusOK:
		*s = HypervisorClusterStatusOK
		return nil
	case HypervisorClusterStatusERROR:
		*s = HypervisorClusterStatusERROR
		return nil
	case HypervisorClusterStatusWARNING:
		*s = HypervisorClusterStatusWARNING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HypervisorClusterUnauthorized ErrorResponse

func (*HypervisorClusterUnauthorized) hypervisorClusterRes() {}

// Represents a single instance of a hypervisor host (Vmware ESXi).
// Ref: #/components/schemas/HypervisorHost
type HypervisorHost struct {
	// Application specific information for this host.
	AppInfo OptHypervisorHostAppInfo `json:"appInfo"`
	CpuInfo OptCpuInfo               `json:"cpuInfo"`
	// CPU sockets information.
	CpuSockets []CpuSocket `json:"cpuSockets"`
	// Time in UTC at which the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// The customer application identifier.
	CustomerId OptString `json:"customerId"`
	// A user-friendly name that identifies the hypervisor host. This will always be same as name since
	// adding or updating hypervisor hosts is not supported when managed from a manager, such as the
	// vCenter.
	DisplayName OptString  `json:"displayName"`
	Generation  Generation `json:"generation"`
	// UUID string uniquely identifying the HCI cluster.
	HciClusterUuid OptString `json:"hciClusterUuid"`
	// UUID string uniquely identifying the HCI server.
	HciServerUuid     OptString            `json:"hciServerUuid"`
	HostNetworkSystem OptHostNetworkSystem `json:"hostNetworkSystem"`
	// Hypervisor host performance metrics.
	HostPerfMetricInfo OptHypervisorHostHostPerfMetricInfo `json:"hostPerfMetricInfo"`
	// The type of the hypervisor host.
	HostType              OptHypervisorHostHostType              `json:"hostType"`
	HypervisorManagerInfo OptHypervisorHostHypervisorManagerInfo `json:"hypervisorManagerInfo"`
	// UUID string uniquely identifying the hypervisor host.
	ID string `json:"id"`
	// Name of the host as reported by the hypervisor manager.
	Name OptString `json:"name"`
	// An IP address or hostname or FQDN to address the hypervisor host.
	NetworkAddress OptString `json:"networkAddress"`
	// All the network names associated with this host.
	NetworksInfo []string `json:"networksInfo"`
	// Parent of this host. It could be a cluster or folder in case of a VMware ESXi Host. For a Hyper-V
	// host it will be cluster or host group.
	ParentInfo OptHypervisorHostParentInfo `json:"parentInfo"`
	// The 'self' reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Services    Services  `json:"services"`
	// The current state of the hypervisor host object.
	State OptHypervisorHostState `json:"state"`
	// Brief reason for the current state of the hypervisor host.
	StateReason OptString `json:"stateReason"`
	// The current status of the hypervisor host. Status is derived and abstracted to a 'standard status'
	// based on the status reported by the hypervisor manager.
	Status OptHypervisorHostStatus `json:"status"`
	// List of storage adapters associated with this host.
	StorageAdaptersInfo []HypervisorHostStorageAdaptersInfoItem `json:"storageAdaptersInfo"`
	Type                Type                                    `json:"type"`
	// A hypervisor host provided durable UID.
	UID OptString `json:"uid"`
	// Time in UTC at which the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// The hypervisor host version.
	Version OptString `json:"version"`
}

// GetAppInfo returns the value of AppInfo.
func (s *HypervisorHost) GetAppInfo() OptHypervisorHostAppInfo {
	return s.AppInfo
}

// GetCpuInfo returns the value of CpuInfo.
func (s *HypervisorHost) GetCpuInfo() OptCpuInfo {
	return s.CpuInfo
}

// GetCpuSockets returns the value of CpuSockets.
func (s *HypervisorHost) GetCpuSockets() []CpuSocket {
	return s.CpuSockets
}

// GetCreatedAt returns the value of CreatedAt.
func (s *HypervisorHost) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCustomerId returns the value of CustomerId.
func (s *HypervisorHost) GetCustomerId() OptString {
	return s.CustomerId
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorHost) GetDisplayName() OptString {
	return s.DisplayName
}

// GetGeneration returns the value of Generation.
func (s *HypervisorHost) GetGeneration() Generation {
	return s.Generation
}

// GetHciClusterUuid returns the value of HciClusterUuid.
func (s *HypervisorHost) GetHciClusterUuid() OptString {
	return s.HciClusterUuid
}

// GetHciServerUuid returns the value of HciServerUuid.
func (s *HypervisorHost) GetHciServerUuid() OptString {
	return s.HciServerUuid
}

// GetHostNetworkSystem returns the value of HostNetworkSystem.
func (s *HypervisorHost) GetHostNetworkSystem() OptHostNetworkSystem {
	return s.HostNetworkSystem
}

// GetHostPerfMetricInfo returns the value of HostPerfMetricInfo.
func (s *HypervisorHost) GetHostPerfMetricInfo() OptHypervisorHostHostPerfMetricInfo {
	return s.HostPerfMetricInfo
}

// GetHostType returns the value of HostType.
func (s *HypervisorHost) GetHostType() OptHypervisorHostHostType {
	return s.HostType
}

// GetHypervisorManagerInfo returns the value of HypervisorManagerInfo.
func (s *HypervisorHost) GetHypervisorManagerInfo() OptHypervisorHostHypervisorManagerInfo {
	return s.HypervisorManagerInfo
}

// GetID returns the value of ID.
func (s *HypervisorHost) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorHost) GetName() OptString {
	return s.Name
}

// GetNetworkAddress returns the value of NetworkAddress.
func (s *HypervisorHost) GetNetworkAddress() OptString {
	return s.NetworkAddress
}

// GetNetworksInfo returns the value of NetworksInfo.
func (s *HypervisorHost) GetNetworksInfo() []string {
	return s.NetworksInfo
}

// GetParentInfo returns the value of ParentInfo.
func (s *HypervisorHost) GetParentInfo() OptHypervisorHostParentInfo {
	return s.ParentInfo
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorHost) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetServices returns the value of Services.
func (s *HypervisorHost) GetServices() Services {
	return s.Services
}

// GetState returns the value of State.
func (s *HypervisorHost) GetState() OptHypervisorHostState {
	return s.State
}

// GetStateReason returns the value of StateReason.
func (s *HypervisorHost) GetStateReason() OptString {
	return s.StateReason
}

// GetStatus returns the value of Status.
func (s *HypervisorHost) GetStatus() OptHypervisorHostStatus {
	return s.Status
}

// GetStorageAdaptersInfo returns the value of StorageAdaptersInfo.
func (s *HypervisorHost) GetStorageAdaptersInfo() []HypervisorHostStorageAdaptersInfoItem {
	return s.StorageAdaptersInfo
}

// GetType returns the value of Type.
func (s *HypervisorHost) GetType() Type {
	return s.Type
}

// GetUID returns the value of UID.
func (s *HypervisorHost) GetUID() OptString {
	return s.UID
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *HypervisorHost) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetVersion returns the value of Version.
func (s *HypervisorHost) GetVersion() OptString {
	return s.Version
}

// SetAppInfo sets the value of AppInfo.
func (s *HypervisorHost) SetAppInfo(val OptHypervisorHostAppInfo) {
	s.AppInfo = val
}

// SetCpuInfo sets the value of CpuInfo.
func (s *HypervisorHost) SetCpuInfo(val OptCpuInfo) {
	s.CpuInfo = val
}

// SetCpuSockets sets the value of CpuSockets.
func (s *HypervisorHost) SetCpuSockets(val []CpuSocket) {
	s.CpuSockets = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *HypervisorHost) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCustomerId sets the value of CustomerId.
func (s *HypervisorHost) SetCustomerId(val OptString) {
	s.CustomerId = val
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorHost) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetGeneration sets the value of Generation.
func (s *HypervisorHost) SetGeneration(val Generation) {
	s.Generation = val
}

// SetHciClusterUuid sets the value of HciClusterUuid.
func (s *HypervisorHost) SetHciClusterUuid(val OptString) {
	s.HciClusterUuid = val
}

// SetHciServerUuid sets the value of HciServerUuid.
func (s *HypervisorHost) SetHciServerUuid(val OptString) {
	s.HciServerUuid = val
}

// SetHostNetworkSystem sets the value of HostNetworkSystem.
func (s *HypervisorHost) SetHostNetworkSystem(val OptHostNetworkSystem) {
	s.HostNetworkSystem = val
}

// SetHostPerfMetricInfo sets the value of HostPerfMetricInfo.
func (s *HypervisorHost) SetHostPerfMetricInfo(val OptHypervisorHostHostPerfMetricInfo) {
	s.HostPerfMetricInfo = val
}

// SetHostType sets the value of HostType.
func (s *HypervisorHost) SetHostType(val OptHypervisorHostHostType) {
	s.HostType = val
}

// SetHypervisorManagerInfo sets the value of HypervisorManagerInfo.
func (s *HypervisorHost) SetHypervisorManagerInfo(val OptHypervisorHostHypervisorManagerInfo) {
	s.HypervisorManagerInfo = val
}

// SetID sets the value of ID.
func (s *HypervisorHost) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorHost) SetName(val OptString) {
	s.Name = val
}

// SetNetworkAddress sets the value of NetworkAddress.
func (s *HypervisorHost) SetNetworkAddress(val OptString) {
	s.NetworkAddress = val
}

// SetNetworksInfo sets the value of NetworksInfo.
func (s *HypervisorHost) SetNetworksInfo(val []string) {
	s.NetworksInfo = val
}

// SetParentInfo sets the value of ParentInfo.
func (s *HypervisorHost) SetParentInfo(val OptHypervisorHostParentInfo) {
	s.ParentInfo = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorHost) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetServices sets the value of Services.
func (s *HypervisorHost) SetServices(val Services) {
	s.Services = val
}

// SetState sets the value of State.
func (s *HypervisorHost) SetState(val OptHypervisorHostState) {
	s.State = val
}

// SetStateReason sets the value of StateReason.
func (s *HypervisorHost) SetStateReason(val OptString) {
	s.StateReason = val
}

// SetStatus sets the value of Status.
func (s *HypervisorHost) SetStatus(val OptHypervisorHostStatus) {
	s.Status = val
}

// SetStorageAdaptersInfo sets the value of StorageAdaptersInfo.
func (s *HypervisorHost) SetStorageAdaptersInfo(val []HypervisorHostStorageAdaptersInfoItem) {
	s.StorageAdaptersInfo = val
}

// SetType sets the value of Type.
func (s *HypervisorHost) SetType(val Type) {
	s.Type = val
}

// SetUID sets the value of UID.
func (s *HypervisorHost) SetUID(val OptString) {
	s.UID = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *HypervisorHost) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetVersion sets the value of Version.
func (s *HypervisorHost) SetVersion(val OptString) {
	s.Version = val
}

func (*HypervisorHost) hypervisorHostRes() {}

// Application specific information for this host.
type HypervisorHostAppInfo struct {
	Vmware OptHypervisorHostAppInfoVmware `json:"vmware"`
}

// GetVmware returns the value of Vmware.
func (s *HypervisorHostAppInfo) GetVmware() OptHypervisorHostAppInfoVmware {
	return s.Vmware
}

// SetVmware sets the value of Vmware.
func (s *HypervisorHostAppInfo) SetVmware(val OptHypervisorHostAppInfoVmware) {
	s.Vmware = val
}

type HypervisorHostAppInfoVmware struct {
	DatacenterInfo OptDatacenterInfo `json:"datacenterInfo"`
	// VMware provided moref for this host.
	Moref OptString `json:"moref"`
}

// GetDatacenterInfo returns the value of DatacenterInfo.
func (s *HypervisorHostAppInfoVmware) GetDatacenterInfo() OptDatacenterInfo {
	return s.DatacenterInfo
}

// GetMoref returns the value of Moref.
func (s *HypervisorHostAppInfoVmware) GetMoref() OptString {
	return s.Moref
}

// SetDatacenterInfo sets the value of DatacenterInfo.
func (s *HypervisorHostAppInfoVmware) SetDatacenterInfo(val OptDatacenterInfo) {
	s.DatacenterInfo = val
}

// SetMoref sets the value of Moref.
func (s *HypervisorHostAppInfoVmware) SetMoref(val OptString) {
	s.Moref = val
}

type HypervisorHostForbidden ErrorResponse

func (*HypervisorHostForbidden) hypervisorHostRes() {}

// Hypervisor host performance metrics.
type HypervisorHostHostPerfMetricInfo struct {
	// CPU allocated in hertz.
	CpuCapacityInHz OptInt64 `json:"cpuCapacityInHz"`
	// CPU used in mega hertz.
	CpuUsageInMhz OptInt64 `json:"cpuUsageInMhz"`
	// Memory allocated in bytes.
	MemorySizeInBytes OptInt64 `json:"memorySizeInBytes"`
	// Memory used in mega bytes.
	MemoryUsageInMb OptInt64 `json:"memoryUsageInMb"`
	// Storage allocated in bytes.
	TotalStorageInBytes OptInt64 `json:"totalStorageInBytes"`
	// Storage used in bytes.
	UsedStorageInBytes OptInt64 `json:"usedStorageInBytes"`
}

// GetCpuCapacityInHz returns the value of CpuCapacityInHz.
func (s *HypervisorHostHostPerfMetricInfo) GetCpuCapacityInHz() OptInt64 {
	return s.CpuCapacityInHz
}

// GetCpuUsageInMhz returns the value of CpuUsageInMhz.
func (s *HypervisorHostHostPerfMetricInfo) GetCpuUsageInMhz() OptInt64 {
	return s.CpuUsageInMhz
}

// GetMemorySizeInBytes returns the value of MemorySizeInBytes.
func (s *HypervisorHostHostPerfMetricInfo) GetMemorySizeInBytes() OptInt64 {
	return s.MemorySizeInBytes
}

// GetMemoryUsageInMb returns the value of MemoryUsageInMb.
func (s *HypervisorHostHostPerfMetricInfo) GetMemoryUsageInMb() OptInt64 {
	return s.MemoryUsageInMb
}

// GetTotalStorageInBytes returns the value of TotalStorageInBytes.
func (s *HypervisorHostHostPerfMetricInfo) GetTotalStorageInBytes() OptInt64 {
	return s.TotalStorageInBytes
}

// GetUsedStorageInBytes returns the value of UsedStorageInBytes.
func (s *HypervisorHostHostPerfMetricInfo) GetUsedStorageInBytes() OptInt64 {
	return s.UsedStorageInBytes
}

// SetCpuCapacityInHz sets the value of CpuCapacityInHz.
func (s *HypervisorHostHostPerfMetricInfo) SetCpuCapacityInHz(val OptInt64) {
	s.CpuCapacityInHz = val
}

// SetCpuUsageInMhz sets the value of CpuUsageInMhz.
func (s *HypervisorHostHostPerfMetricInfo) SetCpuUsageInMhz(val OptInt64) {
	s.CpuUsageInMhz = val
}

// SetMemorySizeInBytes sets the value of MemorySizeInBytes.
func (s *HypervisorHostHostPerfMetricInfo) SetMemorySizeInBytes(val OptInt64) {
	s.MemorySizeInBytes = val
}

// SetMemoryUsageInMb sets the value of MemoryUsageInMb.
func (s *HypervisorHostHostPerfMetricInfo) SetMemoryUsageInMb(val OptInt64) {
	s.MemoryUsageInMb = val
}

// SetTotalStorageInBytes sets the value of TotalStorageInBytes.
func (s *HypervisorHostHostPerfMetricInfo) SetTotalStorageInBytes(val OptInt64) {
	s.TotalStorageInBytes = val
}

// SetUsedStorageInBytes sets the value of UsedStorageInBytes.
func (s *HypervisorHostHostPerfMetricInfo) SetUsedStorageInBytes(val OptInt64) {
	s.UsedStorageInBytes = val
}

// The type of the hypervisor host.
type HypervisorHostHostType string

const (
	HypervisorHostHostTypeESXI HypervisorHostHostType = "ESXI"
)

// AllValues returns all HypervisorHostHostType values.
func (HypervisorHostHostType) AllValues() []HypervisorHostHostType {
	return []HypervisorHostHostType{
		HypervisorHostHostTypeESXI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorHostHostType) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorHostHostTypeESXI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorHostHostType) UnmarshalText(data []byte) error {
	switch HypervisorHostHostType(data) {
	case HypervisorHostHostTypeESXI:
		*s = HypervisorHostHostTypeESXI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HypervisorHostHypervisorManagerInfo struct {
	DisplayName OptDisplayName `json:"displayName"`
	ID          OptID          `json:"id"`
	Name        OptName        `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorHostHypervisorManagerInfo) GetDisplayName() OptDisplayName {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *HypervisorHostHypervisorManagerInfo) GetID() OptID {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorHostHypervisorManagerInfo) GetName() OptName {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorHostHypervisorManagerInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *HypervisorHostHypervisorManagerInfo) GetType() OptType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorHostHypervisorManagerInfo) SetDisplayName(val OptDisplayName) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *HypervisorHostHypervisorManagerInfo) SetID(val OptID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorHostHypervisorManagerInfo) SetName(val OptName) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorHostHypervisorManagerInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *HypervisorHostHypervisorManagerInfo) SetType(val OptType) {
	s.Type = val
}

type HypervisorHostInternalServerError ErrorResponse

func (*HypervisorHostInternalServerError) hypervisorHostRes() {}

type HypervisorHostNotFound ErrorResponse

func (*HypervisorHostNotFound) hypervisorHostRes() {}

// Parent of this host. It could be a cluster or folder in case of a VMware ESXi Host. For a Hyper-V
// host it will be cluster or host group.
type HypervisorHostParentInfo struct {
	// A user-friendly name that identifies the parent of this host.
	DisplayName OptString `json:"displayName"`
	// UUID uniquely identifying the parent of this host.
	ID OptUUID `json:"id"`
	// Name of the parent of this host.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of the parent.
	Type OptHypervisorHostParentInfoType `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *HypervisorHostParentInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *HypervisorHostParentInfo) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *HypervisorHostParentInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *HypervisorHostParentInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *HypervisorHostParentInfo) GetType() OptHypervisorHostParentInfoType {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *HypervisorHostParentInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *HypervisorHostParentInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *HypervisorHostParentInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *HypervisorHostParentInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *HypervisorHostParentInfo) SetType(val OptHypervisorHostParentInfoType) {
	s.Type = val
}

// The type of the parent.
type HypervisorHostParentInfoType string

const (
	HypervisorHostParentInfoTypeCLUSTER HypervisorHostParentInfoType = "CLUSTER"
	HypervisorHostParentInfoTypeFOLDER  HypervisorHostParentInfoType = "FOLDER"
)

// AllValues returns all HypervisorHostParentInfoType values.
func (HypervisorHostParentInfoType) AllValues() []HypervisorHostParentInfoType {
	return []HypervisorHostParentInfoType{
		HypervisorHostParentInfoTypeCLUSTER,
		HypervisorHostParentInfoTypeFOLDER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorHostParentInfoType) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorHostParentInfoTypeCLUSTER:
		return []byte(s), nil
	case HypervisorHostParentInfoTypeFOLDER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorHostParentInfoType) UnmarshalText(data []byte) error {
	switch HypervisorHostParentInfoType(data) {
	case HypervisorHostParentInfoTypeCLUSTER:
		*s = HypervisorHostParentInfoTypeCLUSTER
		return nil
	case HypervisorHostParentInfoTypeFOLDER:
		*s = HypervisorHostParentInfoTypeFOLDER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current state of the hypervisor host object.
type HypervisorHostState string

const (
	HypervisorHostStateOK         HypervisorHostState = "OK"
	HypervisorHostStateERROR      HypervisorHostState = "ERROR"
	HypervisorHostStateREFRESHING HypervisorHostState = "REFRESHING"
)

// AllValues returns all HypervisorHostState values.
func (HypervisorHostState) AllValues() []HypervisorHostState {
	return []HypervisorHostState{
		HypervisorHostStateOK,
		HypervisorHostStateERROR,
		HypervisorHostStateREFRESHING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorHostState) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorHostStateOK:
		return []byte(s), nil
	case HypervisorHostStateERROR:
		return []byte(s), nil
	case HypervisorHostStateREFRESHING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorHostState) UnmarshalText(data []byte) error {
	switch HypervisorHostState(data) {
	case HypervisorHostStateOK:
		*s = HypervisorHostStateOK
		return nil
	case HypervisorHostStateERROR:
		*s = HypervisorHostStateERROR
		return nil
	case HypervisorHostStateREFRESHING:
		*s = HypervisorHostStateREFRESHING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the hypervisor host. Status is derived and abstracted to a 'standard status'
// based on the status reported by the hypervisor manager.
type HypervisorHostStatus string

const (
	HypervisorHostStatusOK      HypervisorHostStatus = "OK"
	HypervisorHostStatusERROR   HypervisorHostStatus = "ERROR"
	HypervisorHostStatusWARNING HypervisorHostStatus = "WARNING"
)

// AllValues returns all HypervisorHostStatus values.
func (HypervisorHostStatus) AllValues() []HypervisorHostStatus {
	return []HypervisorHostStatus{
		HypervisorHostStatusOK,
		HypervisorHostStatusERROR,
		HypervisorHostStatusWARNING,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorHostStatus) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorHostStatusOK:
		return []byte(s), nil
	case HypervisorHostStatusERROR:
		return []byte(s), nil
	case HypervisorHostStatusWARNING:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorHostStatus) UnmarshalText(data []byte) error {
	switch HypervisorHostStatus(data) {
	case HypervisorHostStatusOK:
		*s = HypervisorHostStatusOK
		return nil
	case HypervisorHostStatusERROR:
		*s = HypervisorHostStatusERROR
		return nil
	case HypervisorHostStatusWARNING:
		*s = HypervisorHostStatusWARNING
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HypervisorHostStorageAdaptersInfoItem struct {
	// Model of the adapter.
	Model OptString `json:"model"`
	// Name of the adapter.
	Name OptString `json:"name"`
	// Status of the adapter.
	Status OptHypervisorHostStorageAdaptersInfoItemStatus `json:"status"`
	// Type of the adapter.
	Type OptString `json:"type"`
	// WWN of the adapter.
	Wwn OptString `json:"wwn"`
}

// GetModel returns the value of Model.
func (s *HypervisorHostStorageAdaptersInfoItem) GetModel() OptString {
	return s.Model
}

// GetName returns the value of Name.
func (s *HypervisorHostStorageAdaptersInfoItem) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *HypervisorHostStorageAdaptersInfoItem) GetStatus() OptHypervisorHostStorageAdaptersInfoItemStatus {
	return s.Status
}

// GetType returns the value of Type.
func (s *HypervisorHostStorageAdaptersInfoItem) GetType() OptString {
	return s.Type
}

// GetWwn returns the value of Wwn.
func (s *HypervisorHostStorageAdaptersInfoItem) GetWwn() OptString {
	return s.Wwn
}

// SetModel sets the value of Model.
func (s *HypervisorHostStorageAdaptersInfoItem) SetModel(val OptString) {
	s.Model = val
}

// SetName sets the value of Name.
func (s *HypervisorHostStorageAdaptersInfoItem) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *HypervisorHostStorageAdaptersInfoItem) SetStatus(val OptHypervisorHostStorageAdaptersInfoItemStatus) {
	s.Status = val
}

// SetType sets the value of Type.
func (s *HypervisorHostStorageAdaptersInfoItem) SetType(val OptString) {
	s.Type = val
}

// SetWwn sets the value of Wwn.
func (s *HypervisorHostStorageAdaptersInfoItem) SetWwn(val OptString) {
	s.Wwn = val
}

// Status of the adapter.
type HypervisorHostStorageAdaptersInfoItemStatus string

const (
	HypervisorHostStorageAdaptersInfoItemStatusOFFLINE HypervisorHostStorageAdaptersInfoItemStatus = "OFFLINE"
	HypervisorHostStorageAdaptersInfoItemStatusONLINE  HypervisorHostStorageAdaptersInfoItemStatus = "ONLINE"
	HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN HypervisorHostStorageAdaptersInfoItemStatus = "UNKNOWN"
)

// AllValues returns all HypervisorHostStorageAdaptersInfoItemStatus values.
func (HypervisorHostStorageAdaptersInfoItemStatus) AllValues() []HypervisorHostStorageAdaptersInfoItemStatus {
	return []HypervisorHostStorageAdaptersInfoItemStatus{
		HypervisorHostStorageAdaptersInfoItemStatusOFFLINE,
		HypervisorHostStorageAdaptersInfoItemStatusONLINE,
		HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HypervisorHostStorageAdaptersInfoItemStatus) MarshalText() ([]byte, error) {
	switch s {
	case HypervisorHostStorageAdaptersInfoItemStatusOFFLINE:
		return []byte(s), nil
	case HypervisorHostStorageAdaptersInfoItemStatusONLINE:
		return []byte(s), nil
	case HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HypervisorHostStorageAdaptersInfoItemStatus) UnmarshalText(data []byte) error {
	switch HypervisorHostStorageAdaptersInfoItemStatus(data) {
	case HypervisorHostStorageAdaptersInfoItemStatusOFFLINE:
		*s = HypervisorHostStorageAdaptersInfoItemStatusOFFLINE
		return nil
	case HypervisorHostStorageAdaptersInfoItemStatusONLINE:
		*s = HypervisorHostStorageAdaptersInfoItemStatusONLINE
		return nil
	case HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN:
		*s = HypervisorHostStorageAdaptersInfoItemStatusUNKNOWN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HypervisorHostUnauthorized ErrorResponse

func (*HypervisorHostUnauthorized) hypervisorHostRes() {}

type ID string

type Name string

// The network adapter teaming policy information.
// Ref: #/components/schemas/NicTeamingPolicy
type NicTeamingPolicy struct {
	// List of active network adapter information.
	ActiveNics []NicTeamingPolicyActiveNicsItem `json:"activeNics"`
	// Flag to specify whether or not to notify the switch if a link fails.
	NotifySwitches OptBool `json:"notifySwitches"`
	// Name of the network adapter teaming policy.
	PolicyName OptString `json:"policyName"`
	// Flag to specify whether or not to use a rolling policy when restoring links.
	RollingOrder OptBool `json:"rollingOrder"`
	// Flag to specify whether or not to use beacon probing.
	UseBeaconProbing OptBool `json:"useBeaconProbing"`
}

// GetActiveNics returns the value of ActiveNics.
func (s *NicTeamingPolicy) GetActiveNics() []NicTeamingPolicyActiveNicsItem {
	return s.ActiveNics
}

// GetNotifySwitches returns the value of NotifySwitches.
func (s *NicTeamingPolicy) GetNotifySwitches() OptBool {
	return s.NotifySwitches
}

// GetPolicyName returns the value of PolicyName.
func (s *NicTeamingPolicy) GetPolicyName() OptString {
	return s.PolicyName
}

// GetRollingOrder returns the value of RollingOrder.
func (s *NicTeamingPolicy) GetRollingOrder() OptBool {
	return s.RollingOrder
}

// GetUseBeaconProbing returns the value of UseBeaconProbing.
func (s *NicTeamingPolicy) GetUseBeaconProbing() OptBool {
	return s.UseBeaconProbing
}

// SetActiveNics sets the value of ActiveNics.
func (s *NicTeamingPolicy) SetActiveNics(val []NicTeamingPolicyActiveNicsItem) {
	s.ActiveNics = val
}

// SetNotifySwitches sets the value of NotifySwitches.
func (s *NicTeamingPolicy) SetNotifySwitches(val OptBool) {
	s.NotifySwitches = val
}

// SetPolicyName sets the value of PolicyName.
func (s *NicTeamingPolicy) SetPolicyName(val OptString) {
	s.PolicyName = val
}

// SetRollingOrder sets the value of RollingOrder.
func (s *NicTeamingPolicy) SetRollingOrder(val OptBool) {
	s.RollingOrder = val
}

// SetUseBeaconProbing sets the value of UseBeaconProbing.
func (s *NicTeamingPolicy) SetUseBeaconProbing(val OptBool) {
	s.UseBeaconProbing = val
}

// Active network adapter information.
type NicTeamingPolicyActiveNicsItem struct {
	// Device name of the network adapter.
	Device OptString `json:"device"`
}

// GetDevice returns the value of Device.
func (s *NicTeamingPolicyActiveNicsItem) GetDevice() OptString {
	return s.Device
}

// SetDevice sets the value of Device.
func (s *NicTeamingPolicyActiveNicsItem) SetDevice(val OptString) {
	s.Device = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCpuInfo returns new OptCpuInfo with value set to v.
func NewOptCpuInfo(v CpuInfo) OptCpuInfo {
	return OptCpuInfo{
		Value: v,
		Set:   true,
	}
}

// OptCpuInfo is optional CpuInfo.
type OptCpuInfo struct {
	Value CpuInfo
	Set   bool
}

// IsSet returns true if OptCpuInfo was set.
func (o OptCpuInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCpuInfo) Reset() {
	var v CpuInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCpuInfo) SetTo(v CpuInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCpuInfo) Get() (v CpuInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCpuInfo) Or(d CpuInfo) CpuInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataManagementJobInfo returns new OptDataManagementJobInfo with value set to v.
func NewOptDataManagementJobInfo(v DataManagementJobInfo) OptDataManagementJobInfo {
	return OptDataManagementJobInfo{
		Value: v,
		Set:   true,
	}
}

// OptDataManagementJobInfo is optional DataManagementJobInfo.
type OptDataManagementJobInfo struct {
	Value DataManagementJobInfo
	Set   bool
}

// IsSet returns true if OptDataManagementJobInfo was set.
func (o OptDataManagementJobInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataManagementJobInfo) Reset() {
	var v DataManagementJobInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataManagementJobInfo) SetTo(v DataManagementJobInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataManagementJobInfo) Get() (v DataManagementJobInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataManagementJobInfo) Or(d DataManagementJobInfo) DataManagementJobInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataManagementTemplateInfo returns new OptDataManagementTemplateInfo with value set to v.
func NewOptDataManagementTemplateInfo(v DataManagementTemplateInfo) OptDataManagementTemplateInfo {
	return OptDataManagementTemplateInfo{
		Value: v,
		Set:   true,
	}
}

// OptDataManagementTemplateInfo is optional DataManagementTemplateInfo.
type OptDataManagementTemplateInfo struct {
	Value DataManagementTemplateInfo
	Set   bool
}

// IsSet returns true if OptDataManagementTemplateInfo was set.
func (o OptDataManagementTemplateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataManagementTemplateInfo) Reset() {
	var v DataManagementTemplateInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataManagementTemplateInfo) SetTo(v DataManagementTemplateInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataManagementTemplateInfo) Get() (v DataManagementTemplateInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataManagementTemplateInfo) Or(d DataManagementTemplateInfo) DataManagementTemplateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatacenterInfo returns new OptDatacenterInfo with value set to v.
func NewOptDatacenterInfo(v DatacenterInfo) OptDatacenterInfo {
	return OptDatacenterInfo{
		Value: v,
		Set:   true,
	}
}

// OptDatacenterInfo is optional DatacenterInfo.
type OptDatacenterInfo struct {
	Value DatacenterInfo
	Set   bool
}

// IsSet returns true if OptDatacenterInfo was set.
func (o OptDatacenterInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatacenterInfo) Reset() {
	var v DatacenterInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatacenterInfo) SetTo(v DatacenterInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatacenterInfo) Get() (v DatacenterInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatacenterInfo) Or(d DatacenterInfo) DatacenterInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreAppType returns new OptDatastoreAppType with value set to v.
func NewOptDatastoreAppType(v DatastoreAppType) OptDatastoreAppType {
	return OptDatastoreAppType{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreAppType is optional DatastoreAppType.
type OptDatastoreAppType struct {
	Value DatastoreAppType
	Set   bool
}

// IsSet returns true if OptDatastoreAppType was set.
func (o OptDatastoreAppType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreAppType) Reset() {
	var v DatastoreAppType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreAppType) SetTo(v DatastoreAppType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreAppType) Get() (v DatastoreAppType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreAppType) Or(d DatastoreAppType) DatastoreAppType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreClusterInfo returns new OptDatastoreClusterInfo with value set to v.
func NewOptDatastoreClusterInfo(v DatastoreClusterInfo) OptDatastoreClusterInfo {
	return OptDatastoreClusterInfo{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreClusterInfo is optional DatastoreClusterInfo.
type OptDatastoreClusterInfo struct {
	Value DatastoreClusterInfo
	Set   bool
}

// IsSet returns true if OptDatastoreClusterInfo was set.
func (o OptDatastoreClusterInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreClusterInfo) Reset() {
	var v DatastoreClusterInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreClusterInfo) SetTo(v DatastoreClusterInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreClusterInfo) Get() (v DatastoreClusterInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreClusterInfo) Or(d DatastoreClusterInfo) DatastoreClusterInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreDatastoreClassification returns new OptDatastoreDatastoreClassification with value set to v.
func NewOptDatastoreDatastoreClassification(v DatastoreDatastoreClassification) OptDatastoreDatastoreClassification {
	return OptDatastoreDatastoreClassification{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreDatastoreClassification is optional DatastoreDatastoreClassification.
type OptDatastoreDatastoreClassification struct {
	Value DatastoreDatastoreClassification
	Set   bool
}

// IsSet returns true if OptDatastoreDatastoreClassification was set.
func (o OptDatastoreDatastoreClassification) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreDatastoreClassification) Reset() {
	var v DatastoreDatastoreClassification
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreDatastoreClassification) SetTo(v DatastoreDatastoreClassification) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreDatastoreClassification) Get() (v DatastoreDatastoreClassification, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreDatastoreClassification) Or(d DatastoreDatastoreClassification) DatastoreDatastoreClassification {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreDatastoreType returns new OptDatastoreDatastoreType with value set to v.
func NewOptDatastoreDatastoreType(v DatastoreDatastoreType) OptDatastoreDatastoreType {
	return OptDatastoreDatastoreType{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreDatastoreType is optional DatastoreDatastoreType.
type OptDatastoreDatastoreType struct {
	Value DatastoreDatastoreType
	Set   bool
}

// IsSet returns true if OptDatastoreDatastoreType was set.
func (o OptDatastoreDatastoreType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreDatastoreType) Reset() {
	var v DatastoreDatastoreType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreDatastoreType) SetTo(v DatastoreDatastoreType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreDatastoreType) Get() (v DatastoreDatastoreType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreDatastoreType) Or(d DatastoreDatastoreType) DatastoreDatastoreType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreFolderInfo returns new OptDatastoreFolderInfo with value set to v.
func NewOptDatastoreFolderInfo(v DatastoreFolderInfo) OptDatastoreFolderInfo {
	return OptDatastoreFolderInfo{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreFolderInfo is optional DatastoreFolderInfo.
type OptDatastoreFolderInfo struct {
	Value DatastoreFolderInfo
	Set   bool
}

// IsSet returns true if OptDatastoreFolderInfo was set.
func (o OptDatastoreFolderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreFolderInfo) Reset() {
	var v DatastoreFolderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreFolderInfo) SetTo(v DatastoreFolderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreFolderInfo) Get() (v DatastoreFolderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreFolderInfo) Or(d DatastoreFolderInfo) DatastoreFolderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreHypervisorManagerInfo returns new OptDatastoreHypervisorManagerInfo with value set to v.
func NewOptDatastoreHypervisorManagerInfo(v DatastoreHypervisorManagerInfo) OptDatastoreHypervisorManagerInfo {
	return OptDatastoreHypervisorManagerInfo{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreHypervisorManagerInfo is optional DatastoreHypervisorManagerInfo.
type OptDatastoreHypervisorManagerInfo struct {
	Value DatastoreHypervisorManagerInfo
	Set   bool
}

// IsSet returns true if OptDatastoreHypervisorManagerInfo was set.
func (o OptDatastoreHypervisorManagerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreHypervisorManagerInfo) Reset() {
	var v DatastoreHypervisorManagerInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreHypervisorManagerInfo) SetTo(v DatastoreHypervisorManagerInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreHypervisorManagerInfo) Get() (v DatastoreHypervisorManagerInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreHypervisorManagerInfo) Or(d DatastoreHypervisorManagerInfo) DatastoreHypervisorManagerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreState returns new OptDatastoreState with value set to v.
func NewOptDatastoreState(v DatastoreState) OptDatastoreState {
	return OptDatastoreState{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreState is optional DatastoreState.
type OptDatastoreState struct {
	Value DatastoreState
	Set   bool
}

// IsSet returns true if OptDatastoreState was set.
func (o OptDatastoreState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreState) Reset() {
	var v DatastoreState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreState) SetTo(v DatastoreState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreState) Get() (v DatastoreState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreState) Or(d DatastoreState) DatastoreState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatastoreStatus returns new OptDatastoreStatus with value set to v.
func NewOptDatastoreStatus(v DatastoreStatus) OptDatastoreStatus {
	return OptDatastoreStatus{
		Value: v,
		Set:   true,
	}
}

// OptDatastoreStatus is optional DatastoreStatus.
type OptDatastoreStatus struct {
	Value DatastoreStatus
	Set   bool
}

// IsSet returns true if OptDatastoreStatus was set.
func (o OptDatastoreStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatastoreStatus) Reset() {
	var v DatastoreStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatastoreStatus) SetTo(v DatastoreStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatastoreStatus) Get() (v DatastoreStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatastoreStatus) Or(d DatastoreStatus) DatastoreStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDisplayName returns new OptDisplayName with value set to v.
func NewOptDisplayName(v DisplayName) OptDisplayName {
	return OptDisplayName{
		Value: v,
		Set:   true,
	}
}

// OptDisplayName is optional DisplayName.
type OptDisplayName struct {
	Value DisplayName
	Set   bool
}

// IsSet returns true if OptDisplayName was set.
func (o OptDisplayName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDisplayName) Reset() {
	var v DisplayName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDisplayName) SetTo(v DisplayName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDisplayName) Get() (v DisplayName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDisplayName) Or(d DisplayName) DisplayName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostNetworkSystem returns new OptHostNetworkSystem with value set to v.
func NewOptHostNetworkSystem(v HostNetworkSystem) OptHostNetworkSystem {
	return OptHostNetworkSystem{
		Value: v,
		Set:   true,
	}
}

// OptHostNetworkSystem is optional HostNetworkSystem.
type OptHostNetworkSystem struct {
	Value HostNetworkSystem
	Set   bool
}

// IsSet returns true if OptHostNetworkSystem was set.
func (o OptHostNetworkSystem) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostNetworkSystem) Reset() {
	var v HostNetworkSystem
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostNetworkSystem) SetTo(v HostNetworkSystem) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostNetworkSystem) Get() (v HostNetworkSystem, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostNetworkSystem) Or(d HostNetworkSystem) HostNetworkSystem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterAppInfo returns new OptHypervisorClusterAppInfo with value set to v.
func NewOptHypervisorClusterAppInfo(v HypervisorClusterAppInfo) OptHypervisorClusterAppInfo {
	return OptHypervisorClusterAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterAppInfo is optional HypervisorClusterAppInfo.
type OptHypervisorClusterAppInfo struct {
	Value HypervisorClusterAppInfo
	Set   bool
}

// IsSet returns true if OptHypervisorClusterAppInfo was set.
func (o OptHypervisorClusterAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterAppInfo) Reset() {
	var v HypervisorClusterAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterAppInfo) SetTo(v HypervisorClusterAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterAppInfo) Get() (v HypervisorClusterAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterAppInfo) Or(d HypervisorClusterAppInfo) HypervisorClusterAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterAppInfoVmware returns new OptHypervisorClusterAppInfoVmware with value set to v.
func NewOptHypervisorClusterAppInfoVmware(v HypervisorClusterAppInfoVmware) OptHypervisorClusterAppInfoVmware {
	return OptHypervisorClusterAppInfoVmware{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterAppInfoVmware is optional HypervisorClusterAppInfoVmware.
type OptHypervisorClusterAppInfoVmware struct {
	Value HypervisorClusterAppInfoVmware
	Set   bool
}

// IsSet returns true if OptHypervisorClusterAppInfoVmware was set.
func (o OptHypervisorClusterAppInfoVmware) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterAppInfoVmware) Reset() {
	var v HypervisorClusterAppInfoVmware
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterAppInfoVmware) SetTo(v HypervisorClusterAppInfoVmware) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterAppInfoVmware) Get() (v HypervisorClusterAppInfoVmware, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterAppInfoVmware) Or(d HypervisorClusterAppInfoVmware) HypervisorClusterAppInfoVmware {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterClusterPerfMetricInfo returns new OptHypervisorClusterClusterPerfMetricInfo with value set to v.
func NewOptHypervisorClusterClusterPerfMetricInfo(v HypervisorClusterClusterPerfMetricInfo) OptHypervisorClusterClusterPerfMetricInfo {
	return OptHypervisorClusterClusterPerfMetricInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterClusterPerfMetricInfo is optional HypervisorClusterClusterPerfMetricInfo.
type OptHypervisorClusterClusterPerfMetricInfo struct {
	Value HypervisorClusterClusterPerfMetricInfo
	Set   bool
}

// IsSet returns true if OptHypervisorClusterClusterPerfMetricInfo was set.
func (o OptHypervisorClusterClusterPerfMetricInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterClusterPerfMetricInfo) Reset() {
	var v HypervisorClusterClusterPerfMetricInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterClusterPerfMetricInfo) SetTo(v HypervisorClusterClusterPerfMetricInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterClusterPerfMetricInfo) Get() (v HypervisorClusterClusterPerfMetricInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterClusterPerfMetricInfo) Or(d HypervisorClusterClusterPerfMetricInfo) HypervisorClusterClusterPerfMetricInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterClusterType returns new OptHypervisorClusterClusterType with value set to v.
func NewOptHypervisorClusterClusterType(v HypervisorClusterClusterType) OptHypervisorClusterClusterType {
	return OptHypervisorClusterClusterType{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterClusterType is optional HypervisorClusterClusterType.
type OptHypervisorClusterClusterType struct {
	Value HypervisorClusterClusterType
	Set   bool
}

// IsSet returns true if OptHypervisorClusterClusterType was set.
func (o OptHypervisorClusterClusterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterClusterType) Reset() {
	var v HypervisorClusterClusterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterClusterType) SetTo(v HypervisorClusterClusterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterClusterType) Get() (v HypervisorClusterClusterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterClusterType) Or(d HypervisorClusterClusterType) HypervisorClusterClusterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterHypervisorManagerInfo returns new OptHypervisorClusterHypervisorManagerInfo with value set to v.
func NewOptHypervisorClusterHypervisorManagerInfo(v HypervisorClusterHypervisorManagerInfo) OptHypervisorClusterHypervisorManagerInfo {
	return OptHypervisorClusterHypervisorManagerInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterHypervisorManagerInfo is optional HypervisorClusterHypervisorManagerInfo.
type OptHypervisorClusterHypervisorManagerInfo struct {
	Value HypervisorClusterHypervisorManagerInfo
	Set   bool
}

// IsSet returns true if OptHypervisorClusterHypervisorManagerInfo was set.
func (o OptHypervisorClusterHypervisorManagerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterHypervisorManagerInfo) Reset() {
	var v HypervisorClusterHypervisorManagerInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterHypervisorManagerInfo) SetTo(v HypervisorClusterHypervisorManagerInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterHypervisorManagerInfo) Get() (v HypervisorClusterHypervisorManagerInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterHypervisorManagerInfo) Or(d HypervisorClusterHypervisorManagerInfo) HypervisorClusterHypervisorManagerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterState returns new OptHypervisorClusterState with value set to v.
func NewOptHypervisorClusterState(v HypervisorClusterState) OptHypervisorClusterState {
	return OptHypervisorClusterState{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterState is optional HypervisorClusterState.
type OptHypervisorClusterState struct {
	Value HypervisorClusterState
	Set   bool
}

// IsSet returns true if OptHypervisorClusterState was set.
func (o OptHypervisorClusterState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterState) Reset() {
	var v HypervisorClusterState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterState) SetTo(v HypervisorClusterState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterState) Get() (v HypervisorClusterState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterState) Or(d HypervisorClusterState) HypervisorClusterState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorClusterStatus returns new OptHypervisorClusterStatus with value set to v.
func NewOptHypervisorClusterStatus(v HypervisorClusterStatus) OptHypervisorClusterStatus {
	return OptHypervisorClusterStatus{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorClusterStatus is optional HypervisorClusterStatus.
type OptHypervisorClusterStatus struct {
	Value HypervisorClusterStatus
	Set   bool
}

// IsSet returns true if OptHypervisorClusterStatus was set.
func (o OptHypervisorClusterStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorClusterStatus) Reset() {
	var v HypervisorClusterStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorClusterStatus) SetTo(v HypervisorClusterStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorClusterStatus) Get() (v HypervisorClusterStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorClusterStatus) Or(d HypervisorClusterStatus) HypervisorClusterStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostAppInfo returns new OptHypervisorHostAppInfo with value set to v.
func NewOptHypervisorHostAppInfo(v HypervisorHostAppInfo) OptHypervisorHostAppInfo {
	return OptHypervisorHostAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostAppInfo is optional HypervisorHostAppInfo.
type OptHypervisorHostAppInfo struct {
	Value HypervisorHostAppInfo
	Set   bool
}

// IsSet returns true if OptHypervisorHostAppInfo was set.
func (o OptHypervisorHostAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostAppInfo) Reset() {
	var v HypervisorHostAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostAppInfo) SetTo(v HypervisorHostAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostAppInfo) Get() (v HypervisorHostAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostAppInfo) Or(d HypervisorHostAppInfo) HypervisorHostAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostAppInfoVmware returns new OptHypervisorHostAppInfoVmware with value set to v.
func NewOptHypervisorHostAppInfoVmware(v HypervisorHostAppInfoVmware) OptHypervisorHostAppInfoVmware {
	return OptHypervisorHostAppInfoVmware{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostAppInfoVmware is optional HypervisorHostAppInfoVmware.
type OptHypervisorHostAppInfoVmware struct {
	Value HypervisorHostAppInfoVmware
	Set   bool
}

// IsSet returns true if OptHypervisorHostAppInfoVmware was set.
func (o OptHypervisorHostAppInfoVmware) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostAppInfoVmware) Reset() {
	var v HypervisorHostAppInfoVmware
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostAppInfoVmware) SetTo(v HypervisorHostAppInfoVmware) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostAppInfoVmware) Get() (v HypervisorHostAppInfoVmware, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostAppInfoVmware) Or(d HypervisorHostAppInfoVmware) HypervisorHostAppInfoVmware {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostHostPerfMetricInfo returns new OptHypervisorHostHostPerfMetricInfo with value set to v.
func NewOptHypervisorHostHostPerfMetricInfo(v HypervisorHostHostPerfMetricInfo) OptHypervisorHostHostPerfMetricInfo {
	return OptHypervisorHostHostPerfMetricInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostHostPerfMetricInfo is optional HypervisorHostHostPerfMetricInfo.
type OptHypervisorHostHostPerfMetricInfo struct {
	Value HypervisorHostHostPerfMetricInfo
	Set   bool
}

// IsSet returns true if OptHypervisorHostHostPerfMetricInfo was set.
func (o OptHypervisorHostHostPerfMetricInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostHostPerfMetricInfo) Reset() {
	var v HypervisorHostHostPerfMetricInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostHostPerfMetricInfo) SetTo(v HypervisorHostHostPerfMetricInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostHostPerfMetricInfo) Get() (v HypervisorHostHostPerfMetricInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostHostPerfMetricInfo) Or(d HypervisorHostHostPerfMetricInfo) HypervisorHostHostPerfMetricInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostHostType returns new OptHypervisorHostHostType with value set to v.
func NewOptHypervisorHostHostType(v HypervisorHostHostType) OptHypervisorHostHostType {
	return OptHypervisorHostHostType{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostHostType is optional HypervisorHostHostType.
type OptHypervisorHostHostType struct {
	Value HypervisorHostHostType
	Set   bool
}

// IsSet returns true if OptHypervisorHostHostType was set.
func (o OptHypervisorHostHostType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostHostType) Reset() {
	var v HypervisorHostHostType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostHostType) SetTo(v HypervisorHostHostType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostHostType) Get() (v HypervisorHostHostType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostHostType) Or(d HypervisorHostHostType) HypervisorHostHostType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostHypervisorManagerInfo returns new OptHypervisorHostHypervisorManagerInfo with value set to v.
func NewOptHypervisorHostHypervisorManagerInfo(v HypervisorHostHypervisorManagerInfo) OptHypervisorHostHypervisorManagerInfo {
	return OptHypervisorHostHypervisorManagerInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostHypervisorManagerInfo is optional HypervisorHostHypervisorManagerInfo.
type OptHypervisorHostHypervisorManagerInfo struct {
	Value HypervisorHostHypervisorManagerInfo
	Set   bool
}

// IsSet returns true if OptHypervisorHostHypervisorManagerInfo was set.
func (o OptHypervisorHostHypervisorManagerInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostHypervisorManagerInfo) Reset() {
	var v HypervisorHostHypervisorManagerInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostHypervisorManagerInfo) SetTo(v HypervisorHostHypervisorManagerInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostHypervisorManagerInfo) Get() (v HypervisorHostHypervisorManagerInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostHypervisorManagerInfo) Or(d HypervisorHostHypervisorManagerInfo) HypervisorHostHypervisorManagerInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostParentInfo returns new OptHypervisorHostParentInfo with value set to v.
func NewOptHypervisorHostParentInfo(v HypervisorHostParentInfo) OptHypervisorHostParentInfo {
	return OptHypervisorHostParentInfo{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostParentInfo is optional HypervisorHostParentInfo.
type OptHypervisorHostParentInfo struct {
	Value HypervisorHostParentInfo
	Set   bool
}

// IsSet returns true if OptHypervisorHostParentInfo was set.
func (o OptHypervisorHostParentInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostParentInfo) Reset() {
	var v HypervisorHostParentInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostParentInfo) SetTo(v HypervisorHostParentInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostParentInfo) Get() (v HypervisorHostParentInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostParentInfo) Or(d HypervisorHostParentInfo) HypervisorHostParentInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostParentInfoType returns new OptHypervisorHostParentInfoType with value set to v.
func NewOptHypervisorHostParentInfoType(v HypervisorHostParentInfoType) OptHypervisorHostParentInfoType {
	return OptHypervisorHostParentInfoType{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostParentInfoType is optional HypervisorHostParentInfoType.
type OptHypervisorHostParentInfoType struct {
	Value HypervisorHostParentInfoType
	Set   bool
}

// IsSet returns true if OptHypervisorHostParentInfoType was set.
func (o OptHypervisorHostParentInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostParentInfoType) Reset() {
	var v HypervisorHostParentInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostParentInfoType) SetTo(v HypervisorHostParentInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostParentInfoType) Get() (v HypervisorHostParentInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostParentInfoType) Or(d HypervisorHostParentInfoType) HypervisorHostParentInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostState returns new OptHypervisorHostState with value set to v.
func NewOptHypervisorHostState(v HypervisorHostState) OptHypervisorHostState {
	return OptHypervisorHostState{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostState is optional HypervisorHostState.
type OptHypervisorHostState struct {
	Value HypervisorHostState
	Set   bool
}

// IsSet returns true if OptHypervisorHostState was set.
func (o OptHypervisorHostState) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostState) Reset() {
	var v HypervisorHostState
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostState) SetTo(v HypervisorHostState) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostState) Get() (v HypervisorHostState, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostState) Or(d HypervisorHostState) HypervisorHostState {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostStatus returns new OptHypervisorHostStatus with value set to v.
func NewOptHypervisorHostStatus(v HypervisorHostStatus) OptHypervisorHostStatus {
	return OptHypervisorHostStatus{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostStatus is optional HypervisorHostStatus.
type OptHypervisorHostStatus struct {
	Value HypervisorHostStatus
	Set   bool
}

// IsSet returns true if OptHypervisorHostStatus was set.
func (o OptHypervisorHostStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostStatus) Reset() {
	var v HypervisorHostStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostStatus) SetTo(v HypervisorHostStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostStatus) Get() (v HypervisorHostStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostStatus) Or(d HypervisorHostStatus) HypervisorHostStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHypervisorHostStorageAdaptersInfoItemStatus returns new OptHypervisorHostStorageAdaptersInfoItemStatus with value set to v.
func NewOptHypervisorHostStorageAdaptersInfoItemStatus(v HypervisorHostStorageAdaptersInfoItemStatus) OptHypervisorHostStorageAdaptersInfoItemStatus {
	return OptHypervisorHostStorageAdaptersInfoItemStatus{
		Value: v,
		Set:   true,
	}
}

// OptHypervisorHostStorageAdaptersInfoItemStatus is optional HypervisorHostStorageAdaptersInfoItemStatus.
type OptHypervisorHostStorageAdaptersInfoItemStatus struct {
	Value HypervisorHostStorageAdaptersInfoItemStatus
	Set   bool
}

// IsSet returns true if OptHypervisorHostStorageAdaptersInfoItemStatus was set.
func (o OptHypervisorHostStorageAdaptersInfoItemStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHypervisorHostStorageAdaptersInfoItemStatus) Reset() {
	var v HypervisorHostStorageAdaptersInfoItemStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHypervisorHostStorageAdaptersInfoItemStatus) SetTo(v HypervisorHostStorageAdaptersInfoItemStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHypervisorHostStorageAdaptersInfoItemStatus) Get() (v HypervisorHostStorageAdaptersInfoItemStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHypervisorHostStorageAdaptersInfoItemStatus) Or(d HypervisorHostStorageAdaptersInfoItemStatus) HypervisorHostStorageAdaptersInfoItemStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptName returns new OptName with value set to v.
func NewOptName(v Name) OptName {
	return OptName{
		Value: v,
		Set:   true,
	}
}

// OptName is optional Name.
type OptName struct {
	Value Name
	Set   bool
}

// IsSet returns true if OptName was set.
func (o OptName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptName) Reset() {
	var v Name
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptName) SetTo(v Name) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptName) Get() (v Name, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptName) Or(d Name) Name {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNicTeamingPolicy returns new OptNicTeamingPolicy with value set to v.
func NewOptNicTeamingPolicy(v NicTeamingPolicy) OptNicTeamingPolicy {
	return OptNicTeamingPolicy{
		Value: v,
		Set:   true,
	}
}

// OptNicTeamingPolicy is optional NicTeamingPolicy.
type OptNicTeamingPolicy struct {
	Value NicTeamingPolicy
	Set   bool
}

// IsSet returns true if OptNicTeamingPolicy was set.
func (o OptNicTeamingPolicy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNicTeamingPolicy) Reset() {
	var v NicTeamingPolicy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNicTeamingPolicy) SetTo(v NicTeamingPolicy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNicTeamingPolicy) Get() (v NicTeamingPolicy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNicTeamingPolicy) Or(d NicTeamingPolicy) NicTeamingPolicy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionPolicyAppliedAtInfo returns new OptProtectionPolicyAppliedAtInfo with value set to v.
func NewOptProtectionPolicyAppliedAtInfo(v ProtectionPolicyAppliedAtInfo) OptProtectionPolicyAppliedAtInfo {
	return OptProtectionPolicyAppliedAtInfo{
		Value: v,
		Set:   true,
	}
}

// OptProtectionPolicyAppliedAtInfo is optional ProtectionPolicyAppliedAtInfo.
type OptProtectionPolicyAppliedAtInfo struct {
	Value ProtectionPolicyAppliedAtInfo
	Set   bool
}

// IsSet returns true if OptProtectionPolicyAppliedAtInfo was set.
func (o OptProtectionPolicyAppliedAtInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionPolicyAppliedAtInfo) Reset() {
	var v ProtectionPolicyAppliedAtInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionPolicyAppliedAtInfo) SetTo(v ProtectionPolicyAppliedAtInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionPolicyAppliedAtInfo) Get() (v ProtectionPolicyAppliedAtInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionPolicyAppliedAtInfo) Or(d ProtectionPolicyAppliedAtInfo) ProtectionPolicyAppliedAtInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionPolicyAppliedAtInfoType returns new OptProtectionPolicyAppliedAtInfoType with value set to v.
func NewOptProtectionPolicyAppliedAtInfoType(v ProtectionPolicyAppliedAtInfoType) OptProtectionPolicyAppliedAtInfoType {
	return OptProtectionPolicyAppliedAtInfoType{
		Value: v,
		Set:   true,
	}
}

// OptProtectionPolicyAppliedAtInfoType is optional ProtectionPolicyAppliedAtInfoType.
type OptProtectionPolicyAppliedAtInfoType struct {
	Value ProtectionPolicyAppliedAtInfoType
	Set   bool
}

// IsSet returns true if OptProtectionPolicyAppliedAtInfoType was set.
func (o OptProtectionPolicyAppliedAtInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionPolicyAppliedAtInfoType) Reset() {
	var v ProtectionPolicyAppliedAtInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionPolicyAppliedAtInfoType) SetTo(v ProtectionPolicyAppliedAtInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionPolicyAppliedAtInfoType) Get() (v ProtectionPolicyAppliedAtInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionPolicyAppliedAtInfoType) Or(d ProtectionPolicyAppliedAtInfoType) ProtectionPolicyAppliedAtInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProtectionStatus returns new OptProtectionStatus with value set to v.
func NewOptProtectionStatus(v ProtectionStatus) OptProtectionStatus {
	return OptProtectionStatus{
		Value: v,
		Set:   true,
	}
}

// OptProtectionStatus is optional ProtectionStatus.
type OptProtectionStatus struct {
	Value ProtectionStatus
	Set   bool
}

// IsSet returns true if OptProtectionStatus was set.
func (o OptProtectionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProtectionStatus) Reset() {
	var v ProtectionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProtectionStatus) SetTo(v ProtectionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProtectionStatus) Get() (v ProtectionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProtectionStatus) Or(d ProtectionStatus) ProtectionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProvisioningPolicyInfo returns new OptProvisioningPolicyInfo with value set to v.
func NewOptProvisioningPolicyInfo(v ProvisioningPolicyInfo) OptProvisioningPolicyInfo {
	return OptProvisioningPolicyInfo{
		Value: v,
		Set:   true,
	}
}

// OptProvisioningPolicyInfo is optional ProvisioningPolicyInfo.
type OptProvisioningPolicyInfo struct {
	Value ProvisioningPolicyInfo
	Set   bool
}

// IsSet returns true if OptProvisioningPolicyInfo was set.
func (o OptProvisioningPolicyInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProvisioningPolicyInfo) Reset() {
	var v ProvisioningPolicyInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProvisioningPolicyInfo) SetTo(v ProvisioningPolicyInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProvisioningPolicyInfo) Get() (v ProvisioningPolicyInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProvisioningPolicyInfo) Or(d ProvisioningPolicyInfo) ProvisioningPolicyInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRecoveryPointsExist returns new OptRecoveryPointsExist with value set to v.
func NewOptRecoveryPointsExist(v RecoveryPointsExist) OptRecoveryPointsExist {
	return OptRecoveryPointsExist{
		Value: v,
		Set:   true,
	}
}

// OptRecoveryPointsExist is optional RecoveryPointsExist.
type OptRecoveryPointsExist struct {
	Value RecoveryPointsExist
	Set   bool
}

// IsSet returns true if OptRecoveryPointsExist was set.
func (o OptRecoveryPointsExist) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRecoveryPointsExist) Reset() {
	var v RecoveryPointsExist
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRecoveryPointsExist) SetTo(v RecoveryPointsExist) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRecoveryPointsExist) Get() (v RecoveryPointsExist, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRecoveryPointsExist) Or(d RecoveryPointsExist) RecoveryPointsExist {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReplicationInfo returns new OptReplicationInfo with value set to v.
func NewOptReplicationInfo(v ReplicationInfo) OptReplicationInfo {
	return OptReplicationInfo{
		Value: v,
		Set:   true,
	}
}

// OptReplicationInfo is optional ReplicationInfo.
type OptReplicationInfo struct {
	Value ReplicationInfo
	Set   bool
}

// IsSet returns true if OptReplicationInfo was set.
func (o OptReplicationInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReplicationInfo) Reset() {
	var v ReplicationInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReplicationInfo) SetTo(v ReplicationInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReplicationInfo) Get() (v ReplicationInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReplicationInfo) Or(d ReplicationInfo) ReplicationInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReplicationPartnerInfoMode returns new OptReplicationPartnerInfoMode with value set to v.
func NewOptReplicationPartnerInfoMode(v ReplicationPartnerInfoMode) OptReplicationPartnerInfoMode {
	return OptReplicationPartnerInfoMode{
		Value: v,
		Set:   true,
	}
}

// OptReplicationPartnerInfoMode is optional ReplicationPartnerInfoMode.
type OptReplicationPartnerInfoMode struct {
	Value ReplicationPartnerInfoMode
	Set   bool
}

// IsSet returns true if OptReplicationPartnerInfoMode was set.
func (o OptReplicationPartnerInfoMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReplicationPartnerInfoMode) Reset() {
	var v ReplicationPartnerInfoMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReplicationPartnerInfoMode) SetTo(v ReplicationPartnerInfoMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReplicationPartnerInfoMode) Get() (v ReplicationPartnerInfoMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReplicationPartnerInfoMode) Or(d ReplicationPartnerInfoMode) ReplicationPartnerInfoMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReplicationPartnerInfoVendorName returns new OptReplicationPartnerInfoVendorName with value set to v.
func NewOptReplicationPartnerInfoVendorName(v ReplicationPartnerInfoVendorName) OptReplicationPartnerInfoVendorName {
	return OptReplicationPartnerInfoVendorName{
		Value: v,
		Set:   true,
	}
}

// OptReplicationPartnerInfoVendorName is optional ReplicationPartnerInfoVendorName.
type OptReplicationPartnerInfoVendorName struct {
	Value ReplicationPartnerInfoVendorName
	Set   bool
}

// IsSet returns true if OptReplicationPartnerInfoVendorName was set.
func (o OptReplicationPartnerInfoVendorName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReplicationPartnerInfoVendorName) Reset() {
	var v ReplicationPartnerInfoVendorName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReplicationPartnerInfoVendorName) SetTo(v ReplicationPartnerInfoVendorName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReplicationPartnerInfoVendorName) Get() (v ReplicationPartnerInfoVendorName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReplicationPartnerInfoVendorName) Or(d ReplicationPartnerInfoVendorName) ReplicationPartnerInfoVendorName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageFolderInfo returns new OptStorageFolderInfo with value set to v.
func NewOptStorageFolderInfo(v StorageFolderInfo) OptStorageFolderInfo {
	return OptStorageFolderInfo{
		Value: v,
		Set:   true,
	}
}

// OptStorageFolderInfo is optional StorageFolderInfo.
type OptStorageFolderInfo struct {
	Value StorageFolderInfo
	Set   bool
}

// IsSet returns true if OptStorageFolderInfo was set.
func (o OptStorageFolderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageFolderInfo) Reset() {
	var v StorageFolderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageFolderInfo) SetTo(v StorageFolderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageFolderInfo) Get() (v StorageFolderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageFolderInfo) Or(d StorageFolderInfo) StorageFolderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStoragePoolInfo returns new OptStoragePoolInfo with value set to v.
func NewOptStoragePoolInfo(v StoragePoolInfo) OptStoragePoolInfo {
	return OptStoragePoolInfo{
		Value: v,
		Set:   true,
	}
}

// OptStoragePoolInfo is optional StoragePoolInfo.
type OptStoragePoolInfo struct {
	Value StoragePoolInfo
	Set   bool
}

// IsSet returns true if OptStoragePoolInfo was set.
func (o OptStoragePoolInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStoragePoolInfo) Reset() {
	var v StoragePoolInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStoragePoolInfo) SetTo(v StoragePoolInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStoragePoolInfo) Get() (v StoragePoolInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStoragePoolInfo) Or(d StoragePoolInfo) StoragePoolInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageSystemInfo returns new OptStorageSystemInfo with value set to v.
func NewOptStorageSystemInfo(v StorageSystemInfo) OptStorageSystemInfo {
	return OptStorageSystemInfo{
		Value: v,
		Set:   true,
	}
}

// OptStorageSystemInfo is optional StorageSystemInfo.
type OptStorageSystemInfo struct {
	Value StorageSystemInfo
	Set   bool
}

// IsSet returns true if OptStorageSystemInfo was set.
func (o OptStorageSystemInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageSystemInfo) Reset() {
	var v StorageSystemInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageSystemInfo) SetTo(v StorageSystemInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageSystemInfo) Get() (v StorageSystemInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageSystemInfo) Or(d StorageSystemInfo) StorageSystemInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStorageSystemInfoType returns new OptStorageSystemInfoType with value set to v.
func NewOptStorageSystemInfoType(v StorageSystemInfoType) OptStorageSystemInfoType {
	return OptStorageSystemInfoType{
		Value: v,
		Set:   true,
	}
}

// OptStorageSystemInfoType is optional StorageSystemInfoType.
type OptStorageSystemInfoType struct {
	Value StorageSystemInfoType
	Set   bool
}

// IsSet returns true if OptStorageSystemInfoType was set.
func (o OptStorageSystemInfoType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStorageSystemInfoType) Reset() {
	var v StorageSystemInfoType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStorageSystemInfoType) SetTo(v StorageSystemInfoType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStorageSystemInfoType) Get() (v StorageSystemInfoType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStorageSystemInfoType) Or(d StorageSystemInfoType) StorageSystemInfoType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptType returns new OptType with value set to v.
func NewOptType(v Type) OptType {
	return OptType{
		Value: v,
		Set:   true,
	}
}

// OptType is optional Type.
type OptType struct {
	Value Type
	Set   bool
}

// IsSet returns true if OptType was set.
func (o OptType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptType) Reset() {
	var v Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptType) SetTo(v Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptType) Get() (v Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptType) Or(d Type) Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVolumeSetInfo returns new OptVolumeSetInfo with value set to v.
func NewOptVolumeSetInfo(v VolumeSetInfo) OptVolumeSetInfo {
	return OptVolumeSetInfo{
		Value: v,
		Set:   true,
	}
}

// OptVolumeSetInfo is optional VolumeSetInfo.
type OptVolumeSetInfo struct {
	Value VolumeSetInfo
	Set   bool
}

// IsSet returns true if OptVolumeSetInfo was set.
func (o OptVolumeSetInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVolumeSetInfo) Reset() {
	var v VolumeSetInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVolumeSetInfo) SetTo(v VolumeSetInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVolumeSetInfo) Get() (v VolumeSetInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVolumeSetInfo) Or(d VolumeSetInfo) VolumeSetInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Port group information.
// Ref: #/components/schemas/PortGroup
type PortGroup struct {
	// The linkable identifier for the port group.
	Key OptString `json:"key"`
	// Name of the port group.
	Name             OptString           `json:"name"`
	NicTeamingPolicy OptNicTeamingPolicy `json:"nicTeamingPolicy"`
	// VLAN ID associated with the port group.
	VlanId OptInt32 `json:"vlanId"`
	// Virtual switch that contains the port group.
	Vswitch OptString `json:"vswitch"`
	// Virtual switch name.
	VswitchName OptString `json:"vswitchName"`
}

// GetKey returns the value of Key.
func (s *PortGroup) GetKey() OptString {
	return s.Key
}

// GetName returns the value of Name.
func (s *PortGroup) GetName() OptString {
	return s.Name
}

// GetNicTeamingPolicy returns the value of NicTeamingPolicy.
func (s *PortGroup) GetNicTeamingPolicy() OptNicTeamingPolicy {
	return s.NicTeamingPolicy
}

// GetVlanId returns the value of VlanId.
func (s *PortGroup) GetVlanId() OptInt32 {
	return s.VlanId
}

// GetVswitch returns the value of Vswitch.
func (s *PortGroup) GetVswitch() OptString {
	return s.Vswitch
}

// GetVswitchName returns the value of VswitchName.
func (s *PortGroup) GetVswitchName() OptString {
	return s.VswitchName
}

// SetKey sets the value of Key.
func (s *PortGroup) SetKey(val OptString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *PortGroup) SetName(val OptString) {
	s.Name = val
}

// SetNicTeamingPolicy sets the value of NicTeamingPolicy.
func (s *PortGroup) SetNicTeamingPolicy(val OptNicTeamingPolicy) {
	s.NicTeamingPolicy = val
}

// SetVlanId sets the value of VlanId.
func (s *PortGroup) SetVlanId(val OptInt32) {
	s.VlanId = val
}

// SetVswitch sets the value of Vswitch.
func (s *PortGroup) SetVswitch(val OptString) {
	s.Vswitch = val
}

// SetVswitchName sets the value of VswitchName.
func (s *PortGroup) SetVswitchName(val OptString) {
	s.VswitchName = val
}

// Describes applied protection policy information.
// Ref: #/components/schemas/ProtectionPolicyAppliedAtInfo
type ProtectionPolicyAppliedAtInfo struct {
	// UUID string uniquely identifying the protection policy.
	ID OptString `json:"id"`
	// Name of the protection policy.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of the protection policy.
	Type OptProtectionPolicyAppliedAtInfoType `json:"type"`
}

// GetID returns the value of ID.
func (s *ProtectionPolicyAppliedAtInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProtectionPolicyAppliedAtInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *ProtectionPolicyAppliedAtInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *ProtectionPolicyAppliedAtInfo) GetType() OptProtectionPolicyAppliedAtInfoType {
	return s.Type
}

// SetID sets the value of ID.
func (s *ProtectionPolicyAppliedAtInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProtectionPolicyAppliedAtInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *ProtectionPolicyAppliedAtInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *ProtectionPolicyAppliedAtInfo) SetType(val OptProtectionPolicyAppliedAtInfoType) {
	s.Type = val
}

// Type of the protection policy.
type ProtectionPolicyAppliedAtInfoType string

const (
	ProtectionPolicyAppliedAtInfoTypeDATASTORE         ProtectionPolicyAppliedAtInfoType = "DATASTORE"
	ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE    ProtectionPolicyAppliedAtInfoType = "VIRTUAL_MACHINE"
	ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP ProtectionPolicyAppliedAtInfoType = "VM_PROTECTION_GROUP"
)

// AllValues returns all ProtectionPolicyAppliedAtInfoType values.
func (ProtectionPolicyAppliedAtInfoType) AllValues() []ProtectionPolicyAppliedAtInfoType {
	return []ProtectionPolicyAppliedAtInfoType{
		ProtectionPolicyAppliedAtInfoTypeDATASTORE,
		ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE,
		ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProtectionPolicyAppliedAtInfoType) MarshalText() ([]byte, error) {
	switch s {
	case ProtectionPolicyAppliedAtInfoTypeDATASTORE:
		return []byte(s), nil
	case ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE:
		return []byte(s), nil
	case ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProtectionPolicyAppliedAtInfoType) UnmarshalText(data []byte) error {
	switch ProtectionPolicyAppliedAtInfoType(data) {
	case ProtectionPolicyAppliedAtInfoTypeDATASTORE:
		*s = ProtectionPolicyAppliedAtInfoTypeDATASTORE
		return nil
	case ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE:
		*s = ProtectionPolicyAppliedAtInfoTypeVIRTUALMACHINE
		return nil
	case ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP:
		*s = ProtectionPolicyAppliedAtInfoTypeVMPROTECTIONGROUP
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Provides the current protection status of this resource. - UNPROTECTED - No policy assigned, No
// recovery points exists - LAPSED      - No policy assigned, at least one recovery points exists -
// PENDING     - Policy assigned, No recovery points exists - PARTIAL     - Policy assigned, At least
// one recovery point exists - PROTECTED   - Policy assigned, most recent run of every configured
// schedule is successful - PAUSED      - Policy assigned, one or more of the schedules are paused -
// UNSUPPORTED - No policy can be assigned.
// Ref: #/components/schemas/protectionStatus
type ProtectionStatus string

const (
	ProtectionStatusUNPROTECTED ProtectionStatus = "UNPROTECTED"
	ProtectionStatusLAPSED      ProtectionStatus = "LAPSED"
	ProtectionStatusPENDING     ProtectionStatus = "PENDING"
	ProtectionStatusPARTIAL     ProtectionStatus = "PARTIAL"
	ProtectionStatusPROTECTED   ProtectionStatus = "PROTECTED"
	ProtectionStatusPAUSED      ProtectionStatus = "PAUSED"
	ProtectionStatusUNSUPPORTED ProtectionStatus = "UNSUPPORTED"
)

// AllValues returns all ProtectionStatus values.
func (ProtectionStatus) AllValues() []ProtectionStatus {
	return []ProtectionStatus{
		ProtectionStatusUNPROTECTED,
		ProtectionStatusLAPSED,
		ProtectionStatusPENDING,
		ProtectionStatusPARTIAL,
		ProtectionStatusPROTECTED,
		ProtectionStatusPAUSED,
		ProtectionStatusUNSUPPORTED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProtectionStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProtectionStatusUNPROTECTED:
		return []byte(s), nil
	case ProtectionStatusLAPSED:
		return []byte(s), nil
	case ProtectionStatusPENDING:
		return []byte(s), nil
	case ProtectionStatusPARTIAL:
		return []byte(s), nil
	case ProtectionStatusPROTECTED:
		return []byte(s), nil
	case ProtectionStatusPAUSED:
		return []byte(s), nil
	case ProtectionStatusUNSUPPORTED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProtectionStatus) UnmarshalText(data []byte) error {
	switch ProtectionStatus(data) {
	case ProtectionStatusUNPROTECTED:
		*s = ProtectionStatusUNPROTECTED
		return nil
	case ProtectionStatusLAPSED:
		*s = ProtectionStatusLAPSED
		return nil
	case ProtectionStatusPENDING:
		*s = ProtectionStatusPENDING
		return nil
	case ProtectionStatusPARTIAL:
		*s = ProtectionStatusPARTIAL
		return nil
	case ProtectionStatusPROTECTED:
		*s = ProtectionStatusPROTECTED
		return nil
	case ProtectionStatusPAUSED:
		*s = ProtectionStatusPAUSED
		return nil
	case ProtectionStatusUNSUPPORTED:
		*s = ProtectionStatusUNSUPPORTED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes provisioning policy information.
// Ref: #/components/schemas/ProvisioningPolicyInfo
type ProvisioningPolicyInfo struct {
	// UUID string uniquely identifying the provisioning policy.
	ID OptString `json:"id"`
	// Name of the provisioning policy.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// The type of the resource.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *ProvisioningPolicyInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ProvisioningPolicyInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *ProvisioningPolicyInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *ProvisioningPolicyInfo) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *ProvisioningPolicyInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ProvisioningPolicyInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *ProvisioningPolicyInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *ProvisioningPolicyInfo) SetType(val OptString) {
	s.Type = val
}

type RecoveryPointsExist bool

// Replication groups information containing details of all replication partners. Applicable only for
// Protection Group type 'STORAGE_REPLICATION_GROUP'.
// Ref: #/components/schemas/ReplicationInfo
type ReplicationInfo struct {
	// Id of the replication group.
	ID OptString `json:"id"`
	// Name of the replication group.
	Name OptString `json:"name"`
	// List of Volumes associated with vm protection group.
	PartnerDetails []ReplicationPartnerInfo `json:"partnerDetails"`
	// Uri representing replication group in Storage Fleet.
	ResourceUri OptString `json:"resourceUri"`
	// Type representing volume-set in Storage Fleet.
	Type OptString `json:"type"`
}

// GetID returns the value of ID.
func (s *ReplicationInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *ReplicationInfo) GetName() OptString {
	return s.Name
}

// GetPartnerDetails returns the value of PartnerDetails.
func (s *ReplicationInfo) GetPartnerDetails() []ReplicationPartnerInfo {
	return s.PartnerDetails
}

// GetResourceUri returns the value of ResourceUri.
func (s *ReplicationInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *ReplicationInfo) GetType() OptString {
	return s.Type
}

// SetID sets the value of ID.
func (s *ReplicationInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ReplicationInfo) SetName(val OptString) {
	s.Name = val
}

// SetPartnerDetails sets the value of PartnerDetails.
func (s *ReplicationInfo) SetPartnerDetails(val []ReplicationPartnerInfo) {
	s.PartnerDetails = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *ReplicationInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *ReplicationInfo) SetType(val OptString) {
	s.Type = val
}

// Details of the replication partnerDetails:.
// Ref: #/components/schemas/ReplicationPartnerInfo
type ReplicationPartnerInfo struct {
	// Id of the storage system, applicable only for Nimble storage systems.
	ID OptString `json:"id"`
	// Replication Mode.
	Mode OptReplicationPartnerInfoMode `json:"mode"`
	// Name of the replication partner Array.
	Name OptString `json:"name"`
	// Storage system wwn in case of Primera.
	SystemWwn OptString `json:"systemWwn"`
	// Vendor name.
	VendorName OptReplicationPartnerInfoVendorName `json:"vendorName"`
}

// GetID returns the value of ID.
func (s *ReplicationPartnerInfo) GetID() OptString {
	return s.ID
}

// GetMode returns the value of Mode.
func (s *ReplicationPartnerInfo) GetMode() OptReplicationPartnerInfoMode {
	return s.Mode
}

// GetName returns the value of Name.
func (s *ReplicationPartnerInfo) GetName() OptString {
	return s.Name
}

// GetSystemWwn returns the value of SystemWwn.
func (s *ReplicationPartnerInfo) GetSystemWwn() OptString {
	return s.SystemWwn
}

// GetVendorName returns the value of VendorName.
func (s *ReplicationPartnerInfo) GetVendorName() OptReplicationPartnerInfoVendorName {
	return s.VendorName
}

// SetID sets the value of ID.
func (s *ReplicationPartnerInfo) SetID(val OptString) {
	s.ID = val
}

// SetMode sets the value of Mode.
func (s *ReplicationPartnerInfo) SetMode(val OptReplicationPartnerInfoMode) {
	s.Mode = val
}

// SetName sets the value of Name.
func (s *ReplicationPartnerInfo) SetName(val OptString) {
	s.Name = val
}

// SetSystemWwn sets the value of SystemWwn.
func (s *ReplicationPartnerInfo) SetSystemWwn(val OptString) {
	s.SystemWwn = val
}

// SetVendorName sets the value of VendorName.
func (s *ReplicationPartnerInfo) SetVendorName(val OptReplicationPartnerInfoVendorName) {
	s.VendorName = val
}

// Replication Mode.
type ReplicationPartnerInfoMode string

const (
	ReplicationPartnerInfoModeSYNCHRONOUS ReplicationPartnerInfoMode = "SYNCHRONOUS"
	ReplicationPartnerInfoModePERIODIC    ReplicationPartnerInfoMode = "PERIODIC"
)

// AllValues returns all ReplicationPartnerInfoMode values.
func (ReplicationPartnerInfoMode) AllValues() []ReplicationPartnerInfoMode {
	return []ReplicationPartnerInfoMode{
		ReplicationPartnerInfoModeSYNCHRONOUS,
		ReplicationPartnerInfoModePERIODIC,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReplicationPartnerInfoMode) MarshalText() ([]byte, error) {
	switch s {
	case ReplicationPartnerInfoModeSYNCHRONOUS:
		return []byte(s), nil
	case ReplicationPartnerInfoModePERIODIC:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReplicationPartnerInfoMode) UnmarshalText(data []byte) error {
	switch ReplicationPartnerInfoMode(data) {
	case ReplicationPartnerInfoModeSYNCHRONOUS:
		*s = ReplicationPartnerInfoModeSYNCHRONOUS
		return nil
	case ReplicationPartnerInfoModePERIODIC:
		*s = ReplicationPartnerInfoModePERIODIC
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Vendor name.
type ReplicationPartnerInfoVendorName string

const (
	ReplicationPartnerInfoVendorNameNIMBLE  ReplicationPartnerInfoVendorName = "NIMBLE"
	ReplicationPartnerInfoVendorNamePRIMERA ReplicationPartnerInfoVendorName = "PRIMERA"
)

// AllValues returns all ReplicationPartnerInfoVendorName values.
func (ReplicationPartnerInfoVendorName) AllValues() []ReplicationPartnerInfoVendorName {
	return []ReplicationPartnerInfoVendorName{
		ReplicationPartnerInfoVendorNameNIMBLE,
		ReplicationPartnerInfoVendorNamePRIMERA,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ReplicationPartnerInfoVendorName) MarshalText() ([]byte, error) {
	switch s {
	case ReplicationPartnerInfoVendorNameNIMBLE:
		return []byte(s), nil
	case ReplicationPartnerInfoVendorNamePRIMERA:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ReplicationPartnerInfoVendorName) UnmarshalText(data []byte) error {
	switch ReplicationPartnerInfoVendorName(data) {
	case ReplicationPartnerInfoVendorNameNIMBLE:
		*s = ReplicationPartnerInfoVendorNameNIMBLE
		return nil
	case ReplicationPartnerInfoVendorNamePRIMERA:
		*s = ReplicationPartnerInfoVendorNamePRIMERA
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Services []string

// Information of storage folder.
// Ref: #/components/schemas/StorageFolderInfo
type StorageFolderInfo struct {
	// A user-friendly name that identifies the storage folder.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage folder.
	ID OptString `json:"id"`
	// Name of the storage folder.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of storage folder.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StorageFolderInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StorageFolderInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *StorageFolderInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StorageFolderInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *StorageFolderInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *StorageFolderInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StorageFolderInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *StorageFolderInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StorageFolderInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *StorageFolderInfo) SetType(val OptString) {
	s.Type = val
}

// Describes a storage pool.
// Ref: #/components/schemas/StoragePoolInfo
type StoragePoolInfo struct {
	// A user-friendly name that identifies the storage pool.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage pool.
	ID OptString `json:"id"`
	// Name of the storage pool.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of storage pool.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StoragePoolInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StoragePoolInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *StoragePoolInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StoragePoolInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *StoragePoolInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *StoragePoolInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StoragePoolInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *StoragePoolInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StoragePoolInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *StoragePoolInfo) SetType(val OptString) {
	s.Type = val
}

// Describes a storage system.
// Ref: #/components/schemas/StorageSystemInfo
type StorageSystemInfo struct {
	// A user-friendly name that identifies the storage system.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the storage system.
	ID OptString `json:"id"`
	// Specify if the storage system is registered.
	Managed OptBool `json:"managed"`
	// Name of the storage system.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Serial number of the storage system.
	SerialNumber OptString `json:"serialNumber"`
	// Type of storage system.
	Type OptStorageSystemInfoType `json:"type"`
	// Storage system provider name.
	VendorName OptString `json:"vendorName"`
}

// GetDisplayName returns the value of DisplayName.
func (s *StorageSystemInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *StorageSystemInfo) GetID() OptString {
	return s.ID
}

// GetManaged returns the value of Managed.
func (s *StorageSystemInfo) GetManaged() OptBool {
	return s.Managed
}

// GetName returns the value of Name.
func (s *StorageSystemInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *StorageSystemInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetSerialNumber returns the value of SerialNumber.
func (s *StorageSystemInfo) GetSerialNumber() OptString {
	return s.SerialNumber
}

// GetType returns the value of Type.
func (s *StorageSystemInfo) GetType() OptStorageSystemInfoType {
	return s.Type
}

// GetVendorName returns the value of VendorName.
func (s *StorageSystemInfo) GetVendorName() OptString {
	return s.VendorName
}

// SetDisplayName sets the value of DisplayName.
func (s *StorageSystemInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *StorageSystemInfo) SetID(val OptString) {
	s.ID = val
}

// SetManaged sets the value of Managed.
func (s *StorageSystemInfo) SetManaged(val OptBool) {
	s.Managed = val
}

// SetName sets the value of Name.
func (s *StorageSystemInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *StorageSystemInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetSerialNumber sets the value of SerialNumber.
func (s *StorageSystemInfo) SetSerialNumber(val OptString) {
	s.SerialNumber = val
}

// SetType sets the value of Type.
func (s *StorageSystemInfo) SetType(val OptStorageSystemInfoType) {
	s.Type = val
}

// SetVendorName sets the value of VendorName.
func (s *StorageSystemInfo) SetVendorName(val OptString) {
	s.VendorName = val
}

// Type of storage system.
type StorageSystemInfoType string

const (
	StorageSystemInfoTypeNIMBLE      StorageSystemInfoType = "NIMBLE"
	StorageSystemInfoTypeTHREEPAR    StorageSystemInfoType = "THREEPAR"
	StorageSystemInfoTypePRIMERA     StorageSystemInfoType = "PRIMERA"
	StorageSystemInfoTypeALLETRA6000 StorageSystemInfoType = "ALLETRA_6000"
	StorageSystemInfoTypeALLETRA9000 StorageSystemInfoType = "ALLETRA_9000"
)

// AllValues returns all StorageSystemInfoType values.
func (StorageSystemInfoType) AllValues() []StorageSystemInfoType {
	return []StorageSystemInfoType{
		StorageSystemInfoTypeNIMBLE,
		StorageSystemInfoTypeTHREEPAR,
		StorageSystemInfoTypePRIMERA,
		StorageSystemInfoTypeALLETRA6000,
		StorageSystemInfoTypeALLETRA9000,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StorageSystemInfoType) MarshalText() ([]byte, error) {
	switch s {
	case StorageSystemInfoTypeNIMBLE:
		return []byte(s), nil
	case StorageSystemInfoTypeTHREEPAR:
		return []byte(s), nil
	case StorageSystemInfoTypePRIMERA:
		return []byte(s), nil
	case StorageSystemInfoTypeALLETRA6000:
		return []byte(s), nil
	case StorageSystemInfoTypeALLETRA9000:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StorageSystemInfoType) UnmarshalText(data []byte) error {
	switch StorageSystemInfoType(data) {
	case StorageSystemInfoTypeNIMBLE:
		*s = StorageSystemInfoTypeNIMBLE
		return nil
	case StorageSystemInfoTypeTHREEPAR:
		*s = StorageSystemInfoTypeTHREEPAR
		return nil
	case StorageSystemInfoTypePRIMERA:
		*s = StorageSystemInfoTypePRIMERA
		return nil
	case StorageSystemInfoTypeALLETRA6000:
		*s = StorageSystemInfoTypeALLETRA6000
		return nil
	case StorageSystemInfoTypeALLETRA9000:
		*s = StorageSystemInfoTypeALLETRA9000
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Type string

// Information of the Virtual Machine Protection Group.
// Ref: #/components/schemas/VmProtectionGroupInfo
type VmProtectionGroupInfo struct {
	// Unique identifier for the Protection Group.
	ID OptString `json:"id"`
	// Name of the Protection Group.
	Name OptString `json:"name"`
	// Reference to resource.
	ResourceUri OptString `json:"resourceUri"`
	Type        OptType   `json:"type"`
}

// GetID returns the value of ID.
func (s *VmProtectionGroupInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VmProtectionGroupInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VmProtectionGroupInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VmProtectionGroupInfo) GetType() OptType {
	return s.Type
}

// SetID sets the value of ID.
func (s *VmProtectionGroupInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VmProtectionGroupInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VmProtectionGroupInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VmProtectionGroupInfo) SetType(val OptType) {
	s.Type = val
}

// Information of volume or snapshot.
// Ref: #/components/schemas/VolumeInfo
type VolumeInfo struct {
	// A user-friendly name that identifies the volume.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the volume.
	ID OptString `json:"id"`
	// Name of the volume.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// SCSI identifier of the volume or snapshot .
	ScsiIdentifier OptString `json:"scsiIdentifier"`
	// Size of the volume or snapshot in bytes.
	SizeInBytes       OptInt64             `json:"sizeInBytes"`
	StorageFolderInfo OptStorageFolderInfo `json:"storageFolderInfo"`
	StoragePoolInfo   OptStoragePoolInfo   `json:"storagePoolInfo"`
	StorageSystemInfo OptStorageSystemInfo `json:"storageSystemInfo"`
	// Type of volume.
	Type          OptString        `json:"type"`
	VolumeSetInfo OptVolumeSetInfo `json:"volumeSetInfo"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VolumeInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VolumeInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VolumeInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VolumeInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetScsiIdentifier returns the value of ScsiIdentifier.
func (s *VolumeInfo) GetScsiIdentifier() OptString {
	return s.ScsiIdentifier
}

// GetSizeInBytes returns the value of SizeInBytes.
func (s *VolumeInfo) GetSizeInBytes() OptInt64 {
	return s.SizeInBytes
}

// GetStorageFolderInfo returns the value of StorageFolderInfo.
func (s *VolumeInfo) GetStorageFolderInfo() OptStorageFolderInfo {
	return s.StorageFolderInfo
}

// GetStoragePoolInfo returns the value of StoragePoolInfo.
func (s *VolumeInfo) GetStoragePoolInfo() OptStoragePoolInfo {
	return s.StoragePoolInfo
}

// GetStorageSystemInfo returns the value of StorageSystemInfo.
func (s *VolumeInfo) GetStorageSystemInfo() OptStorageSystemInfo {
	return s.StorageSystemInfo
}

// GetType returns the value of Type.
func (s *VolumeInfo) GetType() OptString {
	return s.Type
}

// GetVolumeSetInfo returns the value of VolumeSetInfo.
func (s *VolumeInfo) GetVolumeSetInfo() OptVolumeSetInfo {
	return s.VolumeSetInfo
}

// SetDisplayName sets the value of DisplayName.
func (s *VolumeInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VolumeInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VolumeInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VolumeInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetScsiIdentifier sets the value of ScsiIdentifier.
func (s *VolumeInfo) SetScsiIdentifier(val OptString) {
	s.ScsiIdentifier = val
}

// SetSizeInBytes sets the value of SizeInBytes.
func (s *VolumeInfo) SetSizeInBytes(val OptInt64) {
	s.SizeInBytes = val
}

// SetStorageFolderInfo sets the value of StorageFolderInfo.
func (s *VolumeInfo) SetStorageFolderInfo(val OptStorageFolderInfo) {
	s.StorageFolderInfo = val
}

// SetStoragePoolInfo sets the value of StoragePoolInfo.
func (s *VolumeInfo) SetStoragePoolInfo(val OptStoragePoolInfo) {
	s.StoragePoolInfo = val
}

// SetStorageSystemInfo sets the value of StorageSystemInfo.
func (s *VolumeInfo) SetStorageSystemInfo(val OptStorageSystemInfo) {
	s.StorageSystemInfo = val
}

// SetType sets the value of Type.
func (s *VolumeInfo) SetType(val OptString) {
	s.Type = val
}

// SetVolumeSetInfo sets the value of VolumeSetInfo.
func (s *VolumeInfo) SetVolumeSetInfo(val OptVolumeSetInfo) {
	s.VolumeSetInfo = val
}

// Describes a volume set.
// Ref: #/components/schemas/VolumeSetInfo
type VolumeSetInfo struct {
	// A user-friendly name that identifies the volume set.
	DisplayName OptString `json:"displayName"`
	// UUID string uniquely identifying the volume set.
	ID OptString `json:"id"`
	// Name of the volume set.
	Name OptString `json:"name"`
	// The URI reference for this resource.
	ResourceUri OptString `json:"resourceUri"`
	// Type of the volume set.
	Type OptString `json:"type"`
}

// GetDisplayName returns the value of DisplayName.
func (s *VolumeSetInfo) GetDisplayName() OptString {
	return s.DisplayName
}

// GetID returns the value of ID.
func (s *VolumeSetInfo) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *VolumeSetInfo) GetName() OptString {
	return s.Name
}

// GetResourceUri returns the value of ResourceUri.
func (s *VolumeSetInfo) GetResourceUri() OptString {
	return s.ResourceUri
}

// GetType returns the value of Type.
func (s *VolumeSetInfo) GetType() OptString {
	return s.Type
}

// SetDisplayName sets the value of DisplayName.
func (s *VolumeSetInfo) SetDisplayName(val OptString) {
	s.DisplayName = val
}

// SetID sets the value of ID.
func (s *VolumeSetInfo) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *VolumeSetInfo) SetName(val OptString) {
	s.Name = val
}

// SetResourceUri sets the value of ResourceUri.
func (s *VolumeSetInfo) SetResourceUri(val OptString) {
	s.ResourceUri = val
}

// SetType sets the value of Type.
func (s *VolumeSetInfo) SetType(val OptString) {
	s.Type = val
}
